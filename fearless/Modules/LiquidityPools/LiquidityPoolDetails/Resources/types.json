[{
    "chainId": "7834781d38e4798d548e34ec947d19deea29df148a7bf32484b7b24dacf8d4b7",
    "runtime_id": 10,
    "types": {
        "<T::Lookup as StaticLookup>::Source": "LookupSource",
        "(T::AccountId, Data)": "(AccountId, Data)",
        "()": "Null",
        "Vec<UnappliedSlash<T::AccountId, BalanceOf<T>>>": "Vec<UnappliedSlash>",
            "Compact<BalanceOf<T>>": "Compact<Balance>",
            "Balance": "u128",
            "BalanceOf": "Balance",
            "Block": "GenericBlock",
            "Call": "GenericCall",
            "Vec<<T as Config>::Call>": "Vec<GenericCall>",
            "H32": "[u8; 4]",
            "H64": "[u8; 8]",
            "H128": "[u8; 16]",
            "H1024": "[u8; 128]",
            "H2048": "[u8; 256]",
            "H160": "H160",
            "H256": "H256",
            "H512": "[u8; 64]",
            "Hash": "H256",
            "BlockHash": "Hash",
            "CallHash": "Hash",
            "CallHashOf": "CallHash",
            "Fixed64": "u64",
            "Fixed128": "u128",
            "AccountId": "GenericAccountId",
            "AccountIdOf": "AccountId",
            "AccountVoteSplit": {
              "type": "struct",
              "type_mapping": [
                [
                  "aye",
                  "Balance"
                ],
                [
                  "nay",
                  "Balance"
                ]
              ]
            },
            "AccountVoteStandard": {
              "type": "struct",
              "type_mapping": [
                [
                  "vote",
                  "Vote"
                ],
                [
                  "balance",
                  "Balance"
                ]
              ]
            },
            "AccountVote": {
              "type": "enum",
              "type_mapping": [
                [
                  "Standard",
                  "AccountVoteStandard"
                ],
                [
                  "Split",
                  "AccountVoteSplit"
                ]
              ]
            },
            "ArithmeticError": {
              "type": "enum",
              "value_list": [
                "Underflow",
                "Overflow",
                "DivisionByZero"
              ]
            },
            "BlockLength": {
              "type": "struct",
              "type_mapping": [
                [
                  "max",
                  "PerDispatchClassU32"
                ]
              ]
            },
            "PerDispatchClassU32": {
              "type": "struct",
              "type_mapping": [
                [
                  "normal",
                  "u32"
                ],
                [
                  "operational",
                  "u32"
                ],
                [
                  "mandatory",
                  "u32"
                ]
              ]
            },
            "Delegations": {
              "type": "struct",
              "type_mapping": [
                [
                  "votes",
                  "Balance"
                ],
                [
                  "capital",
                  "Balance"
                ]
              ]
            },
            "PriorLock": {
              "type": "struct",
              "type_mapping": [
                 ["block_number", "BlockNumber"],
                 ["balance", "Balance"]
              ]
            },
            "ReferendumInfoFinished": {
              "type": "struct",
              "type_mapping": [
                [
                  "approved",
                  "bool"
                ],
                [
                  "end",
                  "BlockNumber"
                ]
              ]
            },
            "Tally": {
              "type": "struct",
              "type_mapping": [
                [
                  "ayes",
                  "Balance"
                ],
                [
                  "nays",
                  "Balance"
                ],
                [
                  "turnout",
                  "Balance"
                ]
              ]
            },
            "ReferendumStatus": {
              "type": "struct",
              "type_mapping": [
                [
                  "end",
                  "BlockNumber"
                ],
                [
                  "proposal_hash",
                  "Hash"
                ],
                [
                  "threshold",
                  "VoteThreshold"
                ],
                [
                  "delay",
                  "BlockNumber"
                ],
                [
                  "tally",
                  "Tally"
                ]
              ]
            },
            "ReferendumInfo": {
              "type": "enum",
              "type_mapping": [
                [
                  "Ongoing",
                  "ReferendumStatus"
                ],
                [
                  "Finished",
                  "ReferendumInfoFinished"
                ]
              ]
            },
            "VotingDirectVote": {
              "type": "struct",
              "type_mapping": [
                 ["referendum_index", "ReferendumIndex"],
                 ["account_vote", "AccountVote"]
              ]
            },
            "VotingDirect": {
              "type": "struct",
              "type_mapping": [
                [
                  "votes",
                  "Vec<VotingDirectVote>"
                ],
                [
                  "delegations",
                  "Delegations"
                ],
                [
                  "prior",
                  "PriorLock"
                ]
              ]
            },
            "VotingDelegating": {
              "type": "struct",
              "type_mapping": [
                [
                  "balance",
                  "Balance"
                ],
                [
                  "target",
                  "AccountId"
                ],
                [
                  "conviction",
                  "Conviction"
                ],
                [
                  "delegations",
                  "Delegations"
                ],
                [
                  "prior",
                  "PriorLock"
                ]
              ]
            },
            "Voting": {
              "type": "enum",
              "type_mapping": [
                [
                  "Direct",
                  "VotingDirect"
                ],
                [
                  "Delegating",
                  "VotingDelegating"
                ]
              ]
            },
            "(AccountId, Balance)": {
              "type": "struct",
              "type_mapping": [
                [
                  "account",
                  "AccountId"
                ],
                [
                  "balance",
                  "Balance"
                ]
              ]
            },
            "(BalanceOf<T, I>, BidKind<AccountId, BalanceOf<T, I>>)": {
              "type": "struct",
              "type_mapping": [
                [
                  "balance",
                  "Balance"
                ],
                [
                  "bidkind",
                  "BidKind"
                ]
              ]
            },
            "RawOrigin": {
              "type": "enum",
              "type_mapping": [
                [
                  "Root",
                  "Null"
                ],
                [
                  "Signed",
                  "AccountId"
                ],
                [
                  "None",
                  "Null"
                ]
              ]
            },
            "RefCount": "u32",
            "RefCountTo259": "u8",
            "ExtendedBalance": "u128",
            "RawSolution": {
              "type": "struct",
              "type_mapping": [
                [
                  "compact",
                  "CompactAssignments"
                ],
                [
                  "score",
                  "ElectionScore"
                ],
                [
                  "round",
                  "u32"
                ]
              ]
            },
            "RawSolutionWith16": {
              "type": "struct",
              "type_mapping": [
                [
                  "compact",
                  "CompactAssignmentsWith16"
                ],
                [
                  "score",
                  "ElectionScore"
                ],
                [
                  "round",
                  "u32"
                ]
              ]
            },
            "ReadySolution": {
              "type": "struct",
              "type_mapping": [
                [
                  "supports",
                  "SolutionSupports"
                ],
                [
                  "score",
                  "ElectionScore"
                ],
                [
                  "compute",
                  "ElectionCompute"
                ]
              ]
            },
            "RoundSnapshot": {
              "type": "struct",
              "type_mapping": [
                [
                  "voters",
                  "Vec<(AccountId, VoteWeight, Vec<AccountId>)>"
                ],
                [
                  "targets",
                  "Vec<AccountId>"
                ]
              ]
            },
            "SolutionSupport": {
              "type": "struct",
              "type_mapping": [
                [
                  "total",
                  "ExtendedBalance"
                ],
                [
                  "voters",
                  "Vec<(AccountId, ExtendedBalance)>"
                ]
              ]
            },
            "SolutionSupports": "Vec<(AccountId, SolutionSupport)>",
            "Supports": "SolutionSupports",
            "SolutionOrSnapshotSize": {
              "type": "struct",
              "type_mapping": [
                [
                  "voters",
                  "Compact<u32>"
                ],
                [
                  "targets",
                  "Compact<u32>"
                ]
              ]
            },
            "SyncState": {
              "type": "struct",
              "type_mapping": [
                [
                  "starting_block",
                  "BlockNumber"
                ],
                [
                  "current_block",
                  "BlockNumber"
                ],
                [
                  "highest_block",
                  "Option<BlockNumber>"
                ]
              ]
            },
            "SystemOrigin": "RawOrigin",
            "TokenError": {
              "type": "enum",
              "value_list": [
                "NoFunds",
                "WouldDie",
                "BelowMinimum",
                "CannotCreate",
                "UnknownAsset",
                "Frozen",
                "Underflow",
                "Overflow"
              ]
            },
            "Moment": "u64",
            "Compact<Moment>": "CompactMoment",
            "AccountData": {
              "type": "struct",
              "type_mapping": [
                [
                  "free",
                  "Balance"
                ],
                [
                  "reserved",
                  "Balance"
                ],
                [
                  "misc_frozen",
                  "Balance"
                ],
                [
                  "fee_frozen",
                  "Balance"
                ]
              ]
            },
            "ActiveEraInfo": {
              "type": "struct",
              "type_mapping": [
                [
                  "index",
                  "EraIndex"
                ],
                [
                  "start",
                  "Option<Moment>"
                ]
              ]
            },
            "BlockNumber": "u32",
            "ValidityVote": {
              "type": "struct",
              "type_mapping": [
                [
                  "account_id",
                  "AccountId"
                ],
                [
                  "validity_attestation",
                  "ValidityAttestation"
                ]
              ]
            },
            "AssignmentId": "AccountId",
            "AssignmentKind": {
              "type": "enum",
              "type_mapping": [
                [
                  "Parachain",
                  "Null"
                ],
                [
                  "Parathread",
                  "(CollatorId, u32)"
                ]
              ]
            },
            "AttestedCandidate": {
              "type": "struct",
              "type_mapping": [
                [
                  "candidate",
                  "AbridgedCandidateReceipt"
                ],
                [
                  "validity_votes",
                  "Vec<ValidityAttestation>"
                ],
                [
                  "validator_indices",
                  "BitVec"
                ]
              ]
            },
            "AuthorityDiscoveryId": "AccountId",
            "AvailabilityBitfield": "BitVec",
            "AvailabilityBitfieldRecord": {
              "type": "struct",
              "type_mapping": [
                [
                  "bitfield",
                  "AvailabilityBitfield"
                ],
                [
                  "submitted_tt",
                  "BlockNumber"
                ]
              ]
            },
            "LockIdentifier": "[u8; 8]",
            "TransactionPriority": "u64",
            "TransactionInfo": {
              "type": "struct",
              "type_mapping": [
                [
                  "chunk_root",
                  "H256"
                ],
                [
                  "content_hash",
                  "H256"
                ],
                [
                  "size",
                  "u32"
                ],
                [
                  "block_chunks",
                  "u32"
                ]
              ]
            },
            "TransactionStorageProof": {
              "type": "struct",
              "type_mapping": [
                [
                  "chunk",
                  "Vec<u8>"
                ],
                [
                  "proof",
                  "Vec<Vec<u8>>"
                ]
              ]
            },
            "BalanceLock": {
              "type": "struct",
              "type_mapping": [
                [
                  "id",
                  "LockIdentifier"
                ],
                [
                  "amount",
                  "Balance"
                ],
                [
                  "reasons",
                  "Reasons"
                ]
              ]
            },
            "MessagingStateSnapshot": {
              "type": "struct",
              "type_mapping": [
                [
                  "relay_dispatch_queue_size",
                  "(u32, u32)"
                ],
                [
                  "egress_channels",
                  "Vec<MessagingStateSnapshotEgressEntry>"
                ]
              ]
            },
            "MessagingStateSnapshotEgressEntry": "(ParaId, AbridgedHrmpChannel)",
            "BTreeMap<ParaId, VecInboundHrmpMessage>": "Vec<(ParaId, VecInboundHrmpMessage)>",
            "VecInboundHrmpMessage": "Vec<InboundHrmpMessage>",
            "FullIdentification": {
              "type": "struct",
              "type_mapping": [
                 ["total", "Compact<Balance>"],
                 ["own", "Compact<Balance>"],
                 ["others", "Vec<IndividualExposure>"]
              ]
            },
            "IdentificationTuple": {
              "type": "struct",
              "type_mapping": [
                 ["validator_id", "ValidatorId"],
                 ["exposure", "FullIdentification"]
              ]
            },
            "SetId": "u64",
            "Reasons": {
              "type": "enum",
              "value_list": [
                "Fee",
                "Misc",
                "All"
              ]
            },
            "ReserveData": {
              "type": "struct",
              "type_mapping": [
                [
                  "id",
                  "ReserveIdentifier"
                ],
                [
                  "amount",
                  "Balance"
                ]
              ]
            },
            "ReserveIdentifier": "[u8; 8]",
            "RoundNumber": "U64",
            "SessionIndex": "u32",
            "AuctionIndex": "u32",
            "AuthIndex": "u32",
            "AuthorityIndex": "u64",
            "Signature": "H512",
            "CollatorSignature": "Signature",
            "AuthorityWeight": "u64",
            "EncodedFinalityProofs": "Bytes",
            "NextAuthority": {
              "type": "struct",
              "type_mapping": [
                 ["authority_id", "AuthorityId"],
                 ["weight", "AuthorityWeight"]
              ]
            },
            "BeefyCommitment": {
              "type": "struct",
              "type_mapping": [
                [
                  "payload",
                  "BeefyPayload"
                ],
                [
                  "block_number",
                  "BlockNumber"
                ],
                [
                  "validator_set_id",
                  "ValidatorSetId"
                ]
              ]
            },
            "BeefyId": "[u8; 33]",
            "BeefySignedCommitment": {
              "type": "struct",
              "type_mapping": [
                [
                  "commitment",
                  "BeefyCommitment"
                ],
                [
                  "signatures",
                  "Vec<Option<Signature>>"
                ]
              ]
            },
            "MmrRootHash": "H256",
            "BeefyPayload": "MmrRootHash",
            "BeefyNextAuthoritySet": {
              "type": "struct",
              "type_mapping": [
                 ["id", "ValidatorSetId"],
                 ["len", "u32"],
                 ["root", "MerkleRoot"]
              ]
            },
            "MerkleRoot": "Hash",
            "AuthorityList": "Vec<NextAuthority>",
            "BalanceUpload": {
              "type": "struct",
              "type_mapping": [
                [
                  "account_id",
                  "AccountId"
                ],
                [
                  "balance",
                  "u64"
                ]
              ]
            },
            "CollatorId": "H256",
            "TrieId": "Bytes",
            "Pays": {
              "type": "enum",
              "value_list": [
                "Yes",
                "No"
              ]
            },
            "DispatchClass": {
              "type": "enum",
              "value_list": [
                "Normal",
                "Operational",
                "Mandatory"
              ]
            },
            "DispatchInfo": {
              "type": "struct",
              "type_mapping": [
                [
                  "weight",
                  "Weight"
                ],
                [
                  "class",
                  "DispatchClass"
                ],
                [
                  "pays_fee",
                  "Pays"
                ]
              ]
            },
            "EgressQueueRoot": {
              "type": "struct",
              "type_mapping": [
                [
                  "paraId",
                  "ParaId"
                ],
                [
                  "hash",
                  "Hash"
                ]
              ]
            },
            "EventIndex": "u32",
            "Extrinsic": "Extrinsic",
            "ExtrinsicPayloadValue": {
              "type": "struct",
              "type_mapping": [
                [
                  "call",
                  "CallBytes"
                ],
                [
                  "era",
                  "Era"
                ],
                [
                  "nonce",
                  "Compact<Index>"
                ],
                [
                  "tip",
                  "Compact<Balance>"
                ],
                [
                  "spec_version",
                  "u32"
                ],
                [
                  "transaction_version",
                  "u32"
                ],
                [
                  "genesis_hash",
                  "Hash"
                ],
                [
                  "block_hash",
                  "Hash"
                ]
              ]
            },
            "Gas": "u64",
            "IdentityFields": {
              "type": "set",
              "value_type": "u64",
              "value_list": {
                "Display": 1,
                "Legal": 2,
                "Web": 4,
                "Riot": 8,
                "Email": 16,
                "PgpFingerprint": 32,
                "Image": 64,
                "Twitter": 128
              }
            },
            "IdentityInfoAdditional": {
              "type": "struct",
              "type_mapping": [
                 ["field", "Data"],
                 ["value", "Data"]
              ]
            },
            "IdentityInfo": {
              "type": "struct",
              "type_mapping": [
                [
                  "additional",
                  "Vec<IdentityInfoAdditional>"
                ],
                [
                  "display",
                  "Data"
                ],
                [
                  "legal",
                  "Data"
                ],
                [
                  "web",
                  "Data"
                ],
                [
                  "riot",
                  "Data"
                ],
                [
                  "email",
                  "Data"
                ],
                [
                  "pgp_fingerprint",
                  "Option<H160>"
                ],
                [
                  "image",
                  "Data"
                ],
                [
                  "twitter",
                  "Data"
                ]
              ]
            },
            "IdentityJudgement": {
              "type": "enum",
              "type_mapping": [
                [
                  "Unknown",
                  "Null"
                ],
                [
                  "FeePaid",
                  "Balance"
                ],
                [
                  "Reasonable",
                  "Null"
                ],
                [
                  "KnownGood",
                  "Null"
                ],
                [
                  "OutOfDate",
                  "Null"
                ],
                [
                  "LowQuality",
                  "Null"
                ],
                [
                  "Erroneous",
                  "Null"
                ]
              ]
            },
            "Judgement": "IdentityJudgement",
            "Judgement<BalanceOf>": "IdentityJudgement",
            "LeasePeriod": "BlockNumber",
            "LeasePeriodOf": "LeasePeriod",
            "(LeasePeriodOf, IncomingParachain<AccountId, Hash>)": {
              "type": "struct",
              "type_mapping": [
                [
                  "lease_period",
                  "LeasePeriodOf"
                ],
                [
                  "incoming_parachain",
                  "IncomingParachain"
                ]
              ]
            },
            "(ParaId, Option<(CollatorId, Retriable)>)": {
              "type": "struct",
              "type_mapping": [
                [
                  "ParaId",
                  "ParaId"
                ],
                [
                  "CollatorId-Retriable",
                  "Option<(CollatorId, Retriable)>"
                ]
              ]
            },
            "MaybeVrf": "Option<VrfData>",
            "MemberCount": "u32",
            "CollectiveOrigin": {
              "type": "enum",
              "type_mapping": [
                [
                  "Members",
                  "(MemberCount, MemberCount)"
                ],
                [
                  "Member",
                  "AccountId"
                ]
              ]
            },
            "MomentOf": "Moment",
            "MoreAttestations": {
              "type": "struct",
              "type_mapping": []
            },
            "Multiplier": "Fixed128",
            "Timepoint": {
              "type": "struct",
              "type_mapping": [
                [
                  "height",
                  "BlockNumber"
                ],
                [
                  "index",
                  "u32"
                ]
              ]
            },
            "Multisig": {
              "type": "struct",
              "type_mapping": [
                [
                  "when",
                  "Timepoint"
                ],
                [
                  "deposit",
                  "Balance"
                ],
                [
                  "depositor",
                  "AccountId"
                ],
                [
                  "approvals",
                  "Vec<AccountId>"
                ]
              ]
            },
            "Offender": "IdentificationTuple",
            "PhantomData": "Null",
            "sp_std::marker::PhantomData<(AccountId, Event)>": "PhantomData",
            "Reporter": "AccountId",
            "OffenceDetails": {
              "type": "struct",
              "type_mapping": [
                [
                  "offender",
                  "Offender"
                ],
                [
                  "reporters",
                  "Vec<Reporter>"
                ]
              ]
            },
            "BountyStatusActive": {
              "type": "struct",
              "type_mapping": [
                [
                  "curator",
                  "AccountId"
                ],
                [
                  "update_due",
                  "BlockNumber"
                ]
              ]
            },
            "BountyStatusCuratorProposed": {
              "type": "struct",
              "type_mapping": [
                [
                  "curator",
                  "AccountId"
                ]
              ]
            },
            "BountyStatusPendingPayout": {
              "type": "struct",
              "type_mapping": [
                [
                  "curator",
                  "AccountId"
                ],
                [
                  "beneficiary",
                  "AccountId"
                ],
                [
                  "unlock_at",
                  "BlockNumber"
                ]
              ]
            },
            "BountyIndex": "u32",
            "BountyStatus": {
              "type": "enum",
              "type_mapping": [
                [
                  "Proposed",
                  "Null"
                ],
                [
                  "Approved",
                  "Null"
                ],
                [
                  "Funded",
                  "Null"
                ],
                [
                  "CuratorProposed",
                  "BountyStatusCuratorProposed"
                ],
                [
                  "Active",
                  "BountyStatusActive"
                ],
                [
                  "PendingPayout",
                  "BountyStatusPendingPayout"
                ]
              ]
            },
            "Bounty": {
              "type": "struct",
              "type_mapping": [
                [
                  "proposer",
                  "AccountId"
                ],
                [
                  "value",
                  "Balance"
                ],
                [
                  "fee",
                  "Balance"
                ],
                [
                  "curator_deposit",
                  "Balance"
                ],
                [
                  "bond",
                  "Balance"
                ],
                [
                  "status",
                  "BountyStatus"
                ]
              ]
            },
            "OpenTipFinder": "(AccountId, Balance)",
            "OpenTipTip": "(AccountId, Balance)",
            "OpenTip": {
              "type": "struct",
              "type_mapping": [
                [
                  "reason",
                  "Hash"
                ],
                [
                  "who",
                  "AccountId"
                ],
                [
                  "finder",
                  "AccountId"
                ],
                [
                  "deposit",
                  "Balance"
                ],
                [
                  "closes",
                  "Option<BlockNumber>"
                ],
                [
                  "tips",
                  "Vec<OpenTipTip>"
                ],
                [
                  "finders_fee",
                  "bool"
                ]
              ]
            },
            "ParachainsInherentData": {
              "type": "struct",
              "type_mapping": [
                [
                  "bitfields",
                  "SignedAvailabilityBitfields"
                ],
                [
                  "backed_candidates",
                  "Vec<BackedCandidate>"
                ],
                [
                  "disputes",
                  "MultiDisputeStatementSet"
                ],
                [
                  "parent_Header",
                  "Header"
                ]
              ]
            },
            "ParaGenesisArgs": {
              "type": "struct",
              "type_mapping": [
                [
                  "genesis_head",
                  "Bytes"
                ],
                [
                  "validation_code",
                  "Bytes"
                ],
                [
                  "parachain",
                  "bool"
                ]
              ]
            },
            "ParaId": "u32",
            "ParaIdOf": "ParaId",
            "ParaScheduling": {
              "type": "enum",
              "value_list": [
                "Always",
                "Dynamic"
              ]
            },
            "ParathreadClaim": "(ParaId, CollatorId)",
            "ParathreadClaimQueue": {
              "type": "struct",
              "type_mapping": [
                [
                  "queue",
                  "Vec<QueuedParathread>"
                ],
                [
                  "next_core_offset",
                  "u32"
                ]
              ]
            },
            "ParathreadEntry": {
              "type": "struct",
              "type_mapping": [
                [
                  "claim",
                  "ParathreadClaim"
                ],
                [
                  "retries",
                  "u32"
                ]
              ]
            },
            "ParaValidatorIndex": "u32",
            "PersistedValidationData": {
              "type": "struct",
              "type_mapping": [
                [
                  "parent_head",
                  "HeadData"
                ],
                [
                  "relay_parent_number",
                  "RelayChainBlockNumber"
                ],
                [
                  "relay_parent_storage_root",
                  "Hash"
                ],
                [
                  "max_pov_size",
                  "u32"
                ]
              ]
            },
            "ParaInfo": {
              "type": "struct",
              "type_mapping": [
                [
                  "manager",
                  "AccountId"
                ],
                [
                  "deposit",
                  "Balance"
                ],
                [
                  "locked",
                  "bool"
                ]
              ]
            },
            "Percent": "u8",
            "SlotNumber": "u64",
            "VrfData": "[u8; 32]",
            "VrfProof": "[u8; 64]",
            "RawAuraPreDigest": {
              "type": "struct",
              "type_mapping": [
                [
                  "slot_number",
                  "u64"
                ]
              ]
            },
            "RawBabePreDigest": {
              "type": "enum",
              "type_mapping": [
                [
                  "Phantom",
                  "Null"
                ],
                [
                  "Primary",
                  "RawBabePreDigestPrimary"
                ],
                [
                  "SecondaryPlain",
                  "RawBabePreDigestSecondaryPlain"
                ],
                [
                  "SecondaryVRF",
                  "RawBabePreDigestSecondaryVRF"
                ]
              ]
            },
            "RawBabePreDigestPrimary": {
              "type": "struct",
              "type_mapping": [
                [
                  "authority_index",
                  "u32"
                ],
                [
                  "slot_number",
                  "SlotNumber"
                ],
                [
                  "vrf_output",
                  "VrfOutput"
                ],
                [
                  "vrf_proof",
                  "VrfProof"
                ]
              ]
            },
            "RawBabePreDigestSecondaryPlain": {
              "type": "struct",
              "type_mapping": [
                [
                  "authority_index",
                  "u32"
                ],
                [
                  "slot_number",
                  "SlotNumber"
                ]
              ]
            },
            "RawBabePreDigestSecondaryVRF": {
              "type": "struct",
              "type_mapping": [
                [
                  "authority_index",
                  "u32"
                ],
                [
                  "slot_number",
                  "SlotNumber"
                ],
                [
                  "vrf_output",
                  "VrfOutput"
                ],
                [
                  "vrf_proof",
                  "VrfProof"
                ]
              ]
            },
            "ReferendumInfo<BlockNumber, Proposal>": {
              "type": "struct",
              "type_mapping": [
                [
                  "end",
                  "BlockNumber"
                ],
                [
                  "proposal",
                  "Proposal"
                ],
                [
                  "threshold",
                  "VoteThreshold"
                ],
                [
                  "delay",
                  "BlockNumber"
                ]
              ]
            },
            "(ReferendumInfo<BlockNumber, Proposal>)": "ReferendumInfo<BlockNumber, Proposal>",
            "ReferendumInfo<BlockNumber, Hash>": {
              "type": "struct",
              "type_mapping": [
                [
                  "end",
                  "BlockNumber"
                ],
                [
                  "proposal_hash",
                  "Hash"
                ],
                [
                  "threshold",
                  "VoteThreshold"
                ],
                [
                  "delay",
                  "BlockNumber"
                ]
              ]
            },
            "(ReferendumInfo<BlockNumber, Hash>)": "ReferendumInfo<BlockNumber, Hash>",
            "RegistrarIndex": "u32",
            "RegistrarInfo": {
              "type": "struct",
              "type_mapping": [
                [
                  "account",
                  "AccountId"
                ],
                [
                  "fee",
                  "Balance"
                ],
                [
                  "fields",
                  "IdentityFields"
                ]
              ]
            },
            "RegistrationJudgement": {
              "type": "struct",
              "type_mapping": [
                 ["registrar_index", "RegistrarIndex"],
                 ["judgement", "Judgement"]
              ]
            },
            "Registration": {
              "type": "struct",
              "type_mapping": [
                [
                  "judgements",
                  "Vec<RegistrationJudgement>"
                ],
                [
                  "deposit",
                  "Balance"
                ],
                [
                  "info",
                  "IdentityInfo"
                ]
              ]
            },
            "ReportIdOf": "Hash",
            "ScheduleTo258": {
              "type": "struct",
              "type_mapping": [
                [
                  "version",
                  "u32"
                ],
                [
                  "put_code_per_byte_cost",
                  "Gas"
                ],
                [
                  "grow_mem_cost",
                  "Gas"
                ],
                [
                  "regular_op_cost",
                  "Gas"
                ],
                [
                  "return_data_per_byte_cost",
                  "Gas"
                ],
                [
                  "event_data_per_byte_cost",
                  "Gas"
                ],
                [
                  "event_per_topic_cost",
                  "Gas"
                ],
                [
                  "event_base_cost",
                  "Gas"
                ],
                [
                  "sandbox_data_read_cost",
                  "Gas"
                ],
                [
                  "sandbox_data_write_cost",
                  "Gas"
                ],
                [
                  "transfer_cost",
                  "Gas"
                ],
                [
                  "max_event_topics",
                  "u32"
                ],
                [
                  "max_stack_height",
                  "u32"
                ],
                [
                  "max_memory_pages",
                  "u32"
                ],
                [
                  "enable_println",
                  "bool"
                ],
                [
                  "max_subject_len",
                  "u32"
                ]
              ]
            },
            "Schedule": {
              "type": "struct",
              "type_mapping": [
                [
                  "version",
                  "u32"
                ],
                [
                  "enable_println",
                  "bool"
                ],
                [
                  "limits",
                  "Limits"
                ],
                [
                  "instruction_weights",
                  "InstructionWeights"
                ],
                [
                  "host_fn_weights",
                  "HostFnWeights"
                ]
              ]
            },
            "SubId": "u32",
            "TransientValidationData": {
              "type": "struct",
              "type_mapping": [
                [
                  "max_code_size",
                  "u32"
                ],
                [
                  "max_head_data_size",
                  "u32"
                ],
                [
                  "balance",
                  "Balance"
                ],
                [
                  "code_upgrade_allowed",
                  "Option<BlockNumber>"
                ],
                [
                  "dmq_length",
                  "u32"
                ]
              ]
            },
            "UncleEntryItem<BlockNumber, Hash, AccountId>": {
              "type": "enum",
              "value_list": [
                "InclusionHeight",
                "Uncle"
              ]
            },
            "VestingSchedule<Balance, BlockNumber>": {
              "type": "struct",
              "type_mapping": [
                [
                  "offset",
                  "Balance"
                ],
                [
                  "per_block",
                  "Balance"
                ],
                [
                  "starting_block",
                  "BlockNumber"
                ]
              ]
            },
            "Weight": "u64",
            "WeightMultiplier": "Fixed64",
            "XcmResponse": {
              "type": "enum",
              "type_mapping": [
                [
                  "Assets",
                  "Vec<MultiAsset>"
                ]
              ]
            },
            "XcmOutcome": {
              "type": "enum",
              "type_mapping": [
                [
                  "Complete",
                  "Weight"
                ],
                [
                  "Incomplete",
                  "(Weight, XcmError)"
                ],
                [
                  "Error",
                  "XcmError"
                ]
              ]
            },
            "XcmResult": {
              "type": "enum",
              "type_mapping": [
                [
                  "Ok",
                  "()"
                ],
                [
                  "Err",
                  "XcmError"
                ]
              ]
            },
            "xcm::v0::Outcome": "XcmOutcome",
            "xcm::latest::Outcome": "XcmOutcome",
            "Outcome": "XcmOutcome",
            "DoubleEncoded": {
              "type": "struct",
              "type_mapping": [
                [
                  "encoded",
                  "Vec<u8>"
                ]
              ]
            },
            "OriginKind": {
              "type": "enum",
              "value_list": [
                "Native",
                "SovereignAccount",
                "Superuser"
              ]
            },
            "NetworkId": {
              "type": "enum",
              "type_mapping": [
                [
                  "Any",
                  "Null"
                ],
                [
                  "Named",
                  "Vec<u8>"
                ],
                [
                  "Polkadot",
                  "Null"
                ],
                [
                  "Kusama",
                  "Null"
                ]
              ]
            },
            "InboundStatus": {
              "type": "enum",
              "value_list": [
                "Ok",
                "Suspended"
              ]
            },
            "OutboundStatus": {
              "type": "enum",
              "value_list": [
                "Ok",
                "Suspended"
              ]
            },
            "MultiLocationV0": {
              "type": "enum",
              "type_mapping": [
                [
                  "Here",
                  "Null"
                ],
                [
                  "X1",
                  "JunctionV0"
                ],
                [
                  "X2",
                  "(JunctionV0, JunctionV0)"
                ],
                [
                  "X3",
                  "(JunctionV0, JunctionV0, JunctionV0)"
                ],
                [
                  "X4",
                  "(JunctionV0, JunctionV0, JunctionV0, JunctionV0)"
                ],
                [
                  "X5",
                  "(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)"
                ],
                [
                  "X6",
                  "(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)"
                ],
                [
                  "X7",
                  "(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)"
                ],
                [
                  "X8",
                  "(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)"
                ]
              ]
            },
            "BodyId": {
              "type": "enum",
              "type_mapping": [
                [
                  "Unit",
                  "Null"
                ],
                [
                  "Named",
                  "Vec<u8>"
                ],
                [
                  "Index",
                  "Compact<u32>"
                ],
                [
                  "Executive",
                  "Null"
                ],
                [
                  "Technical",
                  "Null"
                ],
                [
                  "Legislative",
                  "Null"
                ],
                [
                  "Judicial",
                  "Null"
                ]
              ]
            },
            "BodyPart": {
              "type": "enum",
              "type_mapping": [
                [
                  "Voice",
                  "Null"
                ],
                [
                  "Members",
                  "Compact<u32>"
                ],
                [
                  "Fraction",
                  "BodyPartFraction"
                ],
                [
                  "AtLeastProportion",
                  "BodyPartAtLeastProportion"
                ],
                [
                  "MoreThanProportion",
                  "BodyPartMoreThanProportion"
                ]
              ]
            },
            "BodyPartFraction": {
              "type": "struct",
              "type_mapping": [
                [
                  "nom",
                  "Compact<u32>"
                ],
                [
                  "denom",
                  "Compact<u32>"
                ]
              ]
            },
            "BodyPartAtLeastProportion": {
              "type": "struct",
              "type_mapping": [
                [
                  "nom",
                  "Compact<u32>"
                ],
                [
                  "denom",
                  "Compact<u32>"
                ]
              ]
            },
            "BodyPartMoreThanProportion": {
              "type": "struct",
              "type_mapping": [
                [
                  "nom",
                  "Compact<u32>"
                ],
                [
                  "denom",
                  "Compact<u32>"
                ]
              ]
            },
            "AccountId32Junction": {
              "type": "struct",
              "type_mapping": [
                [
                  "network",
                  "NetworkId"
                ],
                [
                  "id",
                  "AccountId"
                ]
              ]
            },
            "AccountIndex64Junction": {
              "type": "struct",
              "type_mapping": [
                [
                  "network",
                  "NetworkId"
                ],
                [
                  "index",
                  "Compact<u64>"
                ]
              ]
            },
            "AccountKey20Junction": {
              "type": "struct",
              "type_mapping": [
                [
                  "network",
                  "NetworkId"
                ],
                [
                  "key",
                  "[u8; 20]"
                ]
              ]
            },
            "PluralityJunction": {
              "type": "struct",
              "type_mapping": [
                [
                  "id",
                  "BodyId"
                ],
                [
                  "part",
                  "BodyPart"
                ]
              ]
            },
            "XcmOrigin": {
              "type": "enum",
              "type_mapping": [
                [
                  "Xcm",
                  "MultiLocation"
                ]
              ]
            },
            "XcmpMessageFormat": {
              "type": "enum",
              "value_list": [
                "ConcatenatedVersionedXcm",
                "ConcatenatedEncodedBlob",
                "Signals"
              ]
            },
            "XcmAssetId": {
              "type": "enum",
              "type_mapping": [
                [
                  "Concrete",
                  "MultiLocation"
                ],
                [
                  "Abstract",
                  "Bytes"
                ]
              ]
            },
            "Fungibility": {
              "type": "enum",
              "type_mapping": [
                [
                  "Fungible",
                  "u128"
                ],
                [
                  "NonFungible",
                  "AssetInstance"
                ]
              ]
            },
            "QueueConfigData": {
              "type": "struct",
              "type_mapping": [
                [
                  "suspend_threshold",
                  "u32"
                ],
                [
                  "drop_threshold",
                  "u32"
                ],
                [
                  "resume_threshold",
                  "u32"
                ],
                [
                  "threshold_weight",
                  "Weight"
                ],
                [
                  "weight_restrict_decay",
                  "Weight"
                ]
              ]
            },
            "VersionMigrationStage": {
              "type": "enum",
              "type_mapping": [
                [
                  "MigrateSupportedVersion",
                  "Null"
                ],
                [
                  "MigrateVersionNotifiers",
                  "Null"
                ],
                [
                  "NotifyCurrentTargets",
                  "Option<Bytes>"
                ],
                [
                  "MigrateAndNotifyOldTargets",
                  "Null"
                ]
              ]
            },
            "VersionedMultiAsset": {
              "type": "enum",
              "type_mapping": [
                [
                  "V0",
                  "MultiAssetV0"
                ],
                [
                  "V1",
                  "MultiAssetV1"
                ],
                [
                  "V2",
                  "MultiAssetV2"
                ]
              ]
            },
            "VersionedMultiAssets": {
              "type": "enum",
              "type_mapping": [
                [
                  "V0",
                  "Vec<MultiAssetV0>"
                ],
                [
                  "V1",
                  "MultiAssetsV1"
                ],
                [
                  "V2",
                  "MultiAssetsV2"
                ]
              ]
            },
            "VersionedMultiLocation": {
              "type": "enum",
              "type_mapping": [
                [
                  "V0",
                  "MultiLocationV0"
                ],
                [
                  "V1",
                  "MultiLocationV1"
                ],
                [
                  "V2",
                  "MultiLocationV2"
                ]
              ]
            },
            "VersionedResponse": {
              "type": "struct",
              "type_mapping": [
                [
                  "V0",
                  "ResponseV0"
                ],
                [
                  "V1",
                  "ResponseV1"
                ],
                [
                  "V2",
                  "ResponseV2"
                ]
              ]
            },
            "VersionedXcm": {
              "type": "enum",
              "type_mapping": [
                [
                  "V0",
                  "XcmV0"
                ],
                [
                  "V1",
                  "XcmV1"
                ],
                [
                  "V2",
                  "XcmV2"
                ]
              ]
            },
            "XcmVersion": "u32",
            "DepositAsset": {
              "type": "struct",
              "type_mapping": [
                [
                  "assets",
                  "Vec<MultiAsset>"
                ],
                [
                  "dest",
                  "MultiLocation"
                ]
              ]
            },
            "DepositReserveAsset": {
              "type": "struct",
              "type_mapping": [
                [
                  "assets",
                  "Vec<MultiAsset>"
                ],
                [
                  "dest",
                  "MultiLocation"
                ],
                [
                  "effects",
                  "Vec<Order>"
                ]
              ]
            },
            "ExchangeAsset": {
              "type": "struct",
              "type_mapping": [
                [
                  "give",
                  "Vec<MultiAsset>"
                ],
                [
                  "receive",
                  "Vec<MultiAsset>"
                ]
              ]
            },
            "InitiateReserveWithdraw": {
              "type": "struct",
              "type_mapping": [
                [
                  "assets",
                  "Vec<MultiAsset>"
                ],
                [
                  "reserve",
                  "MultiLocation"
                ],
                [
                  "effects",
                  "Vec<Order>"
                ]
              ]
            },
            "InitiateTeleport": {
              "type": "struct",
              "type_mapping": [
                [
                  "assets",
                  "Vec<MultiAsset>"
                ],
                [
                  "dest",
                  "MultiLocation"
                ],
                [
                  "effects",
                  "Vec<Order>"
                ]
              ]
            },
            "QueryHolding": {
              "type": "struct",
              "type_mapping": [
                [
                  "query_id",
                  "Compact<u64>"
                ],
                [
                  "dest",
                  "MultiLocation"
                ],
                [
                  "assets",
                  "Vec<MultiAsset>"
                ]
              ]
            },
            "Order": {
              "type": "enum",
              "type_mapping": [
                [
                  "Null",
                  "Null"
                ],
                [
                  "DepositAsset",
                  "DepositAsset"
                ],
                [
                  "DepositReserveAsset",
                  "DepositReserveAsset"
                ],
                [
                  "ExchangeAsset",
                  "ExchangeAsset"
                ],
                [
                  "InitiateReserveWithdraw",
                  "InitiateReserveWithdraw"
                ],
                [
                  "InitiateTeleport",
                  "InitiateTeleport"
                ],
                [
                  "QueryHolding",
                  "QueryHolding"
                ]
              ]
            },
            "SlotRange": {
              "type": "enum",
              "value_list": [
                "ZeroZero", "ZeroOne", "ZeroTwo", "ZeroThree", "OneOne", "OneTwo", "OneThree", "TwoTwo", "TwoThree", "ThreeThree"
              ]
            },
            "WinningDataEntry": "Option<(AccountId, ParaId, BalanceOf)>",
            "WinningData": "[WinningDataEntry; 10]",
            "WinnersData": "Vec<WinnersDataTuple>",
            "WinnersDataTuple": "(AccountId, ParaId, BalanceOf, SlotRange)",
            "WithdrawReasons": {
              "type": "set",
              "value_type": "u64",
              "value_list": {
                "TransactionPayment": 1,
                "Transfer": 2,
                "Reserve": 4,
                "Fee": 8,
                "Tip": 16
              }
            },
            "Index": "u32",
            "Kind": "[u8; 16]",
            "Nominations": {
              "type": "struct",
              "type_mapping": [
                [
                  "targets",
                  "Vec<AccountId>"
                ],
                [
                  "submitted_in",
                  "EraIndex"
                ],
                [
                  "suppressed",
                  "bool"
                ]
              ]
            },
            "OpaqueTimeSlot": "Bytes",
            "<T as Trait<I>>::Proposal": "Proposal",
            "AuthoritySignature": "Signature",
            "<AuthorityId as RuntimeAppPublic>::Signature": "AuthoritySignature",
            "&[u8]": "Bytes",
            "Text": "Bytes",
            "Str": "Bytes",
            "Forcing": {
              "type": "enum",
              "value_list": [
                "NotForcing",
                "ForceNew",
                "ForceNone",
                "ForceAlways"
              ]
            },
            "Heartbeat": {
              "type": "struct",
              "type_mapping": [
                [
                  "block_number",
                  "BlockNumber"
                ],
                [
                  "network_state",
                  "OpaqueNetworkState"
                ],
                [
                  "session_index",
                  "SessionIndex"
                ],
                [
                  "authority_index",
                  "AuthIndex"
                ],
                [
                  "validators_len",
                  "u32"
                ]
              ]
            },
            "RewardDestination": {
              "type": "enum",
              "type_mapping": [
                [
                  "Staked",
                  "Null"
                ],
                [
                  "Stash",
                  "Null"
                ],
                [
                  "Controller",
                  "Null"
                ],
                [
                  "Account",
                  "AccountId"
                ],
                [
                  "None",
                  "Null"
                ]
              ]
            },
            "RewardDestinationTo257": {
              "type": "enum",
              "value_list": [
                "Staked",
                "Stash",
                "Controller"
              ]
            },
            "ChangesTrieConfiguration": {
              "type": "struct",
              "type_mapping": [
                [
                  "digest_interval",
                  "u32"
                ],
                [
                  "digest_levels",
                  "u32"
                ]
              ]
            },
            "ChangesTrieSignal": {
              "type": "enum",
              "type_mapping": [
                [
                  "NewConfiguration",
                  "Option<ChangesTrieConfiguration>"
                ]
              ]
            },
            "ConsensusEngineId": "GenericConsensusEngineId",
            "DigestItem": {
              "type": "enum",
              "type_mapping": [
                [
                  "Other",
                  "Bytes"
                ],
                [
                  "AuthoritiesChange",
                  "Vec<AuthorityId>"
                ],
                [
                  "ChangesTrieRoot",
                  "Hash"
                ],
                [
                  "SealV0",
                  "SealV0"
                ],
                [
                  "Consensus",
                  "Consensus"
                ],
                [
                  "Seal",
                  "Seal"
                ],
                [
                  "PreRuntime",
                  "PreRuntime"
                ],
                [
                  "ChangesTrieSignal",
                  "ChangesTrieSignal"
                ],
                [
                  "RuntimeEnvironmentUpdated",
                  "Null"
                ]
              ]
            },
            "sp_runtime::generic::digest::DigestItem": "DigestItem",
            "Digest": {
              "type": "struct",
              "type_mapping": [
                [
                  "logs",
                  "Vec<DigestItem>"
                ]
              ]
            },
            "DigestOf": "Digest",
            "SpanIndex": "u32",
            "slashing::SpanIndex": "SpanIndex",
            "SlashingSpans": {
              "type": "struct",
              "type_mapping": [
                [
                  "span_index",
                  "SpanIndex"
                ],
                [
                  "last_start",
                  "EraIndex"
                ],
                [
                  "last_nonzero_slash",
                  "EraIndex"
                ],
                [
                  "prior",
                  "Vec<EraIndex>"
                ]
              ]
            },
            "slashing::SlashingSpans": "SlashingSpans",
            "SpanRecord": {
              "type": "struct",
              "type_mapping": [
                [
                  "slashed",
                  "Balance"
                ],
                [
                  "paid_out",
                  "Balance"
                ]
              ]
            },
            "slashing::SpanRecord<BalanceOf>": "SpanRecord",
            "UnappliedSlashOther": {
              "type": "struct",
              "type_mapping": [
                 ["account", "AccountId"],
                 ["amount", "Balance"]
              ]
            },
            "UnappliedSlash<AccountId, BalanceOf>": {
              "type": "struct",
              "type_mapping": [
                [
                  "validator",
                  "AccountId"
                ],
                [
                  "own",
                  "Balance"
                ],
                [
                  "others",
                  "Vec<UnappliedSlashOther>"
                ],
                [
                  "reporters",
                  "Vec<AccountId>"
                ],
                [
                  "payout",
                  "Balance"
                ]
              ]
            },
            "Beefy": "[u8; 33]",
            "SessionKeys1": "(AccountId)",
            "SessionKeys2": "(AccountId, AccountId)",
            "SessionKeys3": {
              "type": "struct",
              "type_mapping": [
                 ["grandpa", "AccountId"],
                 ["babe", "AccountId"],
                 ["im_online", "AccountId"]
              ]
            },
            "SessionKeys4": {
              "type": "struct",
              "type_mapping": [
                 ["grandpa", "AccountId"],
                 ["babe", "AccountId"],
                 ["im_online", "AccountId"],
                 ["authority_discovery", "AccountId"]
              ]
            },
            "SessionKeys5": {
              "type": "struct",
              "type_mapping": [
                 ["grandpa", "AccountId"],
                 ["babe", "AccountId"],
                 ["im_online", "AccountId"],
                 ["authority_discovery", "AccountId"],
                 ["parachains", "AccountId"]
              ]
            },
            "SessionKeys6B": {
              "type": "struct",
              "type_mapping": [
                 ["grandpa", "AccountId"],
                 ["babe", "AccountId"],
                 ["im_online", "AccountId"],
                 ["authority_discovery", "AccountId"],
                 ["parachains", "AccountId"],
                 ["beefy", "Beefy"]
              ]
            },
            "SessionKeys6": {
              "type": "struct",
              "type_mapping": [
                 ["grandpa", "AccountId"],
                 ["babe", "AccountId"],
                 ["im_online", "AccountId"],
                 ["para_validator", "AccountId"],
                 ["para_assignment", "AccountId"],
                 ["authority_discovery", "AccountId"]
              ]
            },
            "SessionKeys7B": {
              "type": "struct",
              "type_mapping": [
                 ["grandpa", "AccountId"],
                 ["babe", "AccountId"],
                 ["im_online", "AccountId"],
                 ["para_validator", "AccountId"],
                 ["para_assignment", "AccountId"],
                 ["authority_discovery", "AccountId"],
                 ["beefy", "Beefy"]
              ]
            },
            "Keys": {
              "type": "struct",
              "type_mapping": [
                 ["grandpa", "AccountId"],
                 ["babe", "AccountId"],
                 ["im_online", "AccountId"]
              ]
            },
            "Header": {
              "type": "struct",
              "type_mapping": [
                [
                  "parent_hash",
                  "Hash"
                ],
                [
                  "number",
                  "Compact<BlockNumber>"
                ],
                [
                  "state_root",
                  "Hash"
                ],
                [
                  "extrinsics_root",
                  "Hash"
                ],
                [
                  "digest",
                  "Digest"
                ]
              ]
            },
            "BridgedBlockHash": "H256",
            "BridgedBlockNumber": "BlockNumber",
            "BridgedHeader": "Header",
            "CallOrigin": {
              "type": "enum",
              "type_mapping": [
                [
                  "SourceRoot",
                  "Null"
                ],
                [
                  "TargetAccount",
                  "(AccountId, MultiSigner, MultiSignature)"
                ],
                [
                  "SourceAccount",
                  "AccountId"
                ]
              ]
            },
            "ChainId": "[u8; 4]",
            "DeliveredMessages": {
              "type": "struct",
              "type_mapping": [
                [
                  "begin",
                  "MessageNonce"
                ],
                [
                  "end",
                  "MessageNonce"
                ],
                [
                  "dispatch_results",
                  "BitVec"
                ]
              ]
            },
            "DispatchFeePayment": {
              "type": "enum",
              "value_list": [
                "AtSourceChain",
                "AtTargetChain"
              ]
            },
            "InboundLaneData": {
              "type": "struct",
              "type_mapping": [
                [
                  "relayers",
                  "Vec<UnrewardedRelayer>"
                ],
                [
                  "last_confirmed_nonce",
                  "MessageNonce"
                ]
              ]
            },
            "InboundRelayer": "AccountId",
            "Precommit": {
              "type": "struct",
              "type_mapping": [
                [
                  "target_hash",
                  "BridgedBlockHash"
                ],
                [
                  "target_number",
                  "BridgedBlockNumber"
                ]
              ]
            },
            "SignedPrecommit": {
              "type": "struct",
              "type_mapping": [
                [
                  "precommit",
                  "Precommit"
                ],
                [
                  "signature",
                  "AuthoritySignature"
                ],
                [
                  "id",
                  "AuthorityId"
                ]
              ]
            },
            "Commit": {
              "type": "struct",
              "type_mapping": [
                [
                  "target_hash",
                  "BridgedBlockHash"
                ],
                [
                  "target_number",
                  "BridgedBlockNumber"
                ],
                [
                  "precommits",
                  "Vec<SignedPrecommit>"
                ]
              ]
            },
            "InitializationData": {
              "type": "struct",
              "type_mapping": [
                [
                  "header",
                  "Header"
                ],
                [
                  "authority_list",
                  "AuthorityList"
                ],
                [
                  "set_id",
                  "SetId"
                ],
                [
                  "is_halted",
                  "bool"
                ]
              ]
            },
            "super::initializationdata<bridgedheader<t, i>>": "InitializationData",
            "AuthoritySet": {
              "type": "struct",
              "type_mapping": [
                [
                  "current_authorities",
                  "AuthorityList"
                ],
                [
                  "set_id",
                  "u64"
                ],
                [
                  "pending_standard_changes",
                  "ForkTreePendingChange"
                ],
                [
                  "pending_forced_changes",
                  "Vec<PendingChange>"
                ],
                [
                  "authority_set_changes",
                  "AuthoritySetChanges"
                ]
              ]
            },
            "ForkTreePendingChange": {
              "type": "struct",
              "type_mapping": [
                [
                  "roots",
                  "Vec<ForkTreePendingChangeNode>"
                ],
                [
                  "best_finalized_number",
                  "Option<BlockNumber>"
                ]
              ]
            },
            "ForkTreePendingChangeNode": {
              "type": "struct",
              "type_mapping": [
                [
                  "hash",
                  "BlockHash"
                ],
                [
                  "number",
                  "BlockNumber"
                ],
                [
                  "data",
                  "PendingChange"
                ],
                [
                  "children",
                  "Vec<ForkTreePendingChangeNode>"
                ]
              ]
            },
            "AuthoritySetChange": "(U64, BlockNumber)",
            "AuthoritySetChanges": "Vec<AuthoritySetChange>",
            "DelayKind": {
              "type": "enum",
              "type_mapping": [
                [
                  "Finalized",
                  "Null"
                ],
                [
                  "Best",
                  "DelayKindBest"
                ]
              ]
            },
            "DelayKindBest": {
              "type": "struct",
              "type_mapping": [
                [
                  "median_last_finalized",
                  "BlockNumber"
                ]
              ]
            },
            "bp_header_chain::authorityset": "AuthoritySet",
            "HeaderPartial": {
              "type": "struct",
              "type_mapping": [
                [
                  "parent_hash",
                  "Hash"
                ],
                [
                  "number",
                  "BlockNumber"
                ]
              ]
            },
            "DispatchErrorModule": {
              "type": "struct",
              "type_mapping": [
                [
                  "index",
                  "u8"
                ],
                [
                  "error",
                  "u8"
                ]
              ]
            },
            "DispatchError": {
              "type": "enum",
              "type_mapping": [
                [
                  "Other",
                  "Null"
                ],
                [
                  "CannotLookup",
                  "Null"
                ],
                [
                  "BadOrigin",
                  "Null"
                ],
                [
                  "Module",
                  "DispatchErrorModule"
                ],
                [
                  "ConsumerRemaining",
                  "Null"
                ],
                [
                  "NoProviders",
                  "Null"
                ],
                [
                  "Token",
                  "TokenError"
                ],
                [
                  "Arithmetic",
                  "ArithmeticError"
                ]
              ]
            },
            "DispatchResult": {
              "type": "enum",
              "type_mapping": [
                [
                  "Ok",
                  "Null"
                ],
                [
                  "Error",
                  "DispatchError"
                ]
              ]
            },
            "ActiveRecovery": {
              "type": "struct",
              "type_mapping": [
                [
                  "created",
                  "BlockNumber"
                ],
                [
                  "deposit",
                  "Balance"
                ],
                [
                  "friends",
                  "Vec<AccountId>"
                ]
              ]
            },
            "RecoveryConfig": {
              "type": "struct",
              "type_mapping": [
                [
                  "delay_period",
                  "BlockNumber"
                ],
                [
                  "deposit",
                  "Balance"
                ],
                [
                  "friends",
                  "Vec<AccountId>"
                ],
                [
                  "threshold",
                  "u16"
                ]
              ]
            },
            "BidKindVouch": {
              "type": "struct",
              "type_mapping": [
                [
                  "account",
                  "AccountId"
                ],
                [
                  "amount",
                  "Balance"
                ]
              ]
            },
            "BidKind": {
              "type": "enum",
              "type_mapping": [
                [
                  "Deposit",
                  "Balance"
                ],
                [
                  "Vouch",
                  "(AccountId, Balance)"
                ]
              ]
            },
            "BidKind<AccountId,Balance>": "Bidkind",
            "BidKind<AccountId, BalanceOf<T, I>>": "Bidkind",
            "Bid": {
              "type": "struct",
              "type_mapping": [
                [
                  "who",
                  "AccountId"
                ],
                [
                  "kind",
                  "BidKind"
                ],
                [
                  "value",
                  "Balance"
                ]
              ]
            },
            "StrikeCount": "u32",
            "VouchingStatus": {
              "type": "enum",
              "value_list": [
                "Vouching",
                "Banned"
              ]
            },
            "ExtrinsicMetadata": {
              "type": "struct",
              "type_mapping": [
                [
                  "version",
                  "u8"
                ],
                [
                  "signed_extensions",
                  "Vec<Bytes>"
                ]
              ]
            },
            "RewardPoint": "u32",
            "BTreeMap<AccountId, RewardPoint>": "Vec<(AccountId, RewardPoint)>",
            "EraRewardPoints": {
              "type": "struct",
              "type_mapping": [
                [
                  "total",
                  "RewardPoint"
                ],
                [
                  "individual",
                  "BTreeMap<AccountId, RewardPoint>"
                ]
              ]
            },
            "ServiceQuality": {
              "type": "enum",
              "value_list": [
                "Ordered",
                "Fast"
              ]
            },
            "DisputeLocation": {
              "type": "enum",
              "value_list": [
                "Local",
                "Remote"
              ]
            },
            "DisputeResult": {
              "type": "enum",
              "value_list": [
                "Valid",
                "Invalid"
              ]
            },
            "DisputeState": {
              "type": "struct",
              "type_mapping": [
                [
                  "validators_for",
                  "BitVec"
                ],
                [
                  "validators_against",
                  "BitVec"
                ],
                [
                  "start",
                  "BlockNumber"
                ],
                [
                  "concluded_at",
                  "Option<BlockNumber>"
                ]
              ]
            },
            "IncomingParachainDeploy": {
              "type": "struct",
              "type_mapping": [
                [
                  "code",
                  "ValidationCode"
                ],
                [
                  "initial_head_data",
                  "HeadData"
                ]
              ]
            },
            "NewBidder": {
              "type": "struct",
              "type_mapping": [
                [
                  "who",
                  "AccountId"
                ],
                [
                  "sub",
                  "SubId"
                ]
              ]
            },
            "OutboundHrmpMessage": {
              "type": "struct",
              "type_mapping": [
                [
                  "recipient",
                  "u32"
                ],
                [
                  "data",
                  "Bytes"
                ]
              ]
            },
            "IncomingParachainFixed": {
              "type": "struct",
              "type_mapping": [
                [
                  "code_hash",
                  "Hash"
                ],
                [
                  "code_size",
                  "u32"
                ],
                [
                  "initial_head_data",
                  "HeadData"
                ]
              ]
            },
            "IncomingParachain": {
              "type": "enum",
              "type_mapping": [
                [
                  "Unset",
                  "NewBidder"
                ],
                [
                  "Fixed",
                  "IncomingParachainFixed"
                ],
                [
                  "Deploy",
                  "IncomingParachainDeploy"
                ]
              ]
            },
            "LastRuntimeUpgradeInfo": {
              "type": "struct",
              "type_mapping": [
                [
                  "spec_version",
                  "Compact<u32>"
                ],
                [
                  "spec_name",
                  "Text"
                ]
              ]
            },
            "ProxyState": {
              "type": "enum",
              "type_mapping": [
                [
                  "Open",
                  "AccountId"
                ],
                [
                  "Active",
                  "AccountId"
                ]
              ]
            },
            "ReleasesBalances": {
              "type": "enum",
              "value_list": [
                "V1_0_0",
                "V2_0_0"
              ]
            },
            "Releases": {
              "type": "enum",
              "value_list": [
                "V1",
                "V2",
                "V3",
                "V4",
                "V5",
                "V6",
                "V7",
                "V8",
                "V9",
                "V10"
              ]
            },
            "ValidityAttestation": {
              "type": "enum",
              "type_mapping": [
                [
                  "Never",
                  "Null"
                ],
                [
                  "Implicit",
                  "ValidatorSignature"
                ],
                [
                  "Explicit",
                  "ValidatorSignature"
                ]
              ]
            },
            "WeightPerClass": {
              "type": "struct",
              "type_mapping": [
                [
                  "base_extrinsic",
                  "Weight"
                ],
                [
                  "max_extrinsic",
                  "Weight"
                ],
                [
                  "max_total",
                  "Option<Weight>"
                ],
                [
                  "reserved",
                  "Option<Weight>"
                ]
              ]
            },
            "ActiveGilt": {
              "type": "struct",
              "type_mapping": [
                [
                  "proportion",
                  "Perquintill"
                ],
                [
                  "amount",
                  "Balance"
                ],
                [
                  "who",
                  "AccountId"
                ],
                [
                  "expiry",
                  "BlockNumber"
                ]
              ]
            },
            "ActiveGiltsTotal": {
              "type": "struct",
              "type_mapping": [
                [
                  "frozen",
                  "Balance"
                ],
                [
                  "proportion",
                  "Perquintill"
                ],
                [
                  "index",
                  "ActiveIndex"
                ],
                [
                  "target",
                  "Perquintill"
                ]
              ]
            },
            "ActiveIndex": "u32",
            "GiltBid": {
              "type": "struct",
              "type_mapping": [
                [
                  "amount",
                  "Balance"
                ],
                [
                  "who",
                  "AccountId"
                ]
              ]
            },
            "MmrLeafProof": {
              "type": "struct",
              "type_mapping": [
                [
                  "block_hash",
                  "BlockHash"
                ],
                [
                  "leaf",
                  "Bytes"
                ],
                [
                  "proof",
                  "Bytes"
                ]
              ]
            },
            "VestingInfo": {
              "type": "struct",
              "type_mapping": [
                [
                  "locked",
                  "Balance"
                ],
                [
                  "per_block",
                  "Balance"
                ],
                [
                  "starting_block",
                  "BlockNumber"
                ]
              ]
            },
            "NominatorIndex": "u32",
            "ValidatorIndex": "u16",
            "PerU16": "u16",
            "ValidatorIndexCompact": "Compact<ValidatorIndex>",
            "NominatorIndexCompact": "Compact<NominatorIndex>",
            "OffchainAccuracy": "PerU16",
            "OffchainAccuracyCompact": "Compact<OffchainAccuracy>",
            "CompactScoreCompact": {
              "type": "struct",
                "type_mapping": [
                  ["validator_index", "ValidatorIndexCompact"],
                  ["offchain_accuracy", "OffchainAccuracyCompact"]
                ]
            },
            "CompactScore": {
              "type": "struct",
                "type_mapping": [
                  ["validator_index", "ValidatorIndex"],
                  ["offchain_accuracy", "OffchainAccuracy"]
                ]
            },
            "CompactAssignmentsFrom258": {
              "type": "struct",
              "type_mapping": [
                [
                  "votes1",
                  "Vec<(NominatorIndexCompact, ValidatorIndexCompact)>"
                ],
                [
                  "votes2",
                  "Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>"
                ],
                [
                  "votes3",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>"
                ],
                [
                  "votes4",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>"
                ],
                [
                  "votes5",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>"
                ],
                [
                  "votes6",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>"
                ],
                [
                  "votes7",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>"
                ],
                [
                  "votes8",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>"
                ],
                [
                  "votes9",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>"
                ],
                [
                  "votes10",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>"
                ],
                [
                  "votes11",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>"
                ],
                [
                  "votes12",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>"
                ],
                [
                  "votes13",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>"
                ],
                [
                  "votes14",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>"
                ],
                [
                  "votes15",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>"
                ],
                [
                  "votes16",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>"
                ]
              ]
            },
            "CompactAssignmentsFrom265": {
              "type": "struct",
              "type_mapping": [
                [
                  "votes1",
                  "Vec<(NominatorIndexCompact, ValidatorIndexCompact)>"
                ],
                [
                  "votes2",
                  "Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>"
                ],
                [
                  "votes3",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>"
                ],
                [
                  "votes4",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>"
                ],
                [
                  "votes5",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>"
                ],
                [
                  "votes6",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>"
                ],
                [
                  "votes7",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>"
                ],
                [
                  "votes8",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>"
                ],
                [
                  "votes9",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>"
                ],
                [
                  "votes10",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>"
                ],
                [
                  "votes11",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>"
                ],
                [
                  "votes12",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>"
                ],
                [
                  "votes13",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>"
                ],
                [
                  "votes14",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>"
                ],
                [
                  "votes15",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>"
                ],
                [
                  "votes16",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>"
                ],
                [
                  "votes17",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 16], ValidatorIndexCompact)>"
                ],
                [
                  "votes18",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 17], ValidatorIndexCompact)>"
                ],
                [
                  "votes19",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 18], ValidatorIndexCompact)>"
                ],
                [
                  "votes20",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 19], ValidatorIndexCompact)>"
                ],
                [
                  "votes21",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 20], ValidatorIndexCompact)>"
                ],
                [
                  "votes22",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 21], ValidatorIndexCompact)>"
                ],
                [
                  "votes23",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 22], ValidatorIndexCompact)>"
                ],
                [
                  "votes24",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 23], ValidatorIndexCompact)>"
                ]
              ]
            },
            "CompactAssignmentsTo257": {
              "type": "struct",
              "type_mapping": [
                [
                  "votes1",
                  "Vec<(NominatorIndex, [CompactScore; 0], ValidatorIndex)>"
                ],
                [
                  "votes2",
                  "Vec<(NominatorIndex, [CompactScore; 1], ValidatorIndex)>"
                ],
                [
                  "votes3",
                  "Vec<(NominatorIndex, [CompactScore; 2], ValidatorIndex)>"
                ],
                [
                  "votes4",
                  "Vec<(NominatorIndex, [CompactScore; 3], ValidatorIndex)>"
                ],
                [
                  "votes5",
                  "Vec<(NominatorIndex, [CompactScore; 4], ValidatorIndex)>"
                ],
                [
                  "votes6",
                  "Vec<(NominatorIndex, [CompactScore; 5], ValidatorIndex)>"
                ],
                [
                  "votes7",
                  "Vec<(NominatorIndex, [CompactScore; 6], ValidatorIndex)>"
                ],
                [
                  "votes8",
                  "Vec<(NominatorIndex, [CompactScore; 7], ValidatorIndex)>"
                ],
                [
                  "votes9",
                  "Vec<(NominatorIndex, [CompactScore; 8], ValidatorIndex)>"
                ],
                [
                  "votes10",
                  "Vec<(NominatorIndex, [CompactScore; 9], ValidatorIndex)>"
                ],
                [
                  "votes11",
                  "Vec<(NominatorIndex, [CompactScore; 10], ValidatorIndex)>"
                ],
                [
                  "votes12",
                  "Vec<(NominatorIndex, [CompactScore; 11], ValidatorIndex)>"
                ],
                [
                  "votes13",
                  "Vec<(NominatorIndex, [CompactScore; 12], ValidatorIndex)>"
                ],
                [
                  "votes14",
                  "Vec<(NominatorIndex, [CompactScore; 13], ValidatorIndex)>"
                ],
                [
                  "votes15",
                  "Vec<(NominatorIndex, [CompactScore; 14], ValidatorIndex)>"
                ],
                [
                  "votes16",
                  "Vec<(NominatorIndex, [CompactScore; 15], ValidatorIndex)>"
                ]
              ]
            },
            "DeferredOffenceOf": {
              "type": "struct",
                "type_mapping": [
                  ["offences", "Vec<OffenceDetails>"],
                  ["perc", "Vec<Perbill>"],
                  ["session", "SessionIndex"]
                ]
            },
            "Statement": {
              "type": "enum",
              "type_mapping": [
                [
                  "Never",
                  "Null"
                ],
                [
                  "Candidate",
                  "Hash"
                ],
                [
                  "Valid",
                  "Hash"
                ],
                [
                  "Invalid",
                  "Hash"
                ]
              ]
            },
            "ValidatorSignature": "Signature",
            "DoubleVoteReportStatement": {
              "type": "struct",
              "type_mapping": [
                [
                  "statement",
                  "Statement"
                ],
                [
                  "signature",
                  "ValidatorSignature"
                ]
              ]
            },
            "DoubleVoteReportProof": {
              "type": "struct",
              "type_mapping": [
                [
                  "session",
                  "SessionIndex"
                ],
                [
                  "trie_nodes",
                  "Vec<Bytes>"
                ]
              ]
            },
            "SigningContext": {
              "type": "struct",
              "type_mapping": [
                [
                  "session_index",
                  "SessionIndex"
                ],
                [
                  "parent_hash",
                  "Hash"
                ]
              ]
            },
            "DisputeStatementSet": {
              "type": "struct",
              "type_mapping": [
                [
                  "candidate_hash",
                  "CandidateHash"
                ],
                [
                  "session",
                  "SessionIndex"
                ],
                [
                  "statements",
                  "Vec<(DisputeStatement, ParaValidatorIndex, ValidatorSignature)>"
                ]
              ]
            },
            "MultiDisputeStatementSet": "Vec<DisputeStatementSet>",
            "DisputeStatement": {
              "type": "enum",
              "type_mapping": [
                [
                  "Valid",
                  "ValidDisputeStatementKind"
                ],
                [
                  "Invalid",
                  "InvalidDisputeStatementKind"
                ]
              ]
            },
            "ValidDisputeStatementKind": {
              "type": "enum",
              "type_mapping": [
                [
                  "Explicit",
                  "Null"
                ],
                [
                  "BackingSeconded",
                  "Hash"
                ],
                [
                  "BackingValid",
                  "Hash"
                ],
                [
                  "ApprovalChecking",
                  "Null"
                ]
              ]
            },
            "InvalidDisputeStatementKind": {
              "type": "enum",
              "value_list": [
                "Explicit"
              ]
            },
            "ExplicitDisputeStatement": {
              "type": "struct",
              "type_mapping": [
                [
                  "valid",
                  "bool"
                ],
                [
                  "candidate_hash",
                  "CandidateHash"
                ],
                [
                  "session",
                  "SessionIndex"
                ]
              ]
            },
            "DoubleVoteReport": {
              "type": "struct",
              "type_mapping": [
                [
                  "identity",
                  "ValidatorId"
                ],
                [
                  "first",
                  "(Statement, ValidatorSignature)"
                ],
                [
                  "second",
                  "(Statement, ValidatorSignature)"
                ],
                [
                  "proof",
                  "MembershipProof"
                ],
                [
                  "signing_context",
                  "SigningContext"
                ]
              ]
            },
            "ElectionCompute": {
              "type": "enum",
              "value_list": [
                "OnChain",
                "Signed",
                "Authority"
              ]
            },
            "ElectionResult": {
              "type": "struct",
              "type_mapping": [
                [
                  "compute",
                  "ElectionCompute"
                ],
                [
                  "slot_stake",
                  "Balance"
                ],
                [
                  "elected_stashes",
                  "Vec<AccountId>"
                ],
                [
                  "exposures",
                  "Vec<(AccountId, Exposure)>"
                ]
              ]
            },
            "ElectionStatus": {
              "type": "enum",
              "type_mapping": [
                [
                  "Close",
                  "Null"
                ],
                [
                  "Open",
                  "BlockNumber"
                ]
              ]
            },
            "PerDispatchClass": {
              "type": "struct",
              "type_mapping": [
                [
                  "normal",
                  "WeightPerClass"
                ],
                [
                  "operational",
                  "WeightPerClass"
                ],
                [
                  "mandatory",
                  "WeightPerClass"
                ]
              ]
            },
            "ConsumedWeight": "PerDispatchClass",
            "Phase": {
              "type": "enum",
              "type_mapping": [
                [
                  "ApplyExtrinsic",
                  "u32"
                ],
                [
                  "Finalization",
                  "Null"
                ],
                [
                  "Initialization",
                  "Null"
                ]
              ]
            },
            "PhragmenScore": "[u128; 3]",
            "PreimageStatusAvailable": {
              "type": "struct",
              "type_mapping": [
                [
                  "data",
                  "Bytes"
                ],
                [
                  "provider",
                  "AccountId"
                ],
                [
                  "deposit",
                  "Balance"
                ],
                [
                  "since",
                  "BlockNumber"
                ],
                [
                  "expiry",
                  "Option<BlockNumber>"
                ]
              ]
            },
            "PreimageStatus": {
              "type": "enum",
              "type_mapping": [
                [
                  "Missing",
                  "BlockNumber"
                ],
                [
                  "Available",
                  "PreimageStatusAvailable"
                ]
              ]
            },
            "Randomness": "Hash",
            "MaybeRandomness": "Option<Randomness>",
            "schnorrkel::Randomness": "Hash",
            "schnorrkel::RawVRFOutput": "[u8; 32]",
            "TaskAddress": {
              "type": "struct",
              "type_mapping": [
                ["block_number", "BlockNumber"],
                ["index", "u32"]
              ]
            },
            "ValidationFunctionParams": {
              "type": "struct",
              "type_mapping": [
                [
                  "max_code_size",
                  "u32"
                ],
                [
                  "relay_chain_height",
                  "RelayChainBlockNumber"
                ],
                [
                  "code_upgrade_allowed",
                  "Option<RelayChainBlockNumber>"
                ]
              ]
            },
            "ValidationCode": "Bytes",
            "ValidationCodeHash": "Hash",
            "ValidationData": {
              "type": "struct",
              "type_mapping": [
                [
                  "persisted",
                  "PersistedValidationData"
                ],
                [
                  "transient",
                  "TransientValidationData"
                ]
              ]
            },
            "ValidationDataType": {
              "type": "struct",
              "type_mapping": [
                [
                  "validation_data",
                  "ValidationData"
                ],
                [
                  "relay_chain_state",
                  "Vec<Bytes>"
                ]
              ]
            },
            "ValidatorGroup": "Vec<ValidatorIndex>",
            "ParaLifecycle": {
              "type": "enum",
              "value_list": [
                "Onboarding",
                "Parathread",
                "Parachain",
                "UpgradingToParachain",
                "DowngradingToParathread",
                "OutgoingParathread",
                "OutgoingParachain"
              ]
            },
            "ParaPastCodeMeta": {
              "type": "struct",
              "type_mapping": [
                [
                  "upgrade_times",
                  "Vec<ReplacementTimes>"
                ],
                [
                  "last_pruned",
                  "Option<BlockNumber>"
                ]
              ]
            },
            "ModuleId": "LockIdentifier",
            "MultiAddress": "GenericMultiAddress",
            "MultiSigner": {
              "type": "enum",
              "type_mapping": [
                [
                  "Ed25519",
                  "[u8; 32]"
                ],
                [
                  "Sr25519",
                  "[u8; 32]"
                ],
                [
                  "Ecdsa",
                  "[u8; 33]"
                ]
              ]
            },
            "RuntimeDbWeight": {
              "type": "struct",
              "type_mapping": [
                [
                  "read",
                  "Weight"
                ],
                [
                  "write",
                  "Weight"
                ]
              ]
            },
            "Renouncing": {
              "type": "enum",
              "type_mapping": [
                [
                  "Member",
                  "Null"
                ],
                [
                  "RunnerUp",
                  "Null"
                ],
                [
                  "Candidate",
                  "Compact<u32>"
                ]
              ]
            },
            "Voter": {
              "type": "struct",
              "type_mapping": [
                [
                  "votes",
                  "Vec<AccountId>"
                ],
                [
                  "stake",
                  "Balance"
                ],
                [
                  "deposit",
                  "Balance"
                ]
              ]
            },
            "SeatHolder": {
              "type": "struct",
              "type_mapping": [
                [
                  "who",
                  "AccountId"
                ],
                [
                  "stake",
                  "Balance"
                ],
                [
                  "deposit",
                  "Balance"
                ]
              ]
            },
            "ExtrinsicsWeight": {
              "type": "struct",
              "type_mapping": [
                [
                  "normal",
                  "Weight"
                ],
                [
                  "operational",
                  "Weight"
                ]
              ]
            },
            "weights::ExtrinsicsWeight": "ExtrinsicsWeight",
            "ValidatorCount": "u32",
            "MembershipProof": {
              "type": "struct",
              "type_mapping": [
                [
                  "session",
                  "SessionIndex"
                ],
                [
                  "trie_nodes",
                  "Vec<Vec<u8>>"
                ],
                [
                  "validator_count",
                  "ValidatorCount"
                ]
              ]
            },
            "JustificationNotification": "Bytes",
            "KeyOwnerProof": "MembershipProof",
            "DefunctVoter": {
              "type": "struct",
              "type_mapping": [
                [
                  "who",
                  "AccountId"
                ],
                [
                  "vote_count",
                  "Compact<u32>"
                ],
                [
                  "candidate_count",
                  "Compact<u32>"
                ]
              ]
            },
            "ElectionScore": "[u128; 3]",
            "SubmissionIndicesOf": "BoundedBTreeMap<ElectionScore, u32>",
            "SignedSubmissionOf": {
              "type": "struct",
              "type_mapping": [
                [
                  "who",
                  "AccountId"
                ],
                [
                  "deposit",
                  "Balance"
                ],
                [
                  "solution",
                  "RawSolution"
                ],
                [
                  "reward",
                  "Balance"
                ]
              ]
            },
            "ElectionSize": {
              "type": "struct",
              "type_mapping": [
                [
                  "validators",
                  "Compact<ValidatorIndex>"
                ],
                [
                  "nominators",
                  "Compact<NominatorIndex>"
                ]
              ]
            },
            "SiField": {
              "type": "struct",
              "type_mapping": [
                [
                  "name",
                  "Option<Text>"
                ],
                [
                  "type",
                  "SiLookupTypeId"
                ],
                [
                  "typeName",
                  "Option<Text>"
                ],
                [
                  "docs",
                  "Vec<Text>"
                ]
              ]
            },
            "SiLookupTypeId": "Compact<u32>",
            "SiPath": "Vec<Text>",
            "SiType": {
              "type": "struct",
              "type_mapping": [
                [
                  "path",
                  "SiPath"
                ],
                [
                  "params",
                  "Vec<SiTypeParameter>"
                ],
                [
                  "def",
                  "SiTypeDef"
                ],
                [
                  "docs",
                  "Vec<Text>"
                ]
              ]
            },
            "SiTypeDef": {
              "type": "enum",
              "type_mapping": [
                [
                  "Composite",
                  "SiTypeDefComposite"
                ],
                [
                  "Variant",
                  "SiTypeDefVariant"
                ],
                [
                  "Sequence",
                  "SiTypeDefSequence"
                ],
                [
                  "Array",
                  "SiTypeDefArray"
                ],
                [
                  "Tuple",
                  "SiTypeDefTuple"
                ],
                [
                  "Primitive",
                  "SiTypeDefPrimitive"
                ],
                [
                  "Compact",
                  "SiTypeDefCompact"
                ],
                [
                  "BitSequence",
                  "SiTypeDefBitSequence"
                ]
              ]
            },
            "SiTypeDefArray": {
              "type": "struct",
              "type_mapping": [
                [
                  "len",
                  "u32"
                ],
                [
                  "type",
                  "SiLookupTypeId"
                ]
              ]
            },
            "SiTypeDefBitSequence": {
              "type": "struct",
              "type_mapping": [
                [
                  "bitStoreType",
                  "SiLookupTypeId"
                ],
                [
                  "bitOrderType",
                  "SiLookupTypeId"
                ]
              ]
            },
            "SiTypeDefCompact": {
              "type": "struct",
              "type_mapping": [
                [
                  "type",
                  "SiLookupTypeId"
                ]
              ]
            },
            "SiTypeDefComposite": {
              "type": "struct",
              "type_mapping": [
                [
                  "fields",
                  "Vec<SiField>"
                ]
              ]
            },
            "SiTypeDefPrimitive": {
              "type": "enum",
              "value_list": [
                "Bool",
                "Char",
                "Str",
                "U8",
                "U16",
                "U32",
                "U64",
                "U128",
                "U256",
                "I8",
                "I16",
                "I32",
                "I64",
                "I128",
                "I256"
              ]
            },
            "SiTypeDefSequence": {
              "type": "struct",
              "type_mapping": [
                [
                  "type",
                  "SiLookupTypeId"
                ]
              ]
            },
            "SiTypeDefTuple": "Vec<SiLookupTypeId>",
            "SiTypeParameter": {
              "type": "struct",
              "type_mapping": [
                [
                  "name",
                  "Text"
                ],
                [
                  "type",
                  "Option<SiLookupTypeId>"
                ]
              ]
            },
            "SiTypeDefVariant": {
              "type": "struct",
              "type_mapping": [
                [
                  "variants",
                  "Vec<SiVariant>"
                ]
              ]
            },
            "SiVariant": {
              "type": "struct",
              "type_mapping": [
                [
                  "name",
                  "Text"
                ],
                [
                  "fields",
                  "Vec<SiField>"
                ],
                [
                  "index",
                  "u8"
                ],
                [
                  "docs",
                  "Vec<Text>"
                ]
              ]
            },
            "AllowedSlots": {
              "type": "enum",
              "value_list": [
                "PrimarySlots",
                "PrimaryAndSecondaryPlainSlots",
                "PrimaryAndSecondaryVRFSlots"
              ]
            },
            "NextConfigDescriptorV1": {
              "type": "struct",
              "type_mapping": [
                [
                  "c",
                  "(u64, u64)"
                ],
                [
                  "allowed_slots",
                  "AllowedSlots"
                ]
              ]
            },
            "NextConfigDescriptor": {
              "type": "enum",
              "type_mapping": [
                [
                  "V0",
                  "Null"
                ],
                [
                  "V1",
                  "NextConfigDescriptorV1"
                ]
              ]
            },
            "StatementKind": {
              "type": "enum",
              "value_list": [
                "Regular",
                "Saft"
              ]
            },
            "schedule::Priority": "u8",
            "GrandpaEquivocation": {
              "type": "enum",
              "type_mapping": [
                [
                  "Prevote",
                  "GrandpaEquivocationValue"
                ],
                [
                  "Precommit",
                  "GrandpaEquivocationValue"
                ]
              ]
            },
            "GrandpaPrevote": {
              "type": "struct",
              "type_mapping": [
                [
                  "target_hash",
                  "Hash"
                ],
                [
                  "target_number",
                  "BlockNumber"
                ]
              ]
            },
            "GrandpaCommit": {
              "type": "struct",
              "type_mapping": [
                [
                  "target_hash",
                  "BlockHash"
                ],
                [
                  "target_number",
                  "BlockNumber"
                ],
                [
                  "precommits",
                  "Vec<GrandpaSignedPrecommit>"
                ]
              ]
            },
            "GrandpaPrecommit": {
              "type": "struct",
              "type_mapping": [
                [
                  "target_hash",
                  "BlockHash"
                ],
                [
                  "target_number",
                  "BlockNumber"
                ]
              ]
            },
            "GrandpaSignedPrecommit": {
              "type": "struct",
              "type_mapping": [
                [
                  "precommit",
                  "GrandpaPrecommit"
                ],
                [
                  "signature",
                  "AuthoritySignature"
                ],
                [
                  "id",
                  "AuthorityId"
                ]
              ]
            },
            "GrandpaJustification": {
              "type": "struct",
              "type_mapping": [
                [
                  "round",
                  "u64"
                ],
                [
                  "commit",
                  "GrandpaCommit"
                ],
                [
                  "votes_ancestries",
                  "Vec<Header>"
                ]
              ]
            },
            "Equivocation": "GrandpaEquivocation",
            "EquivocationProof<Hash, BlockNumber>": {
              "type": "struct",
              "type_mapping": [
                [
                  "set_id",
                  "SetId"
                ],
                [
                  "equivocation",
                  "Equivocation"
                ]
              ]
            },
            "ProxyType": {
              "type": "enum",
              "value_list": [
                "Any",
                "NonTransfer",
                "Governance",
                "Staking"
              ]
            },
            "BalanceStatus": {
              "type": "enum",
              "value_list": [
                "Free",
                "Reserved"
              ]
            },
            "Status": "BalanceStatus",
            "EcdsaSignature": "[u8; 65]",
            "Ed25519Signature": "H512",
            "Sr25519Signature": "H512",
            "AnySignature": "H512",
            "MultiSignature": {
              "type": "enum",
              "type_mapping": [
                [
                  "Ed25519",
                  "Ed25519Signature"
                ],
                [
                  "Sr25519",
                  "Sr25519Signature"
                ],
                [
                  "Ecdsa",
                  "EcdsaSignature"
                ]
              ]
            },
            "ExtrinsicSignature": "MultiSignature",
            "schedule::period<blocknumber>": "(BlockNumber, u32)",
            "OpaqueCall": "OpaqueCall",
            "OriginCaller": {
              "type": "enum",
              "type_mapping": [
                [
                  "System",
                  "SystemOrigin"
                ]
              ]
            },
            "PalletId": "LockIdentifier",
            "PalletsOrigin": "OriginCaller",
            "PalletVersion": {
              "type": "struct",
              "type_mapping": [
                [
                  "major",
                  "u16"
                ],
                [
                  "minor",
                  "u8"
                ],
                [
                  "patch",
                  "u8"
                ]
              ]
            },
            "XcmAssetEffects": {
              "type": "struct",
              "type_mapping": [
                [
                  "assets",
                  "Vec<MultiAsset>"
                ],
                [
                  "effects",
                  "Vec<XcmOrder>"
                ]
              ]
            },
            "XcmWithdrawAsset": "XcmAssetEffects",
            "XcmReserveAssetDeposit": "XcmAssetEffects",
            "XcmTeleportAsset": "XcmAssetEffects",
            "XcmQueryResponse": {
              "type": "struct",
              "type_mapping": [
                [
                  "query_id",
                  "Compact<u64>"
                ],
                [
                  "response",
                  "XcmResponse"
                ]
              ]
            },
            "XcmTransferAsset": {
              "type": "struct",
              "type_mapping": [
                [
                  "assets",
                  "Vec<MultiAsset>"
                ],
                [
                  "dest",
                  "MultiLocation"
                ]
              ]
            },
            "XcmTransferReserveAsset": {
              "type": "struct",
              "type_mapping": [
                [
                  "assets",
                  "Vec<MultiAsset>"
                ],
                [
                  "dest",
                  "MultiLocation"
                ],
                [
                  "effects",
                  "Vec<XcmOrder>"
                ]
              ]
            },
            "XcmTransact": {
              "type": "struct",
              "type_mapping": [
                [
                  "origin_type",
                  "XcmOriginKind"
                ],
                [
                  "require_weight_at_most",
                  "u64"
                ],
                [
                  "call",
                  "DoubleEncodedCall"
                ]
              ]
            },
            "XcmHrmpNewChannelOpenRequest": {
              "type": "struct",
              "type_mapping": [
                [
                  "sender",
                  "Compact<u32>"
                ],
                [
                  "max_message_size",
                  "Compact<u32>"
                ],
                [
                  "max_capacity",
                  "Compact<u32>"
                ]
              ]
            },
            "XcmHrmpChannelAccepted": {
              "type": "struct",
              "type_mapping": [
                [
                  "recipient",
                  "Compact<u32>"
                ]
              ]
            },
            "XcmHrmpChannelClosing": {
              "type": "struct",
              "type_mapping": [
                [
                  "initiator",
                  "Compact<u32>"
                ],
                [
                  "sender",
                  "Compact<u32>"
                ],
                [
                  "recipient",
                  "Compact<u32>"
                ]
              ]
            },
            "XcmRelayedFrom": {
              "type": "struct",
              "type_mapping": [
                [
                  "who",
                  "MultiLocation"
                ],
                [
                  "message",
                  "Xcm"
                ]
              ]
            },
            "Xcm<Call>": "Xcm",
            "xcm::VersionedXcm": "VersionedXcm",
            "XcmOrderDepositAsset": {
              "type": "struct",
              "type_mapping": [
                [
                  "assets",
                  "Vec<MultiAsset>"
                ],
                [
                  "dest",
                  "MultiLocation"
                ]
              ]
            },
            "XcmOrderDepositReserveAsset": {
              "type": "struct",
              "type_mapping": [
                [
                  "assets",
                  "Vec<MultiAsset>"
                ],
                [
                  "dest",
                  "MultiLocation"
                ],
                [
                  "effects",
                  "Vec<XcmOrder>"
                ]
              ]
            },
            "XcmOrderExchangeAsset": {
              "type": "struct",
              "type_mapping": [
                [
                  "give",
                  "Vec<MultiAsset>"
                ],
                [
                  "receive",
                  "Vec<MultiAsset>"
                ]
              ]
            },
            "XcmOrderInitiateReserveWithdraw": {
              "type": "struct",
              "type_mapping": [
                [
                  "assets",
                  "Vec<MultiAsset>"
                ],
                [
                  "reserve",
                  "MultiLocation"
                ],
                [
                  "effects",
                  "Vec<XcmOrder>"
                ]
              ]
            },
            "XcmOrderInitiateTeleport": {
              "type": "struct",
              "type_mapping": [
                [
                  "assets",
                  "Vec<MultiAsset>"
                ],
                [
                  "dest",
                  "MultiLocation"
                ],
                [
                  "effects",
                  "Vec<XcmOrder>"
                ]
              ]
            },
            "XcmOrderQueryHolding": {
              "type": "struct",
              "type_mapping": [
                [
                  "query_id",
                  "Compact<u64>"
                ],
                [
                  "dest",
                  "MultiLocation"
                ],
                [
                  "assets",
                  "Vec<MultiAsset>"
                ]
              ]
            },
            "XcmOrderBuyExecution": {
              "type": "struct",
              "type_mapping": [
                [
                  "fees",
                  "MultiAsset"
                ],
                [
                  "weight",
                  "u64"
                ],
                [
                  "debt",
                  "u64"
                ],
                [
                  "halt_on_error",
                  "bool"
                ],
                [
                  "xcm",
                  "Vec<Xcm>"
                ]
              ]
            },
            "MultiAssets": "Vec<MultiAsset>",
            "WildFungibility": {
              "type": "enum",
              "value_list": [
                "Fungible",
                "NonFungible"
              ]
            },
            "AssetInstanceV0": {
              "type": "enum",
              "type_mapping": [
                [
                  "Undefined",
                  "Null"
                ],
                [
                  "Index8",
                  "u8"
                ],
                [
                  "Index16",
                  "Compact<u16>"
                ],
                [
                  "Index32",
                  "Compact<u32>"
                ],
                [
                  "Index64",
                  "Compact<u64>"
                ],
                [
                  "Index128",
                  "Compact<u128>"
                ],
                [
                  "Array4",
                  "[u8; 4]"
                ],
                [
                  "Array8",
                  "[u8; 8]"
                ],
                [
                  "Array16",
                  "[u8; 16]"
                ],
                [
                  "Array32",
                  "[u8; 32]"
                ],
                [
                  "Blob",
                  "Vec<u8>"
                ]
              ]
            },
            "JunctionV0": {
              "type": "enum",
              "type_mapping": [
                [
                  "Parent",
                  "Null"
                ],
                [
                  "Parachain",
                  "Compact<u32>"
                ],
                [
                  "AccountId32",
                  "AccountId32Junction"
                ],
                [
                  "AccountIndex64",
                  "AccountIndex64Junction"
                ],
                [
                  "AccountKey20",
                  "AccountKey20Junction"
                ],
                [
                  "PalletInstance",
                  "u8"
                ],
                [
                  "GeneralIndex",
                  "Compact<u128>"
                ],
                [
                  "GeneralKey",
                  "Vec<u8>"
                ],
                [
                  "OnlyChild",
                  "Null"
                ],
                [
                  "Plurality",
                  "PluralityJunction"
                ]
              ]
            },
            "MultiAssetV0": {
              "type": "enum",
              "type_mapping": [
                [
                  "None",
                  "Null"
                ],
                [
                  "All",
                  "Null"
                ],
                [
                  "AllFungible",
                  "Null"
                ],
                [
                  "AllNonFungible",
                  "Null"
                ],
                [
                  "AllAbstractFungible",
                  "Vec<u8>"
                ],
                [
                  "AllAbstractNonFungible",
                  "Vec<u8>"
                ],
                [
                  "AllConcreteFungible",
                  "MultiLocationV0"
                ],
                [
                  "AllConcreteNonFungible",
                  "MultiLocationV0"
                ],
                [
                  "AbstractFungible",
                  "MultiAssetAbstractFungible"
                ],
                [
                  "AbstractNonFungible",
                  "MultiAssetAbstractNonFungible"
                ],
                [
                  "ConcreteFungible",
                  "MultiAssetConcreteFungible"
                ],
                [
                  "ConcreteNonFungible",
                  "MultiAssetConcreteNonFungible"
                ]
              ]
            },
            "MultiAssetAbstractFungible": {
              "type": "struct",
              "type_mapping": [
                [
                  "id",
                  "Vec<u8>"
                ],
                [
                  "instance",
                  "Compact<u128>"
                ]
              ]
            },
            "MultiAssetAbstractNonFungible": {
              "type": "struct",
              "type_mapping": [
                [
                  "class",
                  "Vec<u8>"
                ],
                [
                  "instance",
                  "AssetInstance"
                ]
              ]
            },
            "MultiAssetConcreteFungible": {
              "type": "struct",
              "type_mapping": [
                [
                  "id",
                  "MultiLocation"
                ],
                [
                  "amount",
                  "Compact<u128>"
                ]
              ]
            },
            "MultiAssetConcreteNonFungible": {
              "type": "struct",
              "type_mapping": [
                [
                  "class",
                  "MultiLocation"
                ],
                [
                  "instance",
                  "AssetInstance"
                ]
              ]
            },
            "OriginKindV0": {
              "type": "enum",
              "value_list": [
                "Native",
                "SovereignAccount",
                "Superuser",
                "Xcm"
              ]
            },
            "ResponseV0": {
              "type": "enum",
              "type_mapping": [
                [
                  "Assets",
                  "Vec<MultiAssetV0>"
                ]
              ]
            },
            "XcmV0::WithdrawAsset": {
              "type": "struct",
              "type_mapping": [
                [
                  "assets",
                  "Vec<MultiAssetV0>"
                ],
                [
                  "effects",
                  "Vec<XcmOrderV0>"
                ]
              ]
            },
            "XcmV0::ReserveAssetDeposit": {
              "type": "struct",
              "type_mapping": [
                [
                  "assets",
                  "Vec<MultiAssetV0>"
                ],
                [
                  "effects",
                  "Vec<XcmOrderV0>"
                ]
              ]
            },
            "XcmV0::ReceiveTeleportedAsset": {
              "type": "struct",
              "type_mapping": [
                [
                  "assets",
                  "Vec<MultiAssetV0>"
                ],
                [
                  "effects",
                  "Vec<XcmOrderV0>"
                ]
              ]
            },
            "XcmV0::QueryResponse": {
              "type": "struct",
              "type_mapping": [
                [
                  "queryId",
                  "Compact<u64>"
                ],
                [
                  "response",
                  "ResponseV0"
                ]
              ]
            },
            "XcmV0::TransferAsset": {
              "type": "struct",
              "type_mapping": [
                [
                  "assets",
                  "Vec<MultiAssetV0>"
                ],
                [
                  "dest",
                  "MultiLocationV0"
                ]
              ]
            },
            "XcmV0::TransferReserveAsset": {
              "type": "struct",
              "type_mapping": [
                [
                  "assets",
                  "Vec<MultiAssetV0>"
                ],
                [
                  "dest",
                  "MultiLocationV0"
                ],
                [
                  "effects",
                  "Vec<XcmOrderV0>"
                ]
              ]
            },
            "XcmV0::Transact": {
              "type": "struct",
              "type_mapping": [
                [
                  "originType",
                  "XcmOriginKind"
                ],
                [
                  "requireWeightAtMost",
                  "u64"
                ],
                [
                  "call",
                  "DoubleEncodedCall"
                ]
              ]
            },
            "XcmV0::HrmpNewChannelOpenRequest": {
              "type": "struct",
              "type_mapping": [
                [
                  "sender",
                  "Compact<u32>"
                ],
                [
                  "maxMessageSize",
                  "Compact<u32>"
                ],
                 [
                  "maxCapacity",
                  "Compact<u32>"
                ]
              ]
            },
            "XcmV0::HrmpChannelAccepted": {
              "type": "struct",
              "type_mapping": [
                [
                  "recipient",
                  "Compact<u32>"
                ]
              ]
            },
            "XcmV0::HrmpChannelClosing": {
              "type": "struct",
              "type_mapping": [
                [
                  "initiator",
                  "Compact<u32>"
                ],
                [
                  "sender",
                  "Compact<u32>"
                ],
                [
                  "recipient",
                  "Compact<u32>"
                ]
              ]
            },
            "XcmV0::RelayedFrom": {
              "type": "struct",
              "type_mapping": [
                [
                  "who",
                  "MultiLocationV0"
                ],
                [
                  "message",
                  "XcmV0"
                ]
              ]
            },
            "XcmV0": {
              "type": "enum",
              "type_mapping": [
                [
                  "WithdrawAsset",
                  "XcmV0::WithdrawAsset"
                ],
                [
                  "ReserveAssetDeposit",
                  "XcmV0::ReserveAssetDeposit"
                ],
                [
                  "ReceiveTeleportedAsset",
                  "XcmV0::ReceiveTeleportedAsset"
                ],
                [
                  "QueryResponse",
                  "XcmV0::QueryResponse"
                ],
                [
                  "TransferAsset",
                  "XcmV0::TransferAsset"
                ],
                [
                  "TransferReserveAsset",
                  "XcmV0::TransferReserveAsset"
                ],
                [
                  "Transact",
                  "XcmV0::Transact"
                ],
                [
                  "HrmpNewChannelOpenRequest",
                  "XcmV0::HrmpNewChannelOpenRequest"
                ],
                [
                  "HrmpChannelAccepted",
                  "XcmV0::HrmpChannelAccepted"
                ],
                [
                  "HrmpChannelClosing",
                  "XcmV0::HrmpChannelClosing"
                ],
                [
                  "RelayedFrom",
                  "XcmV0::RelayedFrom"
                ]
              ]
            },
            "XcmErrorV0": {
              "type": "enum",
              "type_mapping": [
                [
                  "Undefined",
                  "Null"
                ],
                [
                  "Overflow",
                  "Null"
                ],
                [
                  "Unimplemented",
                  "Null"
                ],
                [
                  "UnhandledXcmVersion",
                  "Null"
                ],
                [
                  "UnhandledXcmMessage",
                  "Null"
                ],
                [
                  "UnhandledEffect",
                  "Null"
                ],
                [
                  "EscalationOfPrivilege",
                  "Null"
                ],
                [
                  "UntrustedReserveLocation",
                  "Null"
                ],
                [
                  "UntrustedTeleportLocation",
                  "Null"
                ],
                [
                  "DestinationBufferOverflow",
                  "Null"
                ],
                [
                  "SendFailed",
                  "Null"
                ],
                [
                  "CannotReachDestination",
                  "(MultiLocation, Xcm)"
                ],
                [
                  "MultiLocationFull",
                  "Null"
                ],
                [
                  "FailedToDecode",
                  "Null"
                ],
                [
                  "BadOrigin",
                  "Null"
                ],
                [
                  "ExceedsMaxMessageSize",
                  "Null"
                ],
                [
                  "FailedToTransactAsset",
                  "Null"
                ],
                [
                  "WeightLimitReached",
                  "Weight"
                ],
                [
                  "Wildcard",
                  "Null"
                ],
                [
                  "TooMuchWeightRequired",
                  "Null"
                ],
                [
                  "NotHoldingFees",
                  "Null"
                ],
                [
                  "WeightNotComputable",
                  "Null"
                ],
                [
                  "Barrier",
                  "Null"
                ],
                [
                  "NotWithdrawable",
                  "Null"
                ],
                [
                  "LocationCannotHold",
                  "Null"
                ],
                [
                  "TooExpensive",
                  "Null"
                ],
                [
                  "AssetNotFound",
                  "Null"
                ],
                [
                  "RecursionLimitReached",
                  "Null"
                ]
              ]
            },
            "XcmOrderV0::DepositAsset": {
              "type": "struct",
              "type_mapping": [
                [
                  "assets",
                  "Vec<MultiAssetV0>"
                ],
                [
                  "dest",
                  "MultiLocationV0"
                ]
              ]
            },
            "XcmOrderV0::DepositReserveAsset": {
              "type": "struct",
              "type_mapping": [
                [
                  "assets",
                  "Vec<MultiAssetV0>"
                ],
                [
                  "dest",
                  "MultiLocationV0"
                ],
                [
                  "effects",
                  "Vec<XcmOrderV0>"
                ]
              ]
            },
            "XcmOrderV0::ExchangeAsset": {
              "type": "struct",
              "type_mapping": [
                [
                  "give",
                  "Vec<MultiAssetV0>"
                ],
                [
                  "receive",
                  "Vec<MultiAssetV0>"
                ]
              ]
            },
            "XcmOrderV0::InitiateReserveWithdraw": {
              "type": "struct",
              "type_mapping": [
                [
                  "assets",
                  "Vec<MultiAssetV0>"
                ],
                [
                  "reserve",
                  "MultiLocationV0"
                ],
                [
                  "effects",
                  "Vec<XcmOrderV0>"
                ]
              ]
            },
            "XcmOrderV0::InitiateTeleport": {
              "type": "struct",
              "type_mapping": [
                [
                  "assets",
                  "Vec<MultiAssetV0>"
                ],
                [
                  "dest",
                  "MultiLocationV0"
                ],
                [
                  "effects",
                  "Vec<XcmOrderV0>"
                ]
              ]
            },
            "XcmOrderV0::QueryHolding": {
              "type": "struct",
              "type_mapping": [
                [
                  "queryId",
                  "Compact<u64>"
                ],
                [
                  "dest",
                  "MultiLocationV0"
                ],
                [
                  "assets",
                  "Vec<MultiAssetV0>"
                ]
              ]
            },
            "XcmOrderV0::BuyExecution": {
              "type": "struct",
              "type_mapping": [
                [
                  "fees",
                  "MultiAsset"
                ],
                [
                  "weight",
                  "u64"
                ],
                [
                  "debt",
                  "u64"
                ],
                 [
                  "haltOnError",
                  "bool"
                ],
                [
                  "xcm",
                  "Vec<XcmV0>"
                ]
              ]
            },
            "XcmOrderV0": {
              "type": "enum",
              "type_mapping": [
                [
                  "Null",
                  "Null"
                ],
                [
                  "DepositAsset",
                  "XcmOrderV0::DepositAsset"
                ],
                [
                  "DepositReserveAsset",
                  "XcmOrderV0::DepositReserveAsset"
                ],
                [
                  "ExchangeAsset",
                  "XcmOrderV0::ExchangeAsset"
                ],
                [
                  "InitiateReserveWithdraw",
                  "XcmOrderV0::InitiateReserveWithdraw"
                ],
                [
                  "InitiateTeleport",
                  "XcmOrderV0::InitiateTeleport"
                ],
                [
                  "QueryHolding",
                  "XcmOrderV0::QueryHolding"
                ],
                [
                  "BuyExecution",
                  "XcmOrderV0::BuyExecution"
                ]
              ]
            },
            "AssetInstanceV1": {
              "type": "enum",
              "type_mapping": [
                [
                  "Undefined",
                  "Null"
                ],
                [
                  "Index",
                  "Compact<u128>"
                ],
                [
                  "Array4",
                  "[u8; 4]"
                ],
                [
                  "Array8",
                  "[u8; 8]"
                ],
                [
                  "Array16",
                  "[u8; 16]"
                ],
                [
                  "Array32",
                  "[u8; 32]"
                ],
                [
                  "Blob",
                  "Bytes"
                ]
              ]
            },
            "JunctionV1::AccountId32": {
              "type": "struct",
              "type_mapping": [
                [
                  "network",
                  "NetworkId"
                ],
                [
                  "id",
                  "AccountId"
                ]
              ]
            },
            "JunctionV1::AccountIndex64": {
              "type": "struct",
              "type_mapping": [
                [
                  "network",
                  "NetworkId"
                ],
                [
                  "index",
                  "Compact<u64>"
                ]
              ]
            },
            "JunctionV1::AccountKey20": {
              "type": "struct",
              "type_mapping": [
                [
                  "network",
                  "NetworkId"
                ],
                [
                  "key",
                  "[u8; 20]"
                ]
              ]
            },
            "JunctionV1::Plurality": {
              "type": "struct",
              "type_mapping": [
                [
                  "id",
                  "BodyId"
                ],
                [
                  "part",
                  "BodyPart"
                ]
              ]
            },
            "JunctionV1": {
              "type": "enum",
              "type_mapping": [
                [
                  "Parachain",
                  "Compact<u32>"
                ],
                [
                  "AccountId32",
                  "JunctionV1::AccountId32"
                ],
                [
                  "AccountIndex64",
                  "JunctionV1::AccountIndex64"
                ],
                [
                  "AccountKey20",
                  "JunctionV1::AccountKey20"
                ],
                [
                  "PalletInstance",
                  "u8"
                ],
                [
                  "GeneralIndex",
                  "Compact<u128>"
                ],
                [
                  "GeneralKey",
                  "Vec<u8>"
                ],
                [
                  "OnlyChild",
                  "Null"
                ],
                [
                  "Plurality",
                  "JunctionV1::Plurality"
                ]
              ]
            },
            "JunctionsV1": {
              "type": "enum",
              "type_mapping": [
                [
                  "Here",
                  "Null"
                ],
                [
                  "X1",
                  "JunctionV1"
                ],
                [
                  "X2",
                  "(JunctionV1, JunctionV1)"
                ],
                [
                  "X3",
                  "(JunctionV1, JunctionV1, JunctionV1)"
                ],
                [
                  "X4",
                  "(JunctionV1, JunctionV1, JunctionV1, JunctionV1)"
                ],
                [
                  "X5",
                  "(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)"
                ],
                [
                  "X6",
                  "(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)"
                ],
                [
                  "X7",
                  "(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)"
                ],
                [
                  "X8",
                  "(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)"
                ]
              ]
            },
            "MultiAssetsV1": "Vec<MultiAssetV1>",
            "MultiAssetV1": {
              "type": "struct",
              "type_mapping": [
                [
                  "id",
                  "XcmAssetId"
                ],
                [
                  "fungibility",
                  "Fungibility"
                ]
              ]
            },
            "MultiAssetFilterV1": {
              "type": "enum",
              "type_mapping": [
                [
                  "Definite",
                  "MultiAssetsV1"
                ],
                [
                  "Wild",
                  "WildMultiAssetV1"
                ]
              ]
            },
            "MultiLocationV1": {
              "type": "struct",
              "type_mapping": [
                [
                  "parents",
                  "u8"
                ],
                [
                  "interior",
                  "JunctionsV1"
                ]
              ]
            },
            "OriginKindV1": "OriginKindV0",
            "ResponseV1": {
              "type": "enum",
              "type_mapping": [
                [
                  "Assets",
                  "MultiAssetsV1"
                ]
              ]
            },
            "WildMultiAssetV1::AllOf": {
              "type": "struct",
              "type_mapping": [
                [
                  "id",
                  "XcmAssetId"
                ],
                [
                  "fungibility",
                  "WildFungibility"
                ]
              ]
            },
            "WildMultiAssetV1": {
              "type": "enum",
              "type_mapping": [
                [
                  "All",
                  "Null"
                ],
                [
                  "AllOf",
                  "WildMultiAssetV1::AllOf"
                ]
              ]
            },
            "XcmV1::Asset": {
              "type": "struct",
              "type_mapping": [
                [
                  "Vassets",
                  "MultiAssetsV1"
                ],
                [
                  "effects",
                  "Vec<XcmOrderV1>"
                ]
              ]
            },
            "XcmV1::QueryResponse": {
              "type": "struct",
              "type_mapping": [
                [
                  "queryId",
                  "Compact<u64>"
                ],
                [
                  "response",
                  "ResponseV1"
                ]
              ]
            },
            "XcmV1::TransferAsset": {
              "type": "struct",
              "type_mapping": [
                [
                  "Vassets",
                  "MultiAssetsV1"
                ],
                [
                  "dest",
                  "MultiLocationV1"
                ]
              ]
            },
            "XcmV1::TransferReserveAsset": {
              "type": "struct",
              "type_mapping": [
                [
                  "Vassets",
                  "MultiAssetsV1"
                ],
                [
                  "dest",
                  "MultiLocationV1"
                ],
                [
                  "effects",
                  "Vec<XcmOrderV1>"
                ]
              ]
            },
            "XcmV1::Transact": {
              "type": "struct",
              "type_mapping": [
                [
                  "originType",
                  "XcmOriginKind"
                ],
                [
                  "requireWeightAtMost",
                  "u64"
                ],
                [
                  "call",
                  "DoubleEncodedCall"
                ]
              ]
            },
            "XcmV1::HrmpNewChannelOpenRequest": {
              "type": "struct",
              "type_mapping": [
                [
                  "sender",
                  "Compact<u32>"
                ],
                [
                  "maxMessageSize",
                  "u64"
                ],
                [
                  "maxCapacity",
                  "Compact<u32>"
                ]
              ]
            },
            "XcmV1::HrmpChannelAccepted": {
              "type": "struct",
              "type_mapping": [
                [
                  "recipient",
                  "Compact<u32>"
                ]
              ]
            },
            "XcmV1::HrmpChannelClosing": {
              "type": "struct",
              "type_mapping": [
                [
                  "initiator",
                  "Compact<u32>"
                ],
                [
                  "sender",
                  "Compact<u32>"
                ],
                [
                  "recipient",
                  "Compact<u32>"
                ]
              ]
            },
            "XcmV1::RelayedFrom": {
              "type": "struct",
              "type_mapping": [
                [
                  "who",
                  "MultiLocationV1"
                ],
                [
                  "message",
                  "XcmV1"
                ]
              ]
            },
            "XcmV1": {
              "type": "enum",
              "type_mapping": [
                [
                  "WithdrawAsset",
                  "XcmV1::Asset"
                ],
                [
                  "ReserveAssetDeposit",
                  "XcmV1::Asset"
                ],
                [
                  "ReceiveTeleportedAsset",
                  "XcmV1::Asset"
                ],
                [
                  "QueryResponse",
                  "XcmV1::QueryResponse"
                ],
                [
                  "TransferAsset",
                  "XcmV1::TransferAsset"
                ],
                [
                  "TransferReserveAsset",
                  "XcmV1::TransferReserveAsset"
                ],
                [
                  "Transact",
                  "XcmV1::Transact"
                ],
                [
                  "HrmpNewChannelOpenRequest",
                  "XcmV1::HrmpNewChannelOpenRequest"
                ],
                [
                  "HrmpChannelAccepted",
                  "XcmV1::HrmpChannelAccepted"
                ],
                [
                  "HrmpChannelClosing",
                  "XcmV1::HrmpChannelClosing"
                ],
                [
                  "RelayedFrom",
                  "XcmV1::RelayedFrom"
                ]
              ]
            },
            "XcmErrorV1": {
              "type": "enum",
              "type_mapping": [
                [
                  "Undefined",
                  "Null"
                ],
                [
                  "Overflow",
                  "Null"
                ],
                [
                  "Unimplemented",
                  "Null"
                ],
                [
                  "UnhandledXcmVersion",
                  "Null"
                ],
                [
                  "UnhandledXcmMessage",
                  "Null"
                ],
                [
                  "UnhandledEffect",
                  "Null"
                ],
                [
                  "EscalationOfPrivilege",
                  "Null"
                ],
                [
                  "UntrustedReserveLocation",
                  "Null"
                ],
                [
                  "UntrustedTeleportLocation",
                  "Null"
                ],
                [
                  "DestinationBufferOverflow",
                  "Null"
                ],
                [
                  "SendFailed",
                  "Null"
                ],
                [
                  "CannotReachDestination",
                  "(MultiLocationV1, XcmV1)"
                ],
                [
                  "MultiLocationFull",
                  "Null"
                ],
                [
                  "FailedToDecode",
                  "Null"
                ],
                [
                  "BadOrigin",
                  "Null"
                ],
                [
                  "ExceedsMaxMessageSize",
                  "Null"
                ],
                [
                  "FailedToTransactAsset",
                  "Null"
                ],
                [
                  "WeightLimitReached",
                  "Weight"
                ],
                [
                  "Wildcard",
                  "Null"
                ],
                [
                  "TooMuchWeightRequired",
                  "Null"
                ],
                [
                  "NotHoldingFees",
                  "Null"
                ],
                [
                  "WeightNotComputable",
                  "Null"
                ],
                [
                  "Barrier",
                  "Null"
                ],
                [
                  "NotWithdrawable",
                  "Null"
                ],
                [
                  "LocationCannotHold",
                  "Null"
                ],
                [
                  "TooExpensive",
                  "Null"
                ],
                [
                  "AssetNotFound",
                  "Null"
                ],
                [
                  "DestinationUnsupported",
                  "Null"
                ],
                [
                  "RecursionLimitReached",
                  "Null"
                ]
              ]
            },
            "XcmOrderV1::DepositAsset": {
              "type": "struct",
              "type_mapping": [
                [
                  "assets",
                  "MultiAssetFilterV1"
                ],
                [
                  "maxAssets",
                  "u32"
                ],
                [
                  "beneficiary",
                  "MultiLocationV1"
                ]
              ]
            },
            "XcmOrderV1::DepositReserveAsset": {
              "type": "struct",
              "type_mapping": [
                [
                  "assets",
                  "MultiAssetFilterV1"
                ],
                [
                  "maxAssets",
                  "u32"
                ],
                [
                  "dest",
                  "MultiLocationV1"
                ],
                [
                  "effects",
                  "Vec<XcmOrderV1>"
                ]
              ]
            },
            "XcmOrderV1::ExchangeAsset": {
              "type": "struct",
              "type_mapping": [
                [
                  "give",
                  "MultiAssetFilterV1"
                ],
                [
                  "receive",
                  "MultiAssetsV1"
                ]
              ]
            },
            "XcmOrderV1::InitiateReserveWithdraw": {
              "type": "struct",
              "type_mapping": [
                [
                  "assets",
                  "MultiAssetFilterV1"
                ],
                [
                  "reserve",
                  "MultiLocationV1"
                ],
                [
                  "effects",
                  "Vec<XcmOrderV1>"
                ]
              ]
            },
            "XcmOrderV1::InitiateTeleport": {
              "type": "struct",
              "type_mapping": [
                [
                  "assets",
                  "MultiAssetFilterV1"
                ],
                [
                  "dest",
                  "MultiLocationV1"
                ],
                [
                  "effects",
                  "Vec<XcmOrderV1>"
                ]
              ]
            },
            "XcmOrderV1::QueryHolding": {
              "type": "struct",
              "type_mapping": [
                [
                  "queryId",
                  "Compact<u64>"
                ],
                [
                  "dest",
                  "MultiLocationV1"
                ],
                [
                  "assets",
                  "MultiAssetFilterV1"
                ]
              ]
            },
            "XcmOrderV1::BuyExecution": {
              "type": "struct",
              "type_mapping": [
                [
                  "fees",
                  "MultiAsset"
                ],
                [
                  "weight",
                  "u64"
                ],
                [
                  "debt",
                  "u64"
                ],
                [
                  "haltOnError",
                  "bool"
                ],
                 [
                  "orders",
                  "Vec<XcmOrderV1>"
                ],
                 [
                  "instructions",
                  "Vec<XcmV1>"
                ]
              ]
            },
            "XcmOrderV1": {
              "type": "enum",
              "type_mapping": [
                [
                  "Noop",
                  "Null"
                ],
                [
                  "DepositAsset",
                  "XcmOrderV1::DepositAsset"
                ],
                [
                  "DepositReserveAsset",
                  "XcmOrderV1::DepositReserveAsset"
                ],
                [
                  "ExchangeAsset",
                  "XcmOrderV1::ExchangeAsset"
                ],
                [
                  "InitiateReserveWithdraw",
                  "XcmOrderV1::InitiateReserveWithdraw"
                ],
                [
                  "InitiateTeleport",
                  "XcmOrderV1::InitiateTeleport"
                ],
                [
                  "QueryHolding",
                  "XcmOrderV1::QueryHolding"
                ],
                [
                  "BuyExecution",
                  "XcmOrderV1::BuyExecution"
                ]
              ]
            },
            "JunctionV2": "JunctionV1",
            "JunctionsV2": "JunctionsV1",
            "MultiAssetsV2": "MultiAssetsV1",
            "MultiAssetV2": "MultiAssetV1",
            "MultiAssetFilterV2": "MultiAssetFilterV1",
            "MultiLocationV2": "MultiLocationV1",
            "OriginKindV2": "OriginKindV1",
            "ResponseV2Error": "(u32, XcmErrorV2)",
            "ResponseV2Result": "(Null, ResponseV2Error)",
            "ResponseV2": {
              "type": "enum",
              "type_mapping": [
                [
                  "Null",
                  "Null"
                ],
                [
                  "Assets",
                  "MultiAssetsV2"
                ],
                [
                  "ExecutionResult",
                  "ResponseV2Result"
                ]
              ]
            },
            "WeightLimitV2": {
              "type": "enum",
              "type_mapping": [
                [
                  "Unlimited",
                  "Null"
                ],
                [
                  "Limited",
                  "Compact<u64>"
                ]
              ]
            },
            "InstructionV2::QueryResponse": {
              "type": "struct",
              "type_mapping": [
                [
                  "queryId",
                  "Compact<u64>"
                ],
                [
                  "response",
                  "ResponseV2"
                ],
                [
                  "maxWeight",
                  "Compact<u64>"
                ]
              ]
            },
            "InstructionV2::TransferAsset": {
              "type": "struct",
              "type_mapping": [
                [
                  "assets",
                  "MultiAssetsV2"
                ],
                [
                  "beneficiary",
                  "MultiLocationV2"
                ]
              ]
            },
            "InstructionV2::TransferReserveAsset": {
              "type": "struct",
              "type_mapping": [
                [
                  "assets",
                  "MultiAssetsV2"
                ],
                [
                  "dest",
                  "MultiLocationV2"
                ],
                [
                  "xcm",
                  "XcmV2"
                ]
              ]
            },
            "InstructionV2::Transact": {
              "type": "struct",
              "type_mapping": [
                [
                  "originType",
                  "OriginKindV2"
                ],
                [
                  "requireWeightAtMost",
                  "u64"
                ],
                [
                  "call",
                  "DoubleEncodedCall"
                ]
              ]
            },
            "InstructionV2::HrmpNewChannelOpenRequest": {
              "type": "struct",
              "type_mapping": [
                [
                  "sender",
                  "Compact<u32>"
                ],
                [
                  "maxMessageSize",
                  "Compact<u32>"
                ],
                [
                  "maxCapacity",
                  "Compact<u32>"
                ]
              ]
            },
            "InstructionV2::HrmpChannelAccepted": {
              "type": "struct",
              "type_mapping": [
                [
                  "recipient",
                  "Compact<u32>"
                ]
              ]
            },
            "InstructionV2::HrmpChannelClosing": {
              "type": "struct",
              "type_mapping": [
                [
                  "initiator",
                  "Compact<u32>"
                ],
                [
                  "sender",
                  "Compact<u32>"
                ],
                [
                  "recipient",
                  "Compact<u32>"
                ]
              ]
            },
            "InstructionV2::ReportError": {
              "type": "struct",
              "type_mapping": [
                [
                  "queryId",
                  "Compact<u64>"
                ],
                [
                  "dest",
                  "MultiLocationV2"
                ],
                [
                  "maxResponseWeight",
                  "Compact<u64>"
                ]
              ]
            },
            "InstructionV2::DepositAsset": {
              "type": "struct",
              "type_mapping": [
                [
                  "assets",
                  "MultiAssetFilterV2"
                ],
                [
                  "maxAssets",
                  "u32"
                ],
                [
                  "beneficiary",
                  "MultiLocationV2"
                ]
              ]
            },
            "InstructionV2::DepositReserveAsset": {
              "type": "struct",
              "type_mapping": [
                [
                  "assets",
                  "MultiAssetFilterV2"
                ],
                [
                  "maxAssets",
                  "u32"
                ],
                [
                  "dest",
                  "MultiLocationV2"
                ],
                [
                  "xcm",
                  "XcmV2"
                ]
              ]
            },
            "InstructionV2::ExchangeAsset": {
              "type": "struct",
              "type_mapping": [
                [
                  "give",
                  "MultiAssetFilterV2"
                ],
                [
                  "receive",
                  "MultiAssetsV2"
                ]
              ]
            },
            "InstructionV2::InitiateReserveWithdraw": {
              "type": "struct",
              "type_mapping": [
                [
                  "assets",
                  "MultiAssetFilterV2"
                ],
                [
                  "reserve",
                  "MultiLocationV2"
                ],
                [
                  "xcm",
                  "XcmV2"
                ]
              ]
            },
            "InstructionV2::InitiateTeleport": {
              "type": "struct",
              "type_mapping": [
                [
                  "assets",
                  "MultiAssetFilterV2"
                ],
                [
                  "dest",
                  "MultiLocationV2"
                ],
                [
                  "xcm",
                  "XcmV2"
                ]
              ]
            },
            "InstructionV2::QueryHolding": {
              "type": "struct",
              "type_mapping": [
                [
                  "queryId",
                  "Compact<u64>"
                ],
                [
                  "dest",
                  "MultiLocationV2"
                ],
                [
                  "assets",
                  "MultiAssetFilterV2"
                ],
                [
                  "maxResponseWeight",
                  "Compact<u64>"
                ]
              ]
            },
            "InstructionV2::BuyExecution": {
              "type": "struct",
              "type_mapping": [
                [
                  "fees",
                  "MultiAssetV2"
                ],
                [
                  "weightLimit",
                  "WeightLimitV2"
                ]
              ]
            },
            "InstructionV2::ClaimAsset": {
              "type": "struct",
              "type_mapping": [
                [
                  "assets",
                  "MultiAssetsV2"
                ],
                [
                  "ticket",
                  "MultiLocationV2"
                ]
              ]
            },
            "InstructionV2": {
              "type": "enum",
              "type_mapping": [
                [
                  "WithdrawAsset",
                  "MultiAssetsV2"
                ],
                [
                  "ReserveAssetDeposited",
                  "MultiAssetsV2"
                ],
                [
                  "ReceiveTeleportedAsset",
                  "MultiAssetsV2"
                ],
                [
                  "QueryResponse",
                  "InstructionV2::QueryResponse"
                ],
                [
                  "TransferAsset",
                  "InstructionV2::TransferAsset"
                ],
                [
                  "TransferReserveAsset",
                  "InstructionV2::TransferReserveAsset"
                ],
                [
                  "Transact",
                  "InstructionV2::Transact"
                ],
                [
                  "HrmpNewChannelOpenRequest",
                  "InstructionV2::HrmpNewChannelOpenRequest"
                ],
                [
                  "HrmpChannelAccepted",
                  "InstructionV2::HrmpChannelAccepted"
                ],
                [
                  "HrmpChannelClosing",
                  "InstructionV2::HrmpChannelClosing"
                ],
                [
                  "ClearOrigin",
                  "Null"
                ],
                [
                  "DescendOrigin",
                  "InteriorMultiLocation"
                ],
                [
                  "ReportError",
                  "InstructionV2::ReportError"
                ],
                [
                  "DepositAsset",
                  "InstructionV2::DepositAsset"
                ],
                [
                  "DepositReserveAsset",
                  "InstructionV2::DepositReserveAsset"
                ],
                [
                  "ExchangeAsset",
                  "InstructionV2::ExchangeAsset"
                ],
                [
                  "InitiateReserveWithdraw",
                  "InstructionV2::InitiateReserveWithdraw"
                ],
                [
                  "InitiateTeleport",
                  "InstructionV2::InitiateTeleport"
                ],
                [
                  "QueryHolding",
                  "InstructionV2::QueryHolding"
                ],
                [
                  "BuyExecution",
                  "InstructionV2::BuyExecution"
                ],
                [
                  "RefundSurplus",
                  "Null"
                ],
                [
                  "SetErrorHandler",
                  "XcmV2"
                ],
                [
                  "SetAppendix",
                  "XcmV2"
                ],
                [
                  "ClearError",
                  "Null"
                ],
                [
                  "ClaimAsset",
                   "InstructionV2::ClaimAsset"
                ],
                [
                  "Trap",
                  "u64"
                ]
              ]
            },
            "XcmV2": "Vec<InstructionV2>",
            "XcmErrorV2": {
              "type": "enum",
              "type_mapping": [
                [
                  "Undefined",
                  "Null"
                ],
                [
                  "Overflow",
                  "Null"
                ],
                [
                  "Unimplemented",
                  "Null"
                ],
                [
                  "UnhandledXcmVersion",
                  "Null"
                ],
                [
                  "UnhandledXcmMessage",
                  "Null"
                ],
                [
                  "UnhandledEffect",
                  "Null"
                ],
                [
                  "EscalationOfPrivilege",
                  "Null"
                ],
                [
                  "UntrustedReserveLocation",
                  "Null"
                ],
                [
                  "UntrustedTeleportLocation",
                  "Null"
                ],
                [
                  "DestinationBufferOverflow",
                  "Null"
                ],
                [
                  "MultiLocationFull",
                  "Null"
                ],
                [
                  "MultiLocationNotInvertible",
                  "Null"
                ],
                [
                  "FailedToDecode",
                  "Null"
                ],
                [
                  "BadOrigin",
                  "Null"
                ],
                [
                  "ExceedsMaxMessageSize",
                  "Null"
                ],
                [
                  "FailedToTransactAsset",
                  "Null"
                ],
                [
                  "WeightLimitReached",
                  "Weight"
                ],
                [
                  "Wildcard",
                  "Null"
                ],
                [
                  "TooMuchWeightRequired",
                  "Null"
                ],
                [
                  "NotHoldingFees",
                  "Null"
                ],
                [
                  "WeightNotComputable",
                  "Null"
                ],
                [
                  "Barrier",
                  "Null"
                ],
                [
                  "NotWithdrawable",
                  "Null"
                ],
                [
                  "LocationCannotHold",
                  "Null"
                ],
                [
                  "TooExpensive",
                  "Null"
                ],
                [
                  "AssetNotFound",
                  "Null"
                ],
                [
                  "DestinationUnsupported",
                  "Null"
                ],
                [
                  "RecursionLimitReached",
                  "Null"
                ],
                [
                  "Transport",
                  "Null"
                ],
                [
                  "Unroutable",
                  "Null"
                ],
                [
                  "UnknownWeightRequired",
                  "Null"
                ],
                [
                  "Trap",
                  "u64"
                ],
                [
                  "UnknownClaim",
                  "Null"
                ],
                [
                  "InvalidLocation",
                  "Null"
                ]
              ]
            },
            "DoubleEncodedCall": {
              "type": "struct",
              "type_mapping": [
                [
                  "encoded",
                  "Vec<u8>"
                ]
              ]
            },
            "XcmOriginKind": {
              "type": "enum",
              "value_list": [
                "Native",
                "SovereignAccount",
                "Superuser",
                "Xcm"
              ]
            },
            "Response": "ResponseV1",
            "AuthorityId": "AccountId",
            "RawVRFOutput": "[u8; 32]",
            "BlockAttestations": {
              "type": "struct",
              "type_mapping": [
                [
                  "receipt",
                  "CandidateReceipt"
                ],
                [
                  "valid",
                  "Vec<AccountId>"
                ],
                [
                  "invalid",
                  "Vec<AccountId>"
                ]
              ]
            },
            "IncludedBlocks": {
              "type": "struct",
              "type_mapping": [
                [
                  "actual_number",
                  "BlockNumber"
                ],
                [
                  "session",
                  "SessionIndex"
                ],
                [
                  "random_seed",
                  "H256"
                ],
                [
                  "active_parachains",
                  "Vec<ParaId>"
                ],
                [
                  "para_blocks",
                  "Vec<Hash>"
                ]
              ]
            },
            "HeartbeatTo244": {
              "type": "struct",
              "type_mapping": [
                [
                  "block_number",
                  "BlockNumber"
                ],
                [
                  "network_state",
                  "OpaqueNetworkState"
                ],
                [
                  "session_index",
                  "SessionIndex"
                ],
                [
                  "authority_index",
                  "AuthIndex"
                ]
              ]
            },
            "OpaqueMultiaddr": "Bytes",
            "OpaquePeerId": "Bytes",
            "OpaqueNetworkState": {
              "type": "struct",
              "type_mapping": [
                [
                  "peer_id",
                  "OpaquePeerId"
                ],
                [
                  "external_addresses",
                  "Vec<OpaqueMultiaddr>"
                ]
              ]
            },
            "ProposalIndex": "u32",
            "VotesTo230": {
              "type": "struct",
              "type_mapping": [
                [
                  "index",
                  "ProposalIndex"
                ],
                [
                  "threshold",
                  "MemberCount"
                ],
                [
                  "ayes",
                  "Vec<AccountId>"
                ],
                [
                  "nays",
                  "Vec<AccountId>"
                ]
              ]
            },
            "Votes": {
              "type": "struct",
              "type_mapping": [
                [
                  "index",
                  "ProposalIndex"
                ],
                [
                  "threshold",
                  "MemberCount"
                ],
                [
                  "ayes",
                  "Vec<AccountId>"
                ],
                [
                  "nays",
                  "Vec<AccountId>"
                ],
                [
                  "end",
                  "BlockNumber"
                ]
              ]
            },
            "FeeDetails": {
              "type": "struct",
              "type_mapping": [
                [
                  "inclusion_fee",
                  "Option<InclusionFee>"
                ]
              ]
            },
            "InclusionFee": {
              "type": "struct",
              "type_mapping": [
                [
                  "base_fee",
                  "Balance"
                ],
                [
                  "len_fee",
                  "Balance"
                ],
                [
                  "adjusted_weight_fee",
                  "Balance"
                ]
              ]
            },
            "RuntimeDispatchInfo": {
              "type": "struct",
              "type_mapping": [
                [
                  "weight",
                  "Weight"
                ],
                [
                  "class",
                  "DispatchClass"
                ],
                [
                  "partial_fee",
                  "Balance"
                ]
              ]
            },
            "AliveContractInfo": {
              "type": "struct",
              "type_mapping": [
                [
                  "trie_id",
                  "TrieId"
                ],
                [
                  "storage_size",
                  "u32"
                ],
                [
                  "pair_count",
                  "u32"
                ],
                [
                  "code_hash",
                  "CodeHash"
                ],
                [
                  "rent_allowance",
                  "Balance"
                ],
                [
                  "rent_paid",
                  "Balance"
                ],
                [
                  "deduct_block",
                  "BlockNumber"
                ],
                [
                  "last_write",
                  "Option<BlockNumber>"
                ],
                [
                  "_reserved",
                  "Option<Null>"
                ]
              ]
            },
            "RawAliveContractInfo": "AliveContractInfo",
            "RawContractInfo": {
              "type": "struct",
              "type_mapping": [
                [
                  "trie_id",
                  "TrieId"
                ],
                [
                  "code_hash",
                  "CodeHash"
                ],
                [
                  "_reserved",
                  "Option<Null>"
                ]
              ]
            },
            "ContractInfo": "RawContractInfo",
            "CodeHash": "Hash",
            "ContractCallRequest": {
              "type": "struct",
              "type_mapping": [
                [
                  "origin",
                  "AccountId"
                ],
                [
                  "dest",
                  "AccountId"
                ],
                [
                  "value",
                  "Balance"
                ],
                [
                  "gas_limit",
                  "u64"
                ],
                [
                  "input_data",
                  "Bytes"
                ]
              ]
            },
            "ContractExecResultSuccessTo260": {
              "type": "struct",
              "type_mapping": [
                [
                  "flags",
                  "u32"
                ],
                [
                  "data",
                  "Bytes"
                ],
                [
                  "gas_consumed",
                  "u64"
                ]
              ]
            },
            "ContractExecResultTo260": {
              "type": "enum",
              "base_class": "GenericContractExecResult",
              "type_mapping": [
                [
                  "Success",
                  "ContractExecResultSuccessTo260"
                ],
                [
                  "Error",
                  "Null"
                ]
              ]
            },
            "ContractExecResultTo267": {
              "type": "struct",
              "type_mapping": [
                [
                  "gas_consumed",
                  "u64"
                ],
                [
                  "debug_message",
                  "Text"
                ],
                [
                  "result",
                  "ContractExecResultResult"
                ]
              ]
            },
            "ContractExecResultFrom268": {
              "type": "struct",
              "type_mapping": [
                [
                  "gas_consumed",
                  "u64"
                ],
                [
                  "gas_required",
                  "u64"
                ],
                [
                  "debug_message",
                  "Text"
                ],
                [
                  "result",
                  "ContractExecResultResult"
                ]
              ]
            },
            "ContractExecResultErrModule": {
              "type": "struct",
              "type_mapping": [
                [
                  "index",
                  "u8"
                ],
                [
                  "error",
                  "u8"
                ],
                [
                  "message",
                  "Option<Text>"
                ]
              ]
            },
            "ContractExecResultErr": {
              "type": "enum",
              "type_mapping": [
                [
                  "Other",
                  "Text"
                ],
                [
                  "CannotLookup",
                  "Null"
                ],
                [
                  "BadOrigin",
                  "Null"
                ],
                [
                  "Module",
                  "ContractExecResultErrModule"
                ]
              ]
            },
            "ContractExecResultOk": {
              "type": "struct",
              "type_mapping": [
                [
                  "flags",
                  "u32"
                ],
                [
                  "data",
                  "Bytes"
                ]
              ]
            },
            "ContractExecResultResult": {
              "type": "enum",
              "type_mapping": [
                [
                  "Ok",
                  "ContractExecResultOk"
                ],
                [
                  "Err",
                  "ContractExecResultErr"
                ]
              ]
            },
            "ContractExecResult": "ContractExecResultTo260",
            "ContractStorageKey": "[u8; 32]",
            "exec::StorageKey": "ContractStorageKey",
            "DeletedContract": {
              "type": "struct",
              "type_mapping": [
                [
                  "pair_count",
                  "u32"
                ],
                [
                  "trie_id",
                  "TrieId"
                ]
              ]
            },
            "ExecReturnValue": {
              "type": "struct",
              "type_mapping": [
                [
                  "flags",
                  "u32"
                ],
                [
                  "data",
                  "Bytes"
                ]
              ]
            },
            "HostFnWeights": {
              "type": "struct",
              "type_mapping": [
                [
                  "caller",
                  "Weight"
                ],
                [
                  "address",
                  "Weight"
                ],
                [
                  "gas_left",
                  "Weight"
                ],
                [
                  "balance",
                  "Weight"
                ],
                [
                  "value_transferred",
                  "Weight"
                ],
                [
                  "minimum_balance",
                  "Weight"
                ],
                [
                  "tombstone_deposit",
                  "Weight"
                ],
                [
                  "rent_allowance",
                  "Weight"
                ],
                [
                  "block_number",
                  "Weight"
                ],
                [
                  "now",
                  "Weight"
                ],
                [
                  "weight_to_fee",
                  "Weight"
                ],
                [
                  "gas",
                  "Weight"
                ],
                [
                  "input",
                  "Weight"
                ],
                [
                  "input_per_byte",
                  "Weight"
                ],
                [
                  "return",
                  "Weight"
                ],
                [
                  "return_per_byte",
                  "Weight"
                ],
                [
                  "terminate",
                  "Weight"
                ],
                [
                  "restore_to",
                  "Weight"
                ],
                [
                  "restore_to_per_delta",
                  "Weight"
                ],
                [
                  "random",
                  "Weight"
                ],
                [
                  "deposit_event",
                  "Weight"
                ],
                [
                  "deposit_event_per_topic",
                  "Weight"
                ],
                [
                  "deposit_event_per_byte",
                  "Weight"
                ],
                [
                  "set_rent_allowance",
                  "Weight"
                ],
                [
                  "set_storage",
                  "Weight"
                ],
                [
                  "set_storage_per_byte",
                  "Weight"
                ],
                [
                  "clear_storage",
                  "Weight"
                ],
                [
                  "get_storage",
                  "Weight"
                ],
                [
                  "get_storage_per_byte",
                  "Weight"
                ],
                [
                  "transfer",
                  "Weight"
                ],
                [
                  "call",
                  "Weight"
                ],
                [
                  "call_transfer_surcharge",
                  "Weight"
                ],
                [
                  "call_per_input_byte",
                  "Weight"
                ],
                [
                  "call_per_output_byte",
                  "Weight"
                ],
                [
                  "instantiate",
                  "Weight"
                ],
                [
                  "instantiate_per_input_byte",
                  "Weight"
                ],
                [
                  "instantiate_per_output_byte",
                  "Weight"
                ],
                [
                  "instantiate_per_salt_byte",
                  "Weight"
                ],
                [
                  "hash_sha2256",
                  "Weight"
                ],
                [
                  "hash_sha2256_per_byte",
                  "Weight"
                ],
                [
                  "hash_keccak256",
                  "Weight"
                ],
                [
                  "hash_keccak256_per_byte",
                  "Weight"
                ],
                [
                  "hash_blake2256",
                  "Weight"
                ],
                [
                  "hash_blake2256_per_byte",
                  "Weight"
                ],
                [
                  "hash_blake2128",
                  "Weight"
                ],
                [
                  "hash_blake2128_per_byte",
                  "Weight"
                ],
                [
                  "rent_params",
                  "Weight"
                ]
              ]
            },
            "InstantiateRequest": {
              "type": "struct",
              "type_mapping": [
                [
                  "origin",
                  "AccountId"
                ],
                [
                  "endowment",
                  "Balance"
                ],
                [
                  "gas_limit",
                  "Gas"
                ],
                [
                  "code",
                  "Bytes"
                ],
                [
                  "data",
                  "Bytes"
                ],
                [
                  "salt",
                  "Bytes"
                ]
              ]
            },
            "ContractInstantiateResult": {
              "type": "enum",
              "type_mapping": [
                [
                  "Ok",
                  "InstantiateReturnValue"
                ],
                [
                  "Err",
                  "Null"
                ]
              ]
            },
            "InstantiateReturnValue": {
              "type": "struct",
              "type_mapping": [
                [
                  "result",
                  "ExecReturnValue"
                ],
                [
                  "account_id",
                  "AccountId"
                ],
                [
                  "rent_projection",
                  "Option<RentProjection>"
                ]
              ]
            },
            "InstructionWeights": {
              "type": "struct",
              "type_mapping": [
                [
                  "i64const",
                  "u32"
                ],
                [
                  "i64load",
                  "u32"
                ],
                [
                  "i64store",
                  "u32"
                ],
                [
                  "select",
                  "u32"
                ],
                [
                  "r_if",
                  "u32"
                ],
                [
                  "br",
                  "u32"
                ],
                [
                  "br_if",
                  "u32"
                ],
                [
                  "br_iable",
                  "u32"
                ],
                [
                  "br_iable_per_entry",
                  "u32"
                ],
                [
                  "call",
                  "u32"
                ],
                [
                  "call_indirect",
                  "u32"
                ],
                [
                  "call_indirect_per_param",
                  "u32"
                ],
                [
                  "local_get",
                  "u32"
                ],
                [
                  "local_set",
                  "u32"
                ],
                [
                  "local_tee",
                  "u32"
                ],
                [
                  "global_get",
                  "u32"
                ],
                [
                  "global_set",
                  "u32"
                ],
                [
                  "memory_current",
                  "u32"
                ],
                [
                  "memory_grow",
                  "u32"
                ],
                [
                  "i64clz",
                  "u32"
                ],
                [
                  "i64ctz",
                  "u32"
                ],
                [
                  "i64popcnt",
                  "u32"
                ],
                [
                  "i64eqz",
                  "u32"
                ],
                [
                  "i64extendsi32",
                  "u32"
                ],
                [
                  "i64extendui32",
                  "u32"
                ],
                [
                  "i32wrapi64",
                  "u32"
                ],
                [
                  "i64eq",
                  "u32"
                ],
                [
                  "i64ne",
                  "u32"
                ],
                [
                  "i64lts",
                  "u32"
                ],
                [
                  "i64ltu",
                  "u32"
                ],
                [
                  "i64gts",
                  "u32"
                ],
                [
                  "i64gtu",
                  "u32"
                ],
                [
                  "i64les",
                  "u32"
                ],
                [
                  "i64leu",
                  "u32"
                ],
                [
                  "i64ges",
                  "u32"
                ],
                [
                  "i64geu",
                  "u32"
                ],
                [
                  "i64add",
                  "u32"
                ],
                [
                  "i64sub",
                  "u32"
                ],
                [
                  "i64mul",
                  "u32"
                ],
                [
                  "i64divs",
                  "u32"
                ],
                [
                  "i64divu",
                  "u32"
                ],
                [
                  "i64rems",
                  "u32"
                ],
                [
                  "i64remu",
                  "u32"
                ],
                [
                  "i64and",
                  "u32"
                ],
                [
                  "i64or",
                  "u32"
                ],
                [
                  "i64xor",
                  "u32"
                ],
                [
                  "i64shl",
                  "u32"
                ],
                [
                  "i64shrs",
                  "u32"
                ],
                [
                  "i64shru",
                  "u32"
                ],
                [
                  "i64rotl",
                  "u32"
                ],
                [
                  "i64rotr",
                  "u32"
                ]
              ]
            },
            "Limits": {
              "type": "struct",
              "type_mapping": [
                [
                  "event_topics",
                  "u32"
                ],
                [
                  "stack_height",
                  "u32"
                ],
                [
                  "globals",
                  "u32"
                ],
                [
                  "parameters",
                  "u32"
                ],
                [
                  "memory_pages",
                  "u32"
                ],
                [
                  "table_size",
                  "u32"
                ],
                [
                  "br_table_size",
                  "u32"
                ],
                [
                  "subject_len",
                  "u32"
                ],
                [
                  "code_size",
                  "u32"
                ]
              ]
            },
            "PrefabWasmModule": {
              "type": "struct",
              "type_mapping": [
                [
                  "schedule_version",
                  "Compact<u32>"
                ],
                [
                  "initial",
                  "Compact<u32>"
                ],
                [
                  "maximum",
                  "Compact<u32>"
                ],
                [
                  "refcount",
                  "Compact<u64>"
                ],
                [
                  "_reserved",
                  "Option<Null>"
                ],
                [
                  "code",
                  "Bytes"
                ],
                [
                  "original_code_len",
                  "u32"
                ]
              ]
            },
            "RentProjection": {
              "type": "enum",
              "type_mapping": [
                [
                  "EvictionAt",
                  "BlockNumber"
                ],
                [
                  "NoEviction",
                  "Null"
                ]
              ]
            },
            "ScheduleTo212": {
              "type": "struct",
              "type_mapping": [
                [
                  "version",
                  "u32"
                ],
                [
                  "put_code_per_byte_cost",
                  "Gas"
                ],
                [
                  "grow_mem_cost",
                  "Gas"
                ],
                [
                  "regular_op_cost",
                  "Gas"
                ],
                [
                  "return_data_per_byte_cost",
                  "Gas"
                ],
                [
                  "event_data_per_byte_cost",
                  "Gas"
                ],
                [
                  "event_per_topic_cost",
                  "Gas"
                ],
                [
                  "event_base_cost",
                  "Gas"
                ],
                [
                  "sandbox_data_read_cost",
                  "Gas"
                ],
                [
                  "sandbox_data_write_cost",
                  "Gas"
                ],
                [
                  "max_event_topics",
                  "u32"
                ],
                [
                  "max_stack_height",
                  "u32"
                ],
                [
                  "max_memory_pages",
                  "u32"
                ],
                [
                  "enable_println",
                  "bool"
                ],
                [
                  "max_subject_len",
                  "u32"
                ]
              ]
            },
            "SeedOf": "Hash",
            "TombstoneContractInfo": "Hash",
            "ExtrinsicOrHash": {
              "type": "enum",
              "type_mapping": [
                [
                  "Hash",
                  "Hash"
                ],
                [
                  "Extrinsic",
                  "Bytes"
                ]
              ]
            },
            "ExtrinsicStatus": {
              "type": "enum",
              "type_mapping": [
                [
                  "Future",
                  "Null"
                ],
                [
                  "Ready",
                  "Null"
                ],
                [
                  "Broadcast",
                  "Vec<Text>"
                ],
                [
                  "InBlock",
                  "Hash"
                ],
                [
                  "Retracted",
                  "Hash"
                ],
                [
                  "FinalityTimeout",
                  "Hash"
                ],
                [
                  "Finalized",
                  "Hash"
                ],
                [
                  "Usurped",
                  "Hash"
                ],
                [
                  "Dropped",
                  "Null"
                ],
                [
                  "Invalid",
                  "Null"
                ]
              ]
            },
            "StorageKey": "Bytes",
            "PrefixedStorageKey": "StorageKey",
            "AccountIndex": "GenericAccountIndex",
            "Address": "MultiAddress",
            "AssetId": "u32",
            "Justification": "(ConsensusEngineId, EncodedJustification)",
            "EncodedJustification": "Bytes",
            "Justifications": "Vec<Justification>",
            "Slot": "u64",
            "StorageData": "Bytes",
            "StorageProof": {
              "type": "struct",
              "type_mapping": [
                [
                  "trie_nodes",
                  "Vec<Bytes>"
                ]
              ]
            },
            "KeyValue": "(StorageKey, StorageData)",
            "KeyTypeId": "u32",
            "LookupSource": "AccountId",
            "LookupTarget": "AccountId",
            "Perbill": "u32",
            "Permill": "u32",
            "Perquintill": "u64",
            "Phantom": "Null",
            "SignedBlockWithJustification": {
              "type": "struct",
              "type_mapping": [
                [
                  "block",
                  "Block"
                ],
                [
                  "justification",
                  "Option<EncodedJustification>"
                ]
              ]
            },
            "SignedBlockWithJustifications": {
              "type": "struct",
              "type_mapping": [
                [
                  "block",
                  "Block"
                ],
                [
                  "justifications",
                  "Option<Justifications>"
                ]
              ]
            },
            "SignedBlock": "SignedBlockWithJustifications",
            "ValidatorId": "AccountId",
            "ValidatorIdOf": "ValidatorId",
            "ValidatorSetId": "u64",
            "PreRuntime": "GenericPreRuntime",
            "SealV0": "GenericSealV0",
            "Seal": "GenericSeal",
            "Consensus": "GenericConsensus",
            "Period": "(BlockNumber, u32)",
            "Priority": "u8",
            "SchedulePeriod": "Period",
            "SchedulePriority": "Priority",
            "Scheduled": {
              "type": "struct",
              "type_mapping": [
                [
                  "maybe_id",
                  "Option<Bytes>"
                ],
                [
                  "priority",
                  "SchedulePriority"
                ],
                [
                  "call",
                  "Call"
                ],
                [
                  "maybe_periodic",
                  "Option<SchedulePeriod>"
                ],
                [
                  "origin",
                  "PalletsOrigin"
                ]
              ]
            },
            "ScheduledTo254": {
              "type": "struct",
              "type_mapping": [
                [
                  "maybe_id",
                  "Option<Bytes>"
                ],
                [
                  "priority",
                  "SchedulePriority"
                ],
                [
                  "call",
                  "Call"
                ],
                [
                  "maybe_periodic",
                  "Option<SchedulePeriod>"
                ]
              ]
            },
            "SocietyJudgement": {
              "type": "enum",
              "value_list": [
                "Rebid",
                "Reject",
                "Approve"
              ]
            },
            "SocietyVote": {
              "type": "enum",
              "value_list": [
                "Skeptic",
                "Reject",
                "Approve"
              ]
            },
            "UncleEntryItem": {
              "type": "enum",
              "type_mapping": [
                [
                  "InclusionHeight",
                  "BlockNumber"
                ],
                [
                  "Uncle",
                  "(Hash, Option<AccountId>)"
                ]
              ]
            },
            "ApiId": "[u8; 8]",
            "BlockTrace": {
              "type": "struct",
              "type_mapping": [
                [
                  "block_hash",
                  "Text"
                ],
                [
                  "parent_hash",
                  "Text"
                ],
                [
                  "tracing_targets",
                  "Text"
                ],
                [
                  "storage_keys",
                  "Text"
                ],
                [
                  "spans",
                  "Vec<BlockTraceSpan>"
                ],
                [
                  "events",
                  "Vec<BlockTraceEvent>"
                ]
              ]
            },
            "BlockTraceEvent": {
              "type": "struct",
              "type_mapping": [
                [
                  "target",
                  "Text"
                ],
                [
                  "data",
                  "BlockTraceEventData"
                ],
                [
                  "parent_id",
                  "Option<u64>"
                ]
              ]
            },
            "BlockTraceEventData": {
              "type": "struct",
              "type_mapping": [
                [
                  "string_values",
                  "HashMap<Text, Text>"
                ]
              ]
            },
            "BlockTraceSpan": {
              "type": "struct",
              "type_mapping": [
                [
                  "id",
                  "u64"
                ],
                [
                  "parent_id",
                  "Option<u64>"
                ],
                [
                  "name",
                  "Text"
                ],
                [
                  "target",
                  "Text"
                ],
                [
                  "wasm",
                  "bool"
                ]
              ]
            },
            "KeyValueOption": "(StorageKey, Option<StorageData>)",
            "ReadProof": {
              "type": "struct",
              "type_mapping": [
                [
                  "at",
                  "Hash"
                ],
                [
                  "proof",
                  "Vec<Bytes>"
                ]
              ]
            },
            "RuntimeVersionApi": "(ApiId, u32)",
            "RuntimeVersion": {
              "type": "struct",
              "type_mapping": [
                [
                  "spec_name",
                  "Text"
                ],
                [
                  "impl_name",
                  "Text"
                ],
                [
                  "authoring_version",
                  "u32"
                ],
                [
                  "spec_version",
                  "u32"
                ],
                [
                  "impl_version",
                  "u32"
                ],
                [
                  "apis",
                  "Vec<RuntimeVersionApi>"
                ],
                [
                  "transaction_version",
                  "u32"
                ]
              ]
            },
            "RuntimeVersionPartial": {
              "type": "struct",
              "type_mapping": [
                [
                  "spec_name",
                  "Text"
                ],
                [
                  "spec_version",
                  "u32"
                ]
              ]
            },
            "StorageChangeSet": {
              "type": "struct",
              "type_mapping": [
                [
                  "block",
                  "Hash"
                ],
                [
                  "changes",
                  "Vec<KeyValueOption>"
                ]
              ]
            },
            "TraceBlockResponse": {
              "type": "enum",
              "type_mapping": [
                [
                  "TraceError",
                  "TraceError"
                ],
                [
                  "BlockTrace",
                  "BlockTrace"
                ]
              ]
            },
            "TraceError": {
              "type": "struct",
              "type_mapping": [
                [
                  "error",
                  "Text"
                ]
              ]
            },
            "LaneId": "[u8; 4]",
            "MessageData": {
              "type": "struct",
              "type_mapping": [
                [
                  "payload",
                  "Bytes"
                ],
                [
                  "fee",
                  "Balance"
                ]
              ]
            },
            "MessagesDeliveryProofOf": {
              "type": "struct",
              "type_mapping": [
                [
                  "bridged_header_hash",
                  "BlockHash"
                ],
                [
                  "storage_proof",
                  "Vec<Bytes>"
                ],
                [
                  "lane",
                  "LaneId"
                ]
              ]
            },
            "MessageKey": {
              "type": "struct",
              "type_mapping": [
                [
                  "lane_id",
                  "LaneId"
                ],
                [
                  "nonce",
                  "MessageNonce"
                ]
              ]
            },
            "MessageNonce": "u64",
            "MessagesProofOf": {
              "type": "struct",
              "type_mapping": [
                [
                  "bridged_header_hash",
                  "BridgedBlockHash"
                ],
                [
                  "storage_proof",
                  "Vec<Bytes>"
                ],
                [
                  "lane",
                  "LaneId"
                ],
                [
                  "nonces_start",
                  "MessageNonce"
                ],
                [
                  "nonces_end",
                  "MessageNonce"
                ]
              ]
            },
            "OperatingMode": {
              "type": "enum",
              "value_list": [
                "Normal",
                "RejectingOutboundMessages",
                "Halted"
              ]
            },
            "OutboundLaneData": {
              "type": "struct",
              "type_mapping": [
                [
                  "latest_generated_nonce",
                  "MessageNonce"
                ],
                [
                  "latest_received_nonce",
                  "MessageNonce"
                ],
                [
                  "oldest_unpruned_nonce",
                  "MessageNonce"
                ]
              ]
            },
            "OutboundMessageFee": "Balance",
            "OutboundPayload": {
              "type": "struct",
              "type_mapping": [
                [
                  "spec_version",
                  "u32"
                ],
                [
                  "weight",
                  "Weight"
                ],
                [
                  "origin",
                  "CallOrigin"
                ],
                [
                  "dispatch_fee_payment",
                  "DispatchFeePayment"
                ],
                [
                  "call",
                  "Bytes"
                ]
              ]
            },
            "Parameter": "Null",
            "RelayerId": "AccountId",
            "UnrewardedRelayer": {
              "type": "struct",
              "type_mapping": [
                [
                  "relayer",
                  "RelayerId"
                ],
                [
                  "messages",
                  "DeliveredMessages"
                ]
              ]
            },
            "UnrewardedRelayersState": {
              "type": "struct",
              "type_mapping": [
                [
                  "unrewarded_relayer_entries",
                  "MessageNonce"
                ],
                [
                  "messages_in_oldest_entry",
                  "MessageNonce"
                ],
                [
                  "total_messages",
                  "MessageNonce"
                ]
              ]
            },
            "FundIndex": "u32",
            "LastContribution": {
              "type": "enum",
              "type_mapping": [
                [
                  "Never",
                  "Null"
                ],
                [
                  "PreEnding",
                  "u32"
                ],
                [
                  "Ending",
                  "BlockNumber"
                ]
              ]
            },
            "FundInfo": {
              "type": "struct",
              "type_mapping": [
                [
                  "depositor",
                  "AccountId"
                ],
                [
                  "verifier",
                  "Option<MultiSigner>"
                ],
                [
                  "deposit",
                  "Balance"
                ],
                [
                  "raised",
                  "Balance"
                ],
                [
                  "end",
                  "BlockNumber"
                ],
                [
                  "cap",
                  "Balance"
                ],
                [
                  "last_contribution",
                  "LastContribution"
                ],
                [
                  "first_period",
                  "LeasePeriod"
                ],
                [
                  "last_period",
                  "LeasePeriod"
                ],
                [
                  "trie_index",
                  "TrieIndex"
                ]
              ]
            },
            "TrieIndex": "u32",
            "GrandpaEquivocationProof": {
              "type": "struct",
              "type_mapping": [
                [
                  "set_id",
                  "SetId"
                ],
                [
                  "equivocation",
                  "GrandpaEquivocation"
                ]
              ]
            },
            "GrandpaEquivocationValue": {
              "type": "struct",
              "type_mapping": [
                [
                  "round_number",
                  "u64"
                ],
                [
                  "identity",
                  "AuthorityId"
                ],
                [
                  "first",
                  "(GrandpaPrevote, AuthoritySignature)"
                ],
                [
                  "second",
                  "(GrandpaPrevote, AuthoritySignature)"
                ]
              ]
            },
            "PendingChange": {
              "type": "struct",
              "type_mapping": [
                [
                  "next_authorities",
                  "AuthorityList"
                ],
                [
                  "delay",
                  "BlockNumber"
                ],
                [
                  "canon_height",
                  "BlockNumber"
                ],
                [
                  "canon_hash",
                  "BlockHash"
                ],
                [
                  "delay_kind",
                  "DelayKind"
                ]
              ]
            },
            "PendingPause": {
              "type": "struct",
              "type_mapping": [
                [
                  "scheduled_at",
                  "BlockNumber"
                ],
                [
                  "delay",
                  "BlockNumber"
                ]
              ]
            },
            "PendingResume": {
              "type": "struct",
              "type_mapping": [
                [
                  "scheduled_at",
                  "BlockNumber"
                ],
                [
                  "delay",
                  "BlockNumber"
                ]
              ]
            },
            "BTreeSet<AuthorityId>": "Vec<AuthorityId>",
            "Precommits": {
              "type": "struct",
              "type_mapping": [
                [
                  "current_weight",
                  "u32"
                ],
                [
                  "missing",
                  "BTreeSet<AuthorityId>"
                ]
              ]
            },
            "Prevotes": {
              "type": "struct",
              "type_mapping": [
                [
                  "current_weight",
                  "u32"
                ],
                [
                  "missing",
                  "BTreeSet<AuthorityId>"
                ]
              ]
            },
            "ReportedRoundStates": {
              "type": "struct",
              "type_mapping": [
                [
                  "set_id",
                  "u32"
                ],
                [
                  "best",
                  "RoundState"
                ],
                [
                  "background",
                  "Vec<RoundState>"
                ]
              ]
            },
            "RoundState": {
              "type": "struct",
              "type_mapping": [
                [
                  "round",
                  "u32"
                ],
                [
                  "total_weight",
                  "u32"
                ],
                [
                  "threshold_weight",
                  "u32"
                ],
                [
                  "prevotes",
                  "Prevotes"
                ],
                [
                  "precommits",
                  "Precommits"
                ]
              ]
            },
            "StoredPendingChange": {
              "type": "struct",
              "type_mapping": [
                [
                  "scheduled_at",
                  "BlockNumber"
                ],
                [
                  "delay",
                  "BlockNumber"
                ],
                [
                  "next_authorities",
                  "AuthorityList"
                ]
              ]
            },
            "StoredState": {
              "type": "enum",
              "type_mapping": [
                [
                  "Live",
                  "Null"
                ],
                [
                  "PendingPause",
                  "PendingPause"
                ],
                [
                  "Paused",
                  "Null"
                ],
                [
                  "PendingResume",
                  "PendingResume"
                ]
              ]
            },
            "AccountInfoWithRefCountU8": {
              "type": "struct",
              "type_mapping": [
                [
                  "nonce",
                  "Index"
                ],
                [
                  "refcount",
                  "u8"
                ],
                [
                  "data",
                  "AccountData"
                ]
              ]
            },
            "AccountInfoWithRefCount": {
              "type": "struct",
              "type_mapping": [
                [
                  "nonce",
                  "Index"
                ],
                [
                  "refcount",
                  "RefCount"
                ],
                [
                  "data",
                  "AccountData"
                ]
              ]
            },
            "AccountInfoWithDualRefCount": {
              "type": "struct",
              "type_mapping": [
                [
                  "nonce",
                  "Index"
                ],
                [
                  "consumers",
                  "RefCount"
                ],
                [
                  "providers",
                  "RefCount"
                ],
                [
                  "data",
                  "AccountData"
                ]
              ]
            },
            "AccountInfoWithProviders": "AccountInfoWithDualRefCount",
            "AccountInfoWithTripleRefCount": {
              "type": "struct",
              "type_mapping": [
                [
                  "nonce",
                  "Index"
                ],
                [
                  "consumers",
                  "RefCount"
                ],
                [
                  "providers",
                  "RefCount"
                ],
                [
                  "sufficients",
                  "RefCount"
                ],
                [
                  "data",
                  "AccountData"
                ]
              ]
            },
            "AccountInfo": "AccountInfoWithTripleRefCount",
            "BlockWeights": {
              "type": "struct",
              "type_mapping": [
                [
                  "base_block",
                  "Weight"
                ],
                [
                  "max_block",
                  "Weight"
                ],
                [
                  "per_class",
                  "PerDispatchClass"
                ]
              ]
            },
            "ChainProperties": {
              "type": "struct",
              "type_mapping": [
                [
                  "ss58_format",
                  "Option<u8>"
                ],
                [
                  "token_decimals",
                  "Option<u32>"
                ],
                [
                  "token_symbol",
                  "Option<Text>"
                ]
              ]
            },
            "ChainType": {
              "type": "enum",
              "type_mapping": [
                [
                  "Development",
                  "Null"
                ],
                [
                  "Local",
                  "Null"
                ],
                [
                  "Live",
                  "Null"
                ],
                [
                  "Custom",
                  "Text"
                ]
              ]
            },
            "DispatchErrorTo198": {
              "type": "struct",
              "type_mapping": [
                [
                  "module",
                  "Option<u8>"
                ],
                [
                  "error",
                  "u8"
                ]
              ]
            },
            "DispatchInfoTo190": {
              "type": "struct",
              "type_mapping": [
                [
                  "weight",
                  "Weight"
                ],
                [
                  "class",
                  "DispatchClass"
                ]
              ]
            },
            "DispatchInfoTo244": {
              "type": "struct",
              "type_mapping": [
                [
                  "weight",
                  "Weight"
                ],
                [
                  "class",
                  "DispatchClass"
                ],
                [
                  "pays_fee",
                  "bool"
                ]
              ]
            },
            "DispatchResultOf": "DispatchResult",
            "Event": "GenericEvent",
            "EventId": "[u8; 2]",
            "EventRecord": {
              "type": "struct",
              "base_class": "GenericEventRecord",
              "type_mapping": [
                [
                  "phase",
                  "Phase"
                ],
                [
                  "event",
                  "Event"
                ],
                [
                  "topics",
                  "Vec<Hash>"
                ]
              ]
            },
            "EventRecordTo76": {
              "type": "struct",
              "type_mapping": [
                [
                  "phase",
                  "Phase"
                ],
                [
                  "event",
                  "Event"
                ]
              ]
            },
            "Health": {
              "type": "struct",
              "type_mapping": [
                [
                  "peers",
                  "u64"
                ],
                [
                  "is_syncing",
                  "bool"
                ],
                [
                  "should_have_peers",
                  "bool"
                ]
              ]
            },
            "InvalidTransaction": {
              "type": "enum",
              "type_mapping": [
                [
                  "Call",
                  "Null"
                ],
                [
                  "Payment",
                  "Null"
                ],
                [
                  "Future",
                  "Null"
                ],
                [
                  "Stale",
                  "Null"
                ],
                [
                  "BadProof",
                  "Null"
                ],
                [
                  "AncientBirthBlock",
                  "Null"
                ],
                [
                  "ExhaustsResources",
                  "Null"
                ],
                [
                  "Custom",
                  "u8"
                ],
                [
                  "BadMandatory",
                  "Null"
                ],
                [
                  "MandatoryDispatch",
                  "Null"
                ]
              ]
            },
            "Key": "Bytes",
            "TransactionValidityError": {
              "type": "enum",
              "type_mapping": [
                [
                  "Invalid",
                  "InvalidTransaction"
                ],
                [
                  "Unknown",
                  "UnknownTransaction"
                ]
              ]
            },
            "UnknownTransaction": {
              "type": "enum",
              "type_mapping": [
                [
                  "CannotLookup",
                  "Null"
                ],
                [
                  "NoUnsignedValidator",
                  "Null"
                ],
                [
                  "Custom",
                  "u8"
                ]
              ]
            },
            "WeightToFeeCoefficient": {
              "type": "struct",
              "type_mapping": [
                [
                  "coeff_integer",
                  "Balance"
                ],
                [
                  "coeff_frac",
                  "Perbill"
                ],
                [
                  "negative",
                  "bool"
                ],
                [
                  "degree",
                  "u8"
                ]
              ]
            },
            "EraPoints": {
              "type": "struct",
              "type_mapping": [
                [
                  "total",
                  "Points"
                ],
                [
                  "individual",
                  "Vec<Points>"
                ]
              ]
            },
            "CompactAssignmentsWith16": {
              "type": "struct",
              "type_mapping": [
                [
                  "votes1",
                  "Vec<(NominatorIndexCompact, ValidatorIndexCompact)>"
                ],
                [
                  "votes2",
                  "Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>"
                ],
                [
                  "votes3",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>"
                ],
                [
                  "votes4",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>"
                ],
                [
                  "votes5",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>"
                ],
                [
                  "votes6",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>"
                ],
                [
                  "votes7",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>"
                ],
                [
                  "votes8",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>"
                ],
                [
                  "votes9",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>"
                ],
                [
                  "votes10",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>"
                ],
                [
                  "votes11",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>"
                ],
                [
                  "votes12",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>"
                ],
                [
                  "votes13",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>"
                ],
                [
                  "votes14",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>"
                ],
                [
                  "votes15",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>"
                ],
                [
                  "votes16",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>"
                ]
              ]
            },
            "CompactAssignmentsWith24": {
              "type": "struct",
              "type_mapping": [
                [
                  "votes1",
                  "Vec<(NominatorIndexCompact, ValidatorIndexCompact)>"
                ],
                [
                  "votes2",
                  "Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>"
                ],
                [
                  "votes3",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>"
                ],
                [
                  "votes4",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>"
                ],
                [
                  "votes5",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>"
                ],
                [
                  "votes6",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>"
                ],
                [
                  "votes7",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>"
                ],
                [
                  "votes8",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>"
                ],
                [
                  "votes9",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>"
                ],
                [
                  "votes10",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>"
                ],
                [
                  "votes11",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>"
                ],
                [
                  "votes12",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>"
                ],
                [
                  "votes13",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>"
                ],
                [
                  "votes14",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>"
                ],
                [
                  "votes15",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>"
                ],
                [
                  "votes16",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>"
                ],
                [
                  "votes17",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 16], ValidatorIndexCompact)>"
                ],
                [
                  "votes18",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 17], ValidatorIndexCompact)>"
                ],
                [
                  "votes19",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 18], ValidatorIndexCompact)>"
                ],
                [
                  "votes20",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 19], ValidatorIndexCompact)>"
                ],
                [
                  "votes21",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 20], ValidatorIndexCompact)>"
                ],
                [
                  "votes22",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 21], ValidatorIndexCompact)>"
                ],
                [
                  "votes23",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 22], ValidatorIndexCompact)>"
                ],
                [
                  "votes24",
                  "Vec<(NominatorIndexCompact, [CompactScoreCompact; 23], ValidatorIndexCompact)>"
                ]
              ]
            },
            "CompactAssignments": "CompactAssignmentsWith24",
            "CompactAssignmentsTo265": "CompactAssignmentsWith16",
            "ElectionPhase": {
              "type": "enum",
              "type_mapping": [
                [
                  "Off",
                  "Null"
                ],
                [
                  "Signed",
                  "Null"
                ],
                [
                  "Unsigned",
                  "(bool, BlockNumber)"
                ],
                [
                  "Emergency",
                  "Null"
                ]
              ]
            },
            "RawSolutionWith24": {
              "type": "struct",
              "type_mapping": [
                [
                  "compact",
                  "CompactAssignmentsWith24"
                ],
                [
                  "score",
                  "ElectionScore"
                ],
                [
                  "round",
                  "u32"
                ]
              ]
            },
            "RawSolutionTo265": "RawSolutionWith16",
            "VoteWeight": "u64",
            "EraIndex": "u32",
            "EraRewards": {
              "type": "struct",
              "type_mapping": [
                [
                  "total",
                  "u32"
                ],
                [
                  "rewards",
                  "Vec<u32>"
                ]
              ]
            },
            "Exposure": {
              "type": "struct",
              "type_mapping": [
                [
                  "total",
                  "Compact<Balance>"
                ],
                [
                  "own",
                  "Compact<Balance>"
                ],
                [
                  "others",
                  "Vec<IndividualExposure>"
                ]
              ]
            },
            "IndividualExposure": {
              "type": "struct",
              "type_mapping": [
                [
                  "who",
                  "AccountId"
                ],
                [
                  "value",
                  "Compact<Balance>"
                ]
              ]
            },
            "KeyType": "AccountId",
            "Points": "u32",
            "SlashJournalEntry": {
              "type": "struct",
              "type_mapping": [
                [
                  "who",
                  "AccountId"
                ],
                [
                  "amount",
                  "Balance"
                ],
                [
                  "own_slash",
                  "Balance"
                ]
              ]
            },
            "SlashingSpansTo204": {
              "type": "struct",
              "type_mapping": [
                [
                  "span_index",
                  "SpanIndex"
                ],
                [
                  "last_start",
                  "EraIndex"
                ],
                [
                  "prior",
                  "Vec<EraIndex>"
                ]
              ]
            },
            "StakingLedgerTo223": {
              "type": "struct",
              "type_mapping": [
                [
                  "stash",
                  "AccountId"
                ],
                [
                  "total",
                  "Compact<Balance>"
                ],
                [
                  "active",
                  "Compact<Balance>"
                ],
                [
                  "unlocking",
                  "Vec<UnlockChunk>"
                ]
              ]
            },
            "StakingLedgerTo240": {
              "type": "struct",
              "type_mapping": [
                [
                  "stash",
                  "AccountId"
                ],
                [
                  "total",
                  "Compact<Balance>"
                ],
                [
                  "active",
                  "Compact<Balance>"
                ],
                [
                  "unlocking",
                  "Vec<UnlockChunk>"
                ],
                [
                  "last_reward",
                  "Option<EraIndex>"
                ]
              ]
            },
            "StakingLedger": {
              "type": "struct",
              "type_mapping": [
                [
                  "stash",
                  "AccountId"
                ],
                [
                  "total",
                  "Compact<Balance>"
                ],
                [
                  "active",
                  "Compact<Balance>"
                ],
                [
                  "unlocking",
                  "Vec<UnlockChunk>"
                ],
                [
                  "claimed_rewards",
                  "Vec<EraIndex>"
                ]
              ]
            },
            "UnappliedSlash": {
              "type": "struct",
              "type_mapping": [
                [
                  "validator",
                  "AccountId"
                ],
                [
                  "own",
                  "Balance"
                ],
                [
                  "others",
                  "Vec<UnappliedSlashOther>"
                ],
                [
                  "reporters",
                  "Vec<AccountId>"
                ],
                [
                  "payout",
                  "Balance"
                ]
              ]
            },
            "UnlockChunk": {
              "type": "struct",
              "type_mapping": [
                [
                  "value",
                  "Compact<Balance>"
                ],
                [
                  "era",
                  "Compact<BlockNumber>"
                ]
              ]
            },
            "ValidatorPrefsWithCommission": {
              "type": "struct",
              "type_mapping": [
                [
                  "commission",
                  "Compact<Perbill>"
                ]
              ]
            },
            "ValidatorPrefsWithBlocked": {
              "type": "struct",
              "type_mapping": [
                [
                  "commission",
                  "Compact<Perbill>"
                ],
                [
                  "blocked",
                  "bool"
                ]
              ]
            },
            "ValidatorPrefs": "ValidatorPrefsWithBlocked",
            "ValidatorPrefsTo196": {
              "type": "struct",
              "type_mapping": [
                [
                  "validator_payment",
                  "Compact<Balance>"
                ]
              ]
            },
            "ValidatorPrefsTo145": {
              "type": "struct",
              "type_mapping": [
                [
                  "unstake_threshold",
                  "Compact<u32>"
                ],
                [
                  "validator_payment",
                  "Compact<Balance>"
                ]
              ]
            },
            "ClassId": "u32",
            "InstanceId": "u32",
            "DepositBalance": "Balance",
            "DepositBalanceOf": "Balance",
            "ClassDetails": {
              "type": "struct",
              "type_mapping": [
                [
                  "owner",
                  "AccountId"
                ],
                [
                  "issuer",
                  "AccountId"
                ],
                [
                  "admin",
                  "AccountId"
                ],
                [
                  "freezer",
                  "AccountId"
                ],
                [
                  "total_deposit",
                  "DepositBalance"
                ],
                [
                  "free_holding",
                  "bool"
                ],
                [
                  "instances",
                  "u32"
                ],
                [
                  "instance_metadatas",
                  "u32"
                ],
                [
                  "attributes",
                  "u32"
                ],
                [
                  "is_frozen",
                  "bool"
                ]
              ]
            },
            "DestroyWitness": {
              "type": "struct",
              "type_mapping": [
                [
                  "instances",
                  "Compact<u32>"
                ],
                [
                  "instance_metadatas",
                  "Compact<u32>"
                ],
                [
                  "attributes",
                  "Compact<u32>"
                ]
              ]
            },
            "InstanceDetails": {
              "type": "struct",
              "type_mapping": [
                [
                  "owner",
                  "AccountId"
                ],
                [
                  "approved",
                  "Option<AccountId>"
                ],
                [
                  "is_frozen",
                  "bool"
                ],
                [
                  "deposit",
                  "DepositBalance"
                ]
              ]
            },
            "ClassMetadata": {
              "type": "struct",
              "type_mapping": [
                [
                  "deposit",
                  "DepositBalance"
                ],
                [
                  "data",
                  "Vec<u8>"
                ],
                [
                  "is_frozen",
                  "bool"
                ]
              ]
            },
            "InstanceMetadata": {
              "type": "struct",
              "type_mapping": [
                [
                  "deposit",
                  "DepositBalance"
                ],
                [
                  "data",
                  "Vec<u8>"
                ],
                [
                  "is_frozen",
                  "bool"
                ]
              ]
            },
            "BalanceLockTo212": {
              "type": "struct",
              "type_mapping": [
                [
                  "id",
                  "LockIdentifier"
                ],
                [
                  "amount",
                  "Balance"
                ],
                [
                  "until",
                  "BlockNumber"
                ],
                [
                  "reasons",
                  "WithdrawReasons"
                ]
              ]
            },
            "VestingSchedule": {
              "type": "struct",
              "type_mapping": [
                [
                  "offset",
                  "Balance"
                ],
                [
                  "per_block",
                  "Balance"
                ],
                [
                  "starting_block",
                  "BlockNumber"
                ]
              ]
            },
            "EvmAccount": {
              "type": "struct",
              "type_mapping": [
                [
                  "nonce",
                  "u256"
                ],
                [
                  "balance",
                  "u256"
                ]
              ]
            },
            "EvmLog": {
              "type": "struct",
              "type_mapping": [
                [
                  "address",
                  "H160"
                ],
                [
                  "topics",
                  "Vec<H256>"
                ],
                [
                  "data",
                  "Bytes"
                ]
              ]
            },
            "EvmVicinity": {
              "type": "struct",
              "type_mapping": [
                [
                  "gas_price",
                  "u256"
                ],
                [
                  "origin",
                  "H160"
                ]
              ]
            },
            "ExitError": {
              "type": "enum",
              "type_mapping": [
                [
                  "StackUnderflow",
                  "Null"
                ],
                [
                  "StackOverflow",
                  "Null"
                ],
                [
                  "InvalidJump",
                  "Null"
                ],
                [
                  "InvalidRange",
                  "Null"
                ],
                [
                  "DesignatedInvalid",
                  "Null"
                ],
                [
                  "CallTooDeep",
                  "Null"
                ],
                [
                  "CreateCollision",
                  "Null"
                ],
                [
                  "CreateContractLimit",
                  "Null"
                ],
                [
                  "OutOfOffset",
                  "Null"
                ],
                [
                  "OutOfGas",
                  "Null"
                ],
                [
                  "OutOfFund",
                  "Null"
                ],
                [
                  "PCUnderflow",
                  "Null"
                ],
                [
                  "CreateEmpty",
                  "Null"
                ],
                [
                  "Other",
                  "Text"
                ]
              ]
            },
            "ExitFatal": {
              "type": "enum",
              "type_mapping": [
                [
                  "NotSupported",
                  "Null"
                ],
                [
                  "UnhandledInterrupt",
                  "Null"
                ],
                [
                  "CallErrorAsFatal",
                  "ExitError"
                ],
                [
                  "Other",
                  "Text"
                ]
              ]
            },
            "ExitReason": {
              "type": "enum",
              "type_mapping": [
                [
                  "Succeed",
                  "ExitSucceed"
                ],
                [
                  "Error",
                  "ExitError"
                ],
                [
                  "Revert",
                  "ExitRevert"
                ],
                [
                  "Fatal",
                  "ExitFatal"
                ]
              ]
            },
            "ExitRevert": {
              "type": "enum",
              "value_list": [
                "Reverted"
              ]
            },
            "ExitSucceed": {
              "type": "enum",
              "value_list": [
                "Stopped",
                "Returned",
                "Suicided"
              ]
            },
            "StorageKind": {
              "type": "enum",
              "value_list": [
                "__UNUSED",
                "PERSISTENT",
                "LOCAL"
              ]
            },
            "ConfigData": {
              "type": "struct",
              "type_mapping": [
                [
                  "max_individual",
                  "Weight"
                ]
              ]
            },
            "MessageId": "[u8; 32]",
            "OverweightIndex": "u64",
            "PageCounter": "u32",
            "PageIndexData": {
              "type": "struct",
              "type_mapping": [
                [
                  "begin_used",
                  "PageCounter"
                ],
                [
                  "end_used",
                  "PageCounter"
                ],
                [
                  "overweight_count",
                  "OverweightIndex"
                ]
              ]
            },
            "OpenTipTo225": {
              "type": "struct",
              "type_mapping": [
                [
                  "reason",
                  "Hash"
                ],
                [
                  "who",
                  "AccountId"
                ],
                [
                  "finder",
                  "Option<OpenTipFinderTo225>"
                ],
                [
                  "closes",
                  "Option<BlockNumber>"
                ],
                [
                  "tips",
                  "Vec<OpenTipTip>"
                ]
              ]
            },
            "OpenTipFinderTo225": "(AccountId, Balance)",
            "TreasuryProposal": {
              "type": "struct",
              "type_mapping": [
                [
                  "proposer",
                  "AccountId"
                ],
                [
                  "value",
                  "Balance"
                ],
                [
                  "beneficiary",
                  "AccountId"
                ],
                [
                  "bond",
                  "Balance"
                ]
              ]
            },
            "BabeAuthorityWeight": "u64",
            "BabeEpochConfiguration": {
              "type": "struct",
              "type_mapping": [
                [
                  "c",
                  "(u64, u64)"
                ],
                [
                  "allowed_slots",
                  "AllowedSlots"
                ]
              ]
            },
            "BabeBlockWeight": "u32",
            "BabeEquivocationProof": {
              "type": "struct",
              "type_mapping": [
                [
                  "offender",
                  "AuthorityId"
                ],
                [
                  "slot_number",
                  "SlotNumber"
                ],
                [
                  "first_header",
                  "Header"
                ],
                [
                  "second_header",
                  "Header"
                ]
              ]
            },
            "EquivocationProof<Header>": "BabeEquivocationProof",
            "BabeWeight": "u64",
            "EpochAuthorship": {
              "type": "struct",
              "type_mapping": [
                [
                  "primary",
                  "Vec<u64>"
                ],
                [
                  "secondary",
                  "Vec<u64>"
                ],
                [
                  "secondary_vrf",
                  "Vec<u64>"
                ]
              ]
            },
            "RawBabePreDigestTo159": {
              "type": "enum",
              "type_mapping": [
                [
                  "Primary",
                  "RawBabePreDigestPrimaryTo159"
                ],
                [
                  "Secondary",
                  "RawBabePreDigestSecondaryTo159"
                ]
              ]
            },
            "RawBabePreDigestPrimaryTo159": {
              "type": "struct",
              "type_mapping": [
                [
                  "authority_index",
                  "u32"
                ],
                [
                  "slot_number",
                  "SlotNumber"
                ],
                [
                  "weight",
                  "BabeBlockWeight"
                ],
                [
                  "vrf_output",
                  "VrfOutput"
                ],
                [
                  "vrf_proof",
                  "VrfProof"
                ]
              ]
            },
            "RawBabePreDigestSecondaryTo159": {
              "type": "struct",
              "type_mapping": [
                [
                  "authority_index",
                  "u32"
                ],
                [
                  "slot_number",
                  "SlotNumber"
                ],
                [
                  "weight",
                  "BabeBlockWeight"
                ]
              ]
            },
            "RawBabePreDigestCompat": {
              "type": "enum",
              "type_mapping": [
                [
                  "Zero",
                  "u32"
                ],
                [
                  "One",
                  "u32"
                ],
                [
                  "Two",
                  "u32"
                ],
                [
                  "Three",
                  "u32"
                ]
              ]
            },
            "VrfOutput": "[u8; 32]",
            "RpcMethods": {
              "type": "struct",
              "type_mapping": [
                [
                  "version",
                  "u32"
                ],
                [
                  "methods",
                  "Vec<Text>"
                ]
              ]
            },
            "AssetApprovalKey": {
              "type": "struct",
              "type_mapping": [
                [
                  "owner",
                  "AccountId"
                ],
                [
                  "delegate",
                  "AccountId"
                ]
              ]
            },
            "AssetApproval": {
              "type": "struct",
              "type_mapping": [
                [
                  "amount",
                  "TAssetBalance"
                ],
                [
                  "deposit",
                  "TAssetDepositBalance"
                ]
              ]
            },
            "AssetBalance": {
              "type": "struct",
              "type_mapping": [
                [
                  "balance",
                  "TAssetBalance"
                ],
                [
                  "is_frozen",
                  "bool"
                ],
                [
                  "is_sufficient",
                  "bool"
                ]
              ]
            },
            "AssetDestroyWitness": {
              "type": "struct",
              "type_mapping": [
                [
                  "accounts",
                  "Compact<u32>"
                ],
                [
                  "sufficients",
                  "Compact<u32>"
                ],
                [
                  "approvals",
                  "Compact<u32>"
                ]
              ]
            },
            "AssetDetails": {
              "type": "struct",
              "type_mapping": [
                [
                  "owner",
                  "AccountId"
                ],
                [
                  "issuer",
                  "AccountId"
                ],
                [
                  "admin",
                  "AccountId"
                ],
                [
                  "freezer",
                  "AccountId"
                ],
                [
                  "supply",
                  "TAssetBalance"
                ],
                [
                  "deposit",
                  "TAssetDepositBalance"
                ],
                [
                  "min_nalance",
                  "TAssetBalance"
                ],
                [
                  "is_sufficient",
                  "bool"
                ],
                [
                  "accounts",
                  "u32"
                ],
                [
                  "sufficients",
                  "u32"
                ],
                [
                  "approvals",
                  "u32"
                ],
                [
                  "is_frozen",
                  "bool"
                ]
              ]
            },
            "AssetMetadata": {
              "type": "struct",
              "type_mapping": [
                [
                  "deposit",
                  "TAssetDepositBalance"
                ],
                [
                  "name",
                  "Vec<u8>"
                ],
                [
                  "symbol",
                  "Vec<u8>"
                ],
                [
                  "decimals",
                  "u8"
                ],
                [
                  "is_frozen",
                  "bool"
                ]
              ]
            },
            "TAssetBalance": "u64",
            "TAssetDepositBalance": "BalanceOf",
            "CreatedBlock": {
              "type": "struct",
              "type_mapping": [
                [
                  "hash",
                  "BlockHash"
                ],
                [
                  "aux",
                  "ImportedAux"
                ]
              ]
            },
            "ImportedAux": {
              "type": "struct",
              "type_mapping": [
                [
                  "header_only",
                  "bool"
                ],
                [
                  "clear_justification_requests",
                  "bool"
                ],
                [
                  "needs_justification",
                  "bool"
                ],
                [
                  "bad_justification",
                  "bool"
                ],
                [
                  "needs_finality_proof",
                  "bool"
                ],
                [
                  "is_new_best",
                  "bool"
                ]
              ]
            },
            "Conviction": {
              "type": "enum",
              "value_list": [
                "None",
                "Locked1x",
                "Locked2x",
                "Locked3x",
                "Locked4x",
                "Locked5x",
                "Locked6x"
              ]
            },
            "PropIndex": "u32",
            "Proposal": "Call",
            "ReferendumIndex": "u32",
            "ReferendumInfoTo239": {
              "type": "struct",
              "type_mapping": [
                [
                  "end",
                  "BlockNumber"
                ],
                [
                  "proposal_hash",
                  "Hash"
                ],
                [
                  "threshold",
                  "VoteThreshold"
                ],
                [
                  "delay",
                  "BlockNumber"
                ]
              ]
            },
            "ApprovalFlag": "u32",
            "SetIndex": "u32",
            "Vote": "GenericVote",
            "VoteIndex": "u32",
            "VoterInfo": {
              "type": "struct",
              "type_mapping": [
                [
                  "last_active",
                  "VoteIndex"
                ],
                [
                  "last_win",
                  "VoteIndex"
                ],
                [
                  "pot",
                  "Balance"
                ],
                [
                  "stake",
                  "Balance"
                ]
              ]
            },
            "VoteThreshold": {
              "type": "enum",
              "value_list": [
                "Super majority approval",
                "Super majority rejection",
                "Simple majority"
              ]
            },
            "EthereumAddress": "H160",
            "AbridgedCandidateReceipt": {
              "type": "struct",
              "type_mapping": [
                [
                  "parachain_index",
                  "ParaId"
                ],
                [
                  "relay_parent",
                  "Hash"
                ],
                [
                  "head_data",
                  "HeadData"
                ],
                [
                  "collator",
                  "CollatorId"
                ],
                [
                  "signature",
                  "CollatorSignature"
                ],
                [
                  "pov_block_hash",
                  "Hash"
                ],
                [
                  "commitments",
                  "CandidateCommitments"
                ]
              ]
            },
            "AbridgedHostConfiguration": {
              "type": "struct",
              "type_mapping": [
                [
                  "max_code_size",
                  "u32"
                ],
                [
                  "max_head_data_size",
                  "u32"
                ],
                [
                  "max_upward_queue_count",
                  "u32"
                ],
                [
                  "max_upward_queue_size",
                  "u32"
                ],
                [
                  "max_upward_message_size",
                  "u32"
                ],
                [
                  "max_upward_message_num_per_candidate",
                  "u32"
                ],
                [
                  "hrmp_max_message_num_per_candidate",
                  "u32"
                ],
                [
                  "validation_upgrade_frequency",
                  "BlockNumber"
                ],
                [
                  "validation_upgrade_delay",
                  "BlockNumber"
                ]
              ]
            },
            "AbridgedHrmpChannel": {
              "type": "struct",
              "type_mapping": [
                [
                  "max_capacity",
                  "u32"
                ],
                [
                  "max_total_size",
                  "u32"
                ],
                [
                  "max_message_size",
                  "u32"
                ],
                [
                  "msg_count",
                  "u32"
                ],
                [
                  "total_size",
                  "u32"
                ],
                [
                  "mqc_head",
                  "Option<Hash>"
                ]
              ]
            },
            "Bidder": {
              "type": "enum",
              "type_mapping": [
                [
                  "New",
                  "NewBidder"
                ],
                [
                  "Existing",
                  "ParaId"
                ]
              ]
            },
            "BackedCandidate": {
              "type": "struct",
              "type_mapping": [
                [
                  "candidate",
                  "CommittedCandidateReceipt"
                ],
                [
                  "validity_votes",
                  "Vec<ValidityAttestation>"
                ],
                [
                  "validator_indices",
                  "BitVec"
                ]
              ]
            },
            "BufferedSessionChange": {
              "type": "struct",
              "type_mapping": [
                [
                  "apply_at",
                  "BlockNumber"
                ],
                [
                  "validators",
                  "Vec<ValidatorId>"
                ],
                [
                  "queued",
                  "Vec<ValidatorId>"
                ],
                [
                  "session_index",
                  "SessionIndex"
                ]
              ]
            },
            "CandidateCommitments": {
              "type": "struct",
              "type_mapping": [
                [
                  "upward_messages",
                  "Vec<UpwardMessage>"
                ],
                [
                  "horizontal_messages",
                  "Vec<OutboundHrmpMessage>"
                ],
                [
                  "new_validation_code",
                  "Option<ValidationCode>"
                ],
                [
                  "head_data",
                  "HeadData"
                ],
                [
                  "processed_downward_messages",
                  "u32"
                ],
                [
                  "hrmp_watermark",
                  "BlockNumber"
                ]
              ]
            },
            "CandidateDescriptor": {
              "type": "struct",
              "type_mapping": [
                [
                  "para_id",
                  "ParaId"
                ],
                [
                  "relay_parent",
                  "RelayChainHash"
                ],
                [
                  "collator_id",
                  "CollatorId"
                ],
                [
                  "persisted_validation_data_hash",
                  "Hash"
                ],
                [
                  "pov_hash",
                  "Hash"
                ],
                [
                  "erasure_root",
                  "Hash"
                ],
                [
                  "signature",
                  "CollatorSignature"
                ],
                [
                  "para_head",
                  "Hash"
                ],
                [
                  "validation_code_hash",
                  "ValidationCodeHash"
                ]
              ]
            },
            "CandidateHash": "Hash",
            "CandidateInfo": {
              "type": "struct",
              "type_mapping": [
                [
                  "who",
                  "AccountId"
                ],
                [
                  "deposit",
                  "Balance"
                ]
              ]
            },
            "CandidatePendingAvailability": {
              "type": "struct",
              "type_mapping": [
                [
                  "core",
                  "CoreIndex"
                ],
                [
                  "hash",
                  "CandidateHash"
                ],
                [
                  "descriptor",
                  "CandidateDescriptor"
                ],
                [
                  "availability_votes",
                  "BitVec"
                ],
                [
                  "backers",
                  "BitVec"
                ],
                [
                  "relay_parent_number",
                  "BlockNumber"
                ],
                [
                  "backed_in_number",
                  "BlockNumber"
                ],
                [
                  "backing_group",
                  "GroupIndex"
                ]
              ]
            },
            "CandidateReceipt": {
              "type": "struct",
              "type_mapping": [
                [
                  "descriptor",
                  "CandidateDescriptor"
                ],
                [
                  "commitments_hash",
                  "Hash"
                ]
              ]
            },
            "GlobalValidationData": {
              "type": "struct",
              "type_mapping": [
                [
                  "max_code_size",
                  "u32"
                ],
                [
                  "max_head_data_size",
                  "u32"
                ],
                [
                  "block_number",
                  "BlockNumber"
                ]
              ]
            },
            "CommittedCandidateReceipt": {
              "type": "struct",
              "type_mapping": [
                [
                  "descriptor",
                  "CandidateDescriptor"
                ],
                [
                  "commitments",
                  "CandidateCommitments"
                ]
              ]
            },
            "CoreAssignment": {
              "type": "struct",
              "type_mapping": [
                [
                  "core",
                  "CoreIndex"
                ],
                [
                  "para_id",
                  "ParaId"
                ],
                [
                  "kind",
                  "AssignmentKind"
                ],
                [
                  "group_idx",
                  "GroupIndex"
                ]
              ]
            },
            "CoreIndex": "u32",
            "CoreOccupied": {
              "type": "enum",
              "type_mapping": [
                [
                  "Parathread",
                  "ParathreadEntry"
                ],
                [
                  "Parachain",
                  "Null"
                ]
              ]
            },
            "DownwardMessage": "Bytes",
            "GroupIndex": "u32",
            "GlobalValidationSchedule": {
              "type": "struct",
              "type_mapping": [
                [
                  "max_code_size",
                  "u32"
                ],
                [
                  "max_head_data_size",
                  "u32"
                ],
                [
                  "block_number",
                  "BlockNumber"
                ]
              ]
            },
            "HeadData": "Bytes",
            "HostConfiguration": {
              "type": "struct",
              "type_mapping": [
                [
                  "max_code_size",
                  "u32"
                ],
                [
                  "max_head_data_size",
                  "u32"
                ],
                [
                  "max_upward_queue_count",
                  "u32"
                ],
                [
                  "max_upward_queue_size",
                  "u32"
                ],
                [
                  "max_upward_message_size",
                  "u32"
                ],
                [
                  "max_upward_message_num_per_candidate",
                  "u32"
                ],
                [
                  "hrmp_max_message_num_per_candidate",
                  "u32"
                ],
                [
                  "validation_upgrade_frequency",
                  "BlockNumber"
                ],
                [
                  "validation_upgrade_delay",
                  "BlockNumber"
                ],
                [
                  "max_pov_size",
                  "u32"
                ],
                [
                  "max_downward_message_size",
                  "u32"
                ],
                [
                  "preferred_dispatchable_upward_messages_step_weight",
                  "Weight"
                ],
                [
                  "hrmp_max_parachain_outbound_channels",
                  "u32"
                ],
                [
                  "hrmp_max_parathread_outbound_channels",
                  "u32"
                ],
                [
                  "hrmp_open_request_ttl",
                  "u32"
                ],
                [
                  "hrmp_sender_deposit",
                  "Balance"
                ],
                [
                  "hrmp_recipient_deposit",
                  "Balance"
                ],
                [
                  "hrmp_channel_max_capacity",
                  "u32"
                ],
                [
                  "hrmp_channel_max_total_size",
                  "u32"
                ],
                [
                  "hrmp_max_parachain_inbound_channels",
                  "u32"
                ],
                [
                  "hrmp_max_parathread_inbound_channels",
                  "u32"
                ],
                [
                  "hrmp_channel_max_message_size",
                  "u32"
                ],
                [
                  "code_retention_period",
                  "BlockNumber"
                ],
                [
                  "parathread_cores",
                  "u32"
                ],
                [
                  "parathread_retries",
                  "u32"
                ],
                [
                  "group_rotation_frequency",
                  "BlockNumber"
                ],
                [
                  "chain_availability_period",
                  "BlockNumber"
                ],
                [
                  "thread_availability_period",
                  "BlockNumber"
                ],
                [
                  "scheduling_lookahead",
                  "u32"
                ],
                [
                  "max_validators_per_core",
                  "Option<u32>"
                ],
                [
                  "max_validators",
                  "Option<u32>"
                ],
                [
                  "dispute_period",
                  "SessionIndex"
                ],
                [
                  "dispute_post_conclusion_acceptance_period",
                  "BlockNumber"
                ],
                [
                  "dispute_max_spam_slots",
                  "u32"
                ],
                [
                  "dispute_conclusion_by_time_out_period",
                  "BlockNumber"
                ],
                [
                  "no_show_slots",
                  "u32"
                ],
                [
                  "n_delay_tranches",
                  "u32"
                ],
                [
                  "zeroth_delay_tranche_width",
                  "u32"
                ],
                [
                  "needed_approvals",
                  "u32"
                ],
                [
                  "relay_vrf_modulo_samples",
                  "u32"
                ]
              ]
            },
            "HostConfigurationTo13": {
              "type": "struct",
              "type_mapping": [
                [
                  "validation_upgrade_frequency",
                  "BlockNumber"
                ],
                [
                  "validation_upgrade_delay",
                  "BlockNumber"
                ],
                [
                  "acceptance_period",
                  "BlockNumber"
                ],
                [
                  "max_code_size",
                  "u32"
                ],
                [
                  "max_head_data_size",
                  "u32"
                ],
                [
                  "max_pov_size",
                  "u32"
                ],
                [
                  "parathread_cores",
                  "u32"
                ],
                [
                  "parathread_retries",
                  "u32"
                ],
                [
                  "group_rotation_frequency",
                  "BlockNumber"
                ],
                [
                  "chain_availability_period",
                  "BlockNumber"
                ],
                [
                  "thread_availability_period",
                  "BlockNumber"
                ],
                [
                  "scheduling_lookahead",
                  "u32"
                ],
                [
                  "max_validators_per_core",
                  "Option<u32>"
                ],
                [
                  "dispute_period",
                  "SessionIndex"
                ],
                [
                  "no_show_slots",
                  "u32"
                ],
                [
                  "n_delay_tranches",
                  "u32"
                ],
                [
                  "zeroth_delay_tranche_width",
                  "u32"
                ],
                [
                  "needed_approvals",
                  "u32"
                ],
                [
                  "relay_vrf_modulo_samples",
                  "u32"
                ],
                [
                  "max_upward_queue_count",
                  "u32"
                ],
                [
                  "max_upward_queue_size",
                  "u32"
                ],
                [
                  "max_downward_message_size",
                  "u32"
                ],
                [
                  "preferred_dispatchable_upward_messages_step_weight",
                  "Weight"
                ],
                [
                  "max_upward_message_size",
                  "u32"
                ],
                [
                  "max_upward_message_num_per_candidate",
                  "u32"
                ],
                [
                  "hrmp_open_request_ttl",
                  "u32"
                ],
                [
                  "hrmp_sender_deposit",
                  "Balance"
                ],
                [
                  "hrmp_recipient_deposit",
                  "Balance"
                ],
                [
                  "hrmp_channel_max_capacity",
                  "u32"
                ],
                [
                  "hrmp_channel_max_total_size",
                  "u32"
                ],
                [
                  "hrmp_max_parachain_inbound_channels",
                  "u32"
                ],
                [
                  "hrmp_max_parathread_inbound_channels",
                  "u32"
                ],
                [
                  "hrmp_channel_max_message_size",
                  "u32"
                ],
                [
                  "hrmp_max_parachain_outbound_channels",
                  "u32"
                ],
                [
                  "hrmp_max_parathread_outbound_channels",
                  "u32"
                ],
                [
                  "hrmp_max_message_num_per_candidate",
                  "u32"
                ]
              ]
            },
            "HrmpChannel": {
              "type": "struct",
              "type_mapping": [
                [
                  "max_capacity",
                  "u32"
                ],
                [
                  "max_total_size",
                  "u32"
                ],
                [
                  "max_message_size",
                  "u32"
                ],
                [
                  "msg_count",
                  "u32"
                ],
                [
                  "total_size",
                  "u32"
                ],
                [
                  "mqc_head",
                  "Option<Hash>"
                ],
                [
                  "sender_deposit",
                  "Balance"
                ],
                [
                  "recipient_deposit",
                  "Balance"
                ]
              ]
            },
            "HrmpOpenChannelRequest": {
              "type": "struct",
              "type_mapping": [
                [
                  "confirmed",
                  "bool"
                ],
                [
                  "age",
                  "SessionIndex"
                ],
                [
                  "sender_deposit",
                  "Balance"
                ],
                [
                  "max_message_size",
                  "u32"
                ],
                [
                  "max_capacity",
                  "u32"
                ],
                [
                  "max_total_size",
                  "u32"
                ]
              ]
            },
            "InboundDownwardMessage": {
              "type": "struct",
              "type_mapping": [
                [
                  "pub_sent_at",
                  "BlockNumber"
                ],
                [
                  "pub_msg",
                  "DownwardMessage"
                ]
              ]
            },
            "InboundHrmpMessage": {
              "type": "struct",
              "type_mapping": [
                [
                  "sent_at",
                  "BlockNumber"
                ],
                [
                  "data",
                  "Bytes"
                ]
              ]
            },
            "InboundHrmpMessages": "Vec<InboundHrmpMessage>",
            "HrmpChannelId": {
              "type": "struct",
              "type_mapping": [
                [
                  "sender",
                  "u32"
                ],
                [
                  "receiver",
                  "u32"
                ]
              ]
            },
            "LocalValidationData": {
              "type": "struct",
              "type_mapping": [
                [
                  "parent_head",
                  "HeadData"
                ],
                [
                  "balance",
                  "Balance"
                ],
                [
                  "code_upgrade_allowed",
                  "Option<BlockNumber>"
                ]
              ]
            },
            "BTreeMap<ParaId, InboundHrmpMessages>": "Vec<(ParaId, InboundHrmpMessages)>",
            "MessageIngestionType": {
              "type": "struct",
              "type_mapping": [
                [
                  "downward_messages",
                  "Vec<InboundDownwardMessage>"
                ],
                [
                  "horizontal_messages",
                  "BTreeMap<ParaId, InboundHrmpMessages>"
                ]
              ]
            },
            "ParachainDispatchOrigin": {
              "type": "enum",
              "value_list": [
                "Signed",
                "Parachain",
                "Root"
              ]
            },
            "ParachainInherentData": {
              "type": "struct",
              "type_mapping": [
                [
                  "validation_data",
                  "PersistedValidationData"
                ],
                [
                  "relay_chain_state",
                  "StorageProof"
                ],
                [
                  "downward_messages",
                  "Vec<InboundDownwardMessage>"
                ],
                [
                  "horizontal_messages",
                  "BTreeMap<ParaId, VecInboundHrmpMessage>"
                ]
              ]
            },
            "ParachainProposal": {
              "type": "struct",
              "type_mapping": [
                [
                  "proposer",
                  "AccountId"
                ],
                [
                  "genesis_head",
                  "HeadData"
                ],
                [
                  "validators",
                  "Vec<ValidatorId>"
                ],
                [
                  "name",
                  "Bytes"
                ],
                [
                  "balance",
                  "Balance"
                ]
              ]
            },
            "RegisteredParachainInfo": {
              "type": "struct",
              "type_mapping": [
                [
                  "validators",
                  "Vec<ValidatorId>"
                ],
                [
                  "proposer",
                  "AccountId"
                ]
              ]
            },
            "SystemInherentData": "ParachainInherentData",
            "RelayBlockNumber": "u32",
            "RelayChainBlockNumber": "RelayBlockNumber",
            "RelayHash": "Hash",
            "RelayChainHash": "RelayHash",
            "QueuedParathread": {
              "type": "struct",
              "type_mapping": [
                [
                  "claim",
                  "ParathreadEntry"
                ],
                [
                  "core_offset",
                  "u32"
                ]
              ]
            },
            "Remark": "[u8; 32]",
            "ReplacementTimes": {
              "type": "struct",
              "type_mapping": [
                [
                  "expected_at",
                  "BlockNumber"
                ],
                [
                  "activated_at",
                  "BlockNumber"
                ]
              ]
            },
            "Retriable": {
              "type": "enum",
              "type_mapping": [
                [
                  "Never",
                  "Null"
                ],
                [
                  "WithRetries",
                  "u32"
                ]
              ]
            },
            "Scheduling": {
              "type": "enum",
              "value_list": [
                "Always",
                "Dynamic"
              ]
            },
            "SessionInfoValidatorGroup": "Vec<ParaValidatorIndex>",
            "SessionInfo": {
              "type": "struct",
              "type_mapping": [
                [
                  "validators",
                  "Vec<ValidatorId>"
                ],
                [
                  "discovery_keys",
                  "Vec<AuthorityDiscoveryId>"
                ],
                [
                  "assignment_keys",
                  "Vec<AssignmentId>"
                ],
                [
                  "validator_groups",
                  "Vec<SessionInfoValidatorGroup>"
                ],
                [
                  "n_cores",
                  "u32"
                ],
                [
                  "zeroth_delay_tranche_width",
                  "u32"
                ],
                [
                  "relay_vrf_modulo_samples",
                  "u32"
                ],
                [
                  "n_delay_tranches",
                  "u32"
                ],
                [
                  "no_show_slots",
                  "u32"
                ],
                [
                  "needed_approvals",
                  "u32"
                ]
              ]
            },
            "SignedAvailabilityBitfield": {
              "type": "struct",
              "type_mapping": [
                [
                  "payload",
                  "BitVec"
                ],
                [
                  "validator_index",
                  "ParaValidatorIndex"
                ],
                [
                  "signature",
                  "ValidatorSignature"
                ]
              ]
            },
            "SignedAvailabilityBitfields": "Vec<SignedAvailabilityBitfield>",
            "UpgradeGoAhead": {
              "type": "enum",
              "value_list": [
                "Abort",
                "GoAhead"
              ]
            },
            "UpgradeRestriction": {
              "type": "enum",
              "value_list": [
                "Present"
              ]
            },
            "UpwardMessage": "Bytes",
            "CallIndex": "(u8, u8)",
            "LotteryConfig": {
              "type": "struct",
              "type_mapping": [
                [
                  "price",
                  "Balance"
                ],
                [
                  "start",
                  "BlockNumber"
                ],
                [
                  "length",
                  "BlockNumber"
                ],
                [
                  "delay",
                  "BlockNumber"
                ],
                [
                  "repeat",
                  "bool"
                ]
              ]
            },
            "AssetOptions": {
              "type": "struct",
              "type_mapping": [
                [
                  "inital_issuance",
                  "Compact<Balance>"
                ],
                [
                  "permissions",
                  "PermissionLatest"
                ]
              ]
            },
            "Owner": {
              "type": "enum",
              "type_mapping": [
                [
                  "None",
                  "Null"
                ],
                [
                  "Address",
                  "AccountId"
                ]
              ]
            },
            "PermissionsV1": {
              "type": "struct",
              "type_mapping": [
                [
                  "update",
                  "Owner"
                ],
                [
                  "mint",
                  "Owner"
                ],
                [
                  "burn",
                  "Owner"
                ]
              ]
            },
            "PermissionVersions": {
              "type": "enum",
              "type_mapping": [
                [
                  "V1",
                  "PermissionsV1"
                ]
              ]
            },
            "PermissionLatest": "PermissionsV1",
            "Approvals": "[bool; 4]",
            "ContractExecResultSuccessTo255": {
              "type": "struct",
              "type_mapping": [
                [
                  "status",
                  "u8"
                ],
                [
                  "data",
                  "Bytes"
                ]
              ]
            },
            "ContractExecResultTo255": {
              "type": "enum",
              "type_mapping": [
                [
                  "Success",
                  "ContractExecResultSuccessTo255"
                ],
                [
                  "Error",
                  "Null"
                ]
              ]
            },
            "AccountStatus": {
              "type": "struct",
              "type_mapping": [
                [
                  "validity",
                  "AccountValidity"
                ],
                [
                  "free_balance",
                  "Balance"
                ],
                [
                  "locked_balance",
                  "Balance"
                ],
                [
                  "signature",
                  "Vec<u8>"
                ],
                [
                  "vat",
                  "Permill"
                ]
              ]
            },
            "AccountValidity": {
              "type": "enum",
              "value_list": [
                "Invalid",
                "Initiated",
                "Pending",
                "ValidLow",
                "ValidHigh",
                "Completed"
              ]
            },
            "Text, Text": "(Text, Text)",
            "Phase<BlockNumber>": {
              "type": "enum",
              "type_mapping": [
                [
                  "Off",
                  "Null"
                ],
                [
                  "Signed",
                  "Null"
                ],
                [
                  "Unsigned",
                  "(bool, BlockNumber)"
                ]
              ]
            },
            "ProxyDefinition": {
              "type": "struct",
              "type_mapping": [
                [
                  "delegate",
                  "AccountId"
                ],
                [
                  "proxy_type",
                  "ProxyType"
                ],
                [
                  "delay",
                  "BlockNumber"
                ]
              ]
            },
            "ProxyAnnouncement": {
              "type": "struct",
              "type_mapping": [
                [
                  "real",
                  "AccountId"
                ],
                [
                  "call_hash",
                  "Hash"
                ],
                [
                  "height",
                  "BlockNumber"
                ]
              ]
            },
            "WeakBoundedVec": "BoundedVec",
            "MaxProxies": "u32",
            "MaxPending": "u32",
            "(BoundedVec<ProxyDefinition<AccountId, ProxyType,  BlockNumber>, MaxProxies>, BalanceOf,)": "(BoundedVec<ProxyDefinition, MaxProxies>, BalanceOf)",
            "maxpending>": "Null",
            "(BoundedVec<Announcement<AccountId, CallHashOf,  BlockNumber>, MaxPending,>, BalanceOf,)": "(BoundedVec<ProxyAnnouncement, MaxPending>, BalanceOf)",
            "Approval<Balance, DepositBalanceOf<T, I>>": "AssetApproval",
            "Asset.Balance": "TAssetBalance",
            "Xcm": "XcmV1",
            "XcmError": "XcmErrorV1",
            "XcmOrder": "XcmOrderV1",
            "Junction": "JunctionV1",
            "Junctions": "JunctionsV1",
            "InteriorMultiLocation": "Junctions",
            "MultiLocation": "MultiLocationV1",
            "AssetInstance": "AssetInstanceV1",
            "MultiAssetFilter": "MultiAssetFilterV1",
            "MultiAsset": "MultiAssetV1",
            "WildMultiAsset": "WildMultiAssetV1"
    },
    "versioning": [
        {
              "runtime_range": [
                1,
                null
              ],
              "types": {
                  "sp_core::crypto::AccountId32": "AccountId",
                  "sp_runtime::MultiSignature": "MultiSignature",
                "String": "Text",
                "FixedU128": "u128",
                "U256": "u256",
                "SessionKeys2": "(AccountId, AccountId)",
                "AccountInfo": "AccountInfoWithDualRefCount",
                "Address": "AccountId",
                "Amount": "i128",
                "AmountOf": "Amount",
                "AssetId": "AssetId32",
                "AssetId32": "[u8; 32]",
                "AssetIdOf": "AssetId",
                "AssetInfo": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "asset_id",
                      "AssetId"
                    ],
                    [
                      "symbol",
                      "AssetSymbolStr"
                    ],
                    [
                      "name",
                      "AssetNameStr"
                    ],
                    [
                      "precision",
                      "u8"
                    ],
                    [
                      "is_mintable",
                      "bool"
                    ]
                  ]
                },
                "AssetKind": {
                  "type": "enum",
                  "value_list": [
                    "Thischain",
                    "Sidechain",
                    "SidechainOwned"
                  ]
                },
                "AssetName": "Vec<u8>",
                "AssetNameStr": "String",
                "AssetRecord": "Null",
                "AssetSymbol": "Vec<u8>",
                "AssetSymbolStr": "String",
                "Balance": "u128",
                "BalanceInfo": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "balance",
                      "Balance"
                    ]
                  ]
                },
                "BalancePrecision": "u8",
                "BasisPoints": "u16",
                "BridgeNetworkId": "u32",
                "BridgeStatus": {
                  "type": "enum",
                  "value_list": [
                    "Initialized",
                    "Migrating"
                  ]
                },
                "BridgeTimepoint": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "height",
                      "MultiChainHeight"
                    ],
                    [
                      "index",
                      "u32"
                    ]
                  ]
                },
                "ChangePeersContract": {
                  "type": "enum",
                  "value_list": [
                    "XOR",
                    "VAL"
                  ]
                },
                "ChargeFeeInfo": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "tip",
                      "Compact<Balance>"
                    ],
                    [
                      "target_asset_id",
                      "AssetId"
                    ]
                  ]
                },
                "ContentSource": "Vec<u8>",
                "CurrencyId": "AssetId",
                "CurrencyIdEncoded": {
                  "type": "enum",
                  "type_mapping": [
                    [
                      "AssetId",
                      "H256"
                    ],
                    [
                      "TokenAddress",
                      "H160"
                    ]
                  ]
                },
                "CurrencyIdOf": "AssetId",
                "CustomInfo": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "amount",
                      "Balance"
                    ]
                  ]
                },
                "DEXId": "u32",
                "DEXIdOf": "DEXId",
                "DEXInfo": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "base_asset_id",
                      "AssetId"
                    ],
                    [
                      "default_fee",
                      "BasisPoints"
                    ],
                    [
                      "default_protocol_fee",
                      "BasisPoints"
                    ]
                  ]
                },
                "Description": "Vec<u8>",
                "DispatchErrorWithPostInfoTPostDispatchInfo": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "post_info",
                      "PostDispatchInfo"
                    ],
                    [
                      "error",
                      "DispatchError"
                    ]
                  ]
                },
                "DispatchResultWithPostInfo": {
                  "type": "enum",
                  "type_mapping": [
                    [
                      "Ok",
                      "PostDispatchInfo"
                    ],
                    [
                      "Err",
                      "DispatchErrorWithPostInfoTPostDispatchInfo"
                    ]
                  ]
                },
                "DistributionAccounts": "Null",
                "Duration": "Null",
                "EthBridgeStorageVersion": {
                  "type": "enum",
                  "value_list": [
                    "V1",
                    "V2RemovePendingTransfers"
                  ]
                },
                "EthPeersSync": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "is_bridge_ready",
                      "bool"
                    ],
                    [
                      "is_xor_ready",
                      "bool"
                    ],
                    [
                      "is_val_ready",
                      "bool"
                    ]
                  ]
                },
                "Farm": "Null",
                "FarmId": "u64",
                "Farmer": "Null",
                "FilterMode": {
                  "type": "enum",
                  "value_list": [
                    "Disabled",
                    "ForbidSelected",
                    "AllowSelected"
                  ]
                },
                "Fixed": "FixedU128",
                "FixedBytes": "Vec<u8>",
                "HolderId": "AccountId",
                "IncomingAddToken": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "token_address",
                      "EthereumAddress"
                    ],
                    [
                      "asset_id",
                      "AssetId"
                    ],
                    [
                      "precision",
                      "BalancePrecision"
                    ],
                    [
                      "symbol",
                      "AssetSymbol"
                    ],
                    [
                      "name",
                      "AssetName"
                    ],
                    [
                      "author",
                      "AccountId"
                    ],
                    [
                      "tx_hash",
                      "H256"
                    ],
                    [
                      "at_height",
                      "u64"
                    ],
                    [
                      "timepoint",
                      "BridgeTimepoint"
                    ],
                    [
                      "network_id",
                      "BridgeNetworkId"
                    ]
                  ]
                },
                "IncomingCancelOutgoingRequest": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "outgoing_request",
                      "OutgoingRequest"
                    ],
                    [
                      "outgoing_request_hash",
                      "H256"
                    ],
                    [
                      "initial_request_hash",
                      "H256"
                    ],
                    [
                      "tx_input",
                      "Vec<u8>"
                    ],
                    [
                      "author",
                      "AccountId"
                    ],
                    [
                      "tx_hash",
                      "H256"
                    ],
                    [
                      "at_height",
                      "u64"
                    ],
                    [
                      "timepoint",
                      "BridgeTimepoint"
                    ],
                    [
                      "network_id",
                      "BridgeNetworkId"
                    ]
                  ]
                },
                "IncomingChangePeers": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "peer_account_id",
                      "AccountId"
                    ],
                    [
                      "peer_address",
                      "EthereumAddress"
                    ],
                    [
                      "added",
                      "bool"
                    ],
                    [
                      "author",
                      "AccountId"
                    ],
                    [
                      "tx_hash",
                      "H256"
                    ],
                    [
                      "at_height",
                      "u64"
                    ],
                    [
                      "timepoint",
                      "BridgeTimepoint"
                    ],
                    [
                      "network_id",
                      "BridgeNetworkId"
                    ]
                  ]
                },
                "IncomingChangePeersCompat": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "peer_account_id",
                      "AccountId"
                    ],
                    [
                      "peer_address",
                      "EthereumAddress"
                    ],
                    [
                      "added",
                      "bool"
                    ],
                    [
                      "contract",
                      "ChangePeersContract"
                    ],
                    [
                      "author",
                      "AccountId"
                    ],
                    [
                      "tx_hash",
                      "H256"
                    ],
                    [
                      "at_height",
                      "u64"
                    ],
                    [
                      "timepoint",
                      "BridgeTimepoint"
                    ],
                    [
                      "network_id",
                      "BridgeNetworkId"
                    ]
                  ]
                },
                "IncomingMarkAsDoneRequest": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "outgoing_request_hash",
                      "H256"
                    ],
                    [
                      "initial_request_hash",
                      "H256"
                    ],
                    [
                      "author",
                      "AccountId"
                    ],
                    [
                      "at_height",
                      "u64"
                    ],
                    [
                      "timepoint",
                      "BridgeTimepoint"
                    ],
                    [
                      "network_id",
                      "BridgeNetworkId"
                    ]
                  ]
                },
                "IncomingMetaRequestKind": {
                  "type": "enum",
                  "value_list": [
                    "CancelOutgoingRequest",
                    "MarkAsDone"
                  ]
                },
                "IncomingMigrate": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "new_contract_address",
                      "EthereumAddress"
                    ],
                    [
                      "author",
                      "AccountId"
                    ],
                    [
                      "tx_hash",
                      "H256"
                    ],
                    [
                      "at_height",
                      "u64"
                    ],
                    [
                      "timepoint",
                      "BridgeTimepoint"
                    ],
                    [
                      "network_id",
                      "BridgeNetworkId"
                    ]
                  ]
                },
                "IncomingPrepareForMigration": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "author",
                      "AccountId"
                    ],
                    [
                      "tx_hash",
                      "H256"
                    ],
                    [
                      "at_height",
                      "u64"
                    ],
                    [
                      "timepoint",
                      "BridgeTimepoint"
                    ],
                    [
                      "network_id",
                      "BridgeNetworkId"
                    ]
                  ]
                },
                "IncomingRequest": {
                  "type": "enum",
                  "type_mapping": [
                    [
                      "Transfer",
                      "IncomingTransfer"
                    ],
                    [
                      "AddToken",
                      "IncomingAddToken"
                    ],
                    [
                      "ChangePeers",
                      "IncomingChangePeers"
                    ],
                    [
                      "CancelOutgoingRequest",
                      "IncomingCancelOutgoingRequest"
                    ],
                    [
                      "MarkAsDone",
                      "IncomingMarkAsDoneRequest"
                    ],
                    [
                      "PrepareForMigration",
                      "IncomingPrepareForMigration"
                    ],
                    [
                      "Migrate",
                      "IncomingMigrate"
                    ]
                  ]
                },
                "IncomingRequestKind": {
                  "type": "enum",
                  "type_mapping": [
                    [
                      "Transaction",
                      "IncomingTransactionRequestKind"
                    ],
                    [
                      "Meta",
                      "IncomingMetaRequestKind"
                    ]
                  ]
                },
                "IncomingTransactionRequestKind": {
                  "type": "enum",
                  "value_list": [
                    "Transfer",
                    "AddAsset",
                    "AddPeer",
                    "RemovePeer",
                    "PrepareForMigration",
                    "Migrate",
                    "AddPeerCompat",
                    "RemovePeerCompat",
                    "TransferXOR"
                  ]
                },
                "IncomingTransfer": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "from",
                      "EthereumAddress"
                    ],
                    [
                      "to",
                      "AccountId"
                    ],
                    [
                      "asset_id",
                      "AssetId"
                    ],
                    [
                      "asset_kind",
                      "AssetKind"
                    ],
                    [
                      "amount",
                      "Balance"
                    ],
                    [
                      "author",
                      "AccountId"
                    ],
                    [
                      "tx_hash",
                      "H256"
                    ],
                    [
                      "at_height",
                      "u64"
                    ],
                    [
                      "timepoint",
                      "BridgeTimepoint"
                    ],
                    [
                      "network_id",
                      "BridgeNetworkId"
                    ]
                  ]
                },
                "Keys": "SessionKeys3",
                "LPRewardsInfo": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "amount",
                      "Balance"
                    ],
                    [
                      "currency",
                      "AssetId"
                    ],
                    [
                      "reason",
                      "RewardReason"
                    ]
                  ]
                },
                "LPSwapOutcomeInfo": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "amount",
                      "Balance"
                    ],
                    [
                      "fee",
                      "Balance"
                    ],
                    [
                      "rewards",
                      "Vec<LPRewardsInfo>"
                    ],
                    [
                      "amount_without_impact",
                      "Balance"
                    ]
                  ]
                },
                "LiquiditySourceType": {
                  "type": "enum",
                  "value_list": [
                    "XYKPool",
                    "BondingCurvePool",
                    "MulticollateralBondingCurvePool",
                    "MockPool",
                    "MockPool2",
                    "MockPool3",
                    "MockPool4",
                    "XSTPool"
                  ]
                },
                "LoadIncomingMetaRequest": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "author",
                      "AccountId"
                    ],
                    [
                      "hash",
                      "H256"
                    ],
                    [
                      "timepoint",
                      "BridgeTimepoint"
                    ],
                    [
                      "kind",
                      "IncomingMetaRequestKind"
                    ],
                    [
                      "network_id",
                      "BridgeNetworkId"
                    ]
                  ]
                },
                "LoadIncomingRequest": {
                  "type": "enum",
                  "type_mapping": [
                    [
                      "Transaction",
                      "LoadIncomingTransactionRequest"
                    ],
                    [
                      "Meta",
                      "(LoadIncomingMetaRequest, H256)"
                    ]
                  ]
                },
                "LoadIncomingTransactionRequest": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "author",
                      "AccountId"
                    ],
                    [
                      "hash",
                      "H256"
                    ],
                    [
                      "timepoint",
                      "BridgeTimepoint"
                    ],
                    [
                      "kind",
                      "IncomingTransactionRequestKind"
                    ],
                    [
                      "network_id",
                      "BridgeNetworkId"
                    ]
                  ]
                },
                "LockInfo": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "pool_tokens",
                      "Balance"
                    ],
                    [
                      "unlocking_block",
                      "BlockNumber"
                    ],
                    [
                      "asset_a",
                      "AssetId"
                    ],
                    [
                      "asset_b",
                      "AssetId"
                    ]
                  ]
                },
                "LookupSource": "AccountId",
                "Vec<<Lookup as StaticLookup>::Source>": "Vec<LookupSource>",
                "MarketMakerInfo": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "count",
                      "u32"
                    ],
                    [
                      "volume",
                      "Balance"
                    ]
                  ]
                },
                "Mode": {
                  "type": "enum",
                  "value_list": [
                    "Permit",
                    "Forbid"
                  ]
                },
                "MultiChainHeight": {
                  "type": "enum",
                  "type_mapping": [
                    [
                      "Thischain",
                      "BlockNumber"
                    ],
                    [
                      "Sidechain",
                      "u64"
                    ]
                  ]
                },
                "MultiCurrencyBalance": "Balance",
                "MultiCurrencyBalanceOf": "MultiCurrencyBalance",
                "MultisigAccount": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "signatories",
                      "Vec<AccountId>"
                    ],
                    [
                      "threshold",
                      "u8"
                    ]
                  ]
                },
                "OffchainRequest": {
                  "type": "enum",
                  "type_mapping": [
                    [
                      "Outgoing",
                      "(OutgoingRequest, H256)"
                    ],
                    [
                      "LoadIncoming",
                      "LoadIncomingRequest"
                    ],
                    [
                      "Incoming",
                      "(IncomingRequest, H256)"
                    ]
                  ]
                },
                "OracleKey": "AssetId",
                "OutgoingAddAsset": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "author",
                      "AccountId"
                    ],
                    [
                      "asset_id",
                      "AssetId"
                    ],
                    [
                      "supply",
                      "Balance"
                    ],
                    [
                      "nonce",
                      "Index"
                    ],
                    [
                      "network_id",
                      "BridgeNetworkId"
                    ],
                    [
                      "timepoint",
                      "BridgeTimepoint"
                    ]
                  ]
                },
                "OutgoingAddAssetEncoded": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "name",
                      "String"
                    ],
                    [
                      "symbol",
                      "String"
                    ],
                    [
                      "decimal",
                      "u8"
                    ],
                    [
                      "supply",
                      "U256"
                    ],
                    [
                      "sidechain_asset_id",
                      "FixedBytes"
                    ],
                    [
                      "hash",
                      "H256"
                    ],
                    [
                      "network_id",
                      "H256"
                    ],
                    [
                      "raw",
                      "Vec<u8>"
                    ]
                  ]
                },
                "OutgoingAddPeer": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "author",
                      "AccountId"
                    ],
                    [
                      "peer_address",
                      "EthereumAddress"
                    ],
                    [
                      "peer_account_id",
                      "AccountId"
                    ],
                    [
                      "nonce",
                      "Index"
                    ],
                    [
                      "network_id",
                      "BridgeNetworkId"
                    ],
                    [
                      "timepoint",
                      "BridgeTimepoint"
                    ]
                  ]
                },
                "OutgoingAddPeerCompat": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "author",
                      "AccountId"
                    ],
                    [
                      "peer_address",
                      "EthereumAddress"
                    ],
                    [
                      "peer_account_id",
                      "AccountId"
                    ],
                    [
                      "nonce",
                      "Index"
                    ],
                    [
                      "network_id",
                      "BridgeNetworkId"
                    ],
                    [
                      "timepoint",
                      "BridgeTimepoint"
                    ]
                  ]
                },
                "OutgoingAddPeerEncoded": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "peer_address",
                      "EthereumAddress"
                    ],
                    [
                      "tx_hash",
                      "H256"
                    ],
                    [
                      "network_id",
                      "H256"
                    ],
                    [
                      "raw",
                      "Vec<u8>"
                    ]
                  ]
                },
                "OutgoingAddToken": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "author",
                      "AccountId"
                    ],
                    [
                      "token_address",
                      "EthereumAddress"
                    ],
                    [
                      "ticker",
                      "String"
                    ],
                    [
                      "name",
                      "String"
                    ],
                    [
                      "decimals",
                      "u8"
                    ],
                    [
                      "nonce",
                      "Index"
                    ],
                    [
                      "network_id",
                      "BridgeNetworkId"
                    ],
                    [
                      "timepoint",
                      "BridgeTimepoint"
                    ]
                  ]
                },
                "OutgoingAddTokenEncoded": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "token_address",
                      "EthereumAddress"
                    ],
                    [
                      "ticker",
                      "String"
                    ],
                    [
                      "name",
                      "String"
                    ],
                    [
                      "decimals",
                      "u8"
                    ],
                    [
                      "hash",
                      "H256"
                    ],
                    [
                      "network_id",
                      "H256"
                    ],
                    [
                      "raw",
                      "Vec<u8>"
                    ]
                  ]
                },
                "OutgoingMigrate": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "author",
                      "AccountId"
                    ],
                    [
                      "new_contract_address",
                      "EthereumAddress"
                    ],
                    [
                      "erc20_native_tokens",
                      "Vec<EthereumAddress>"
                    ],
                    [
                      "nonce",
                      "Index"
                    ],
                    [
                      "network_id",
                      "BridgeNetworkId"
                    ],
                    [
                      "timepoint",
                      "BridgeTimepoint"
                    ]
                  ]
                },
                "OutgoingMigrateEncoded": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "this_contract_address",
                      "EthereumAddress"
                    ],
                    [
                      "tx_hash",
                      "H256"
                    ],
                    [
                      "new_contract_address",
                      "EthereumAddress"
                    ],
                    [
                      "erc20_native_tokens",
                      "Vec<EthereumAddress>"
                    ],
                    [
                      "network_id",
                      "H256"
                    ],
                    [
                      "raw",
                      "Vec<u8>"
                    ]
                  ]
                },
                "OutgoingPrepareForMigration": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "author",
                      "AccountId"
                    ],
                    [
                      "nonce",
                      "Index"
                    ],
                    [
                      "network_id",
                      "BridgeNetworkId"
                    ],
                    [
                      "timepoint",
                      "BridgeTimepoint"
                    ]
                  ]
                },
                "OutgoingPrepareForMigrationEncoded": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "this_contract_address",
                      "EthereumAddress"
                    ],
                    [
                      "tx_hash",
                      "H256"
                    ],
                    [
                      "network_id",
                      "H256"
                    ],
                    [
                      "raw",
                      "Vec<u8>"
                    ]
                  ]
                },
                "OutgoingRemovePeer": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "author",
                      "AccountId"
                    ],
                    [
                      "peer_account_id",
                      "AccountId"
                    ],
                    [
                      "peer_address",
                      "EthereumAddress"
                    ],
                    [
                      "nonce",
                      "Index"
                    ],
                    [
                      "network_id",
                      "BridgeNetworkId"
                    ],
                    [
                      "timepoint",
                      "BridgeTimepoint"
                    ]
                  ]
                },
                "OutgoingRemovePeerCompat": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "author",
                      "AccountId"
                    ],
                    [
                      "peer_account_id",
                      "AccountId"
                    ],
                    [
                      "peer_address",
                      "EthereumAddress"
                    ],
                    [
                      "nonce",
                      "Index"
                    ],
                    [
                      "network_id",
                      "BridgeNetworkId"
                    ],
                    [
                      "timepoint",
                      "BridgeTimepoint"
                    ]
                  ]
                },
                "OutgoingRemovePeerEncoded": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "peer_address",
                      "EthereumAddress"
                    ],
                    [
                      "tx_hash",
                      "H256"
                    ],
                    [
                      "network_id",
                      "H256"
                    ],
                    [
                      "raw",
                      "Vec<u8>"
                    ]
                  ]
                },
                "OutgoingRequest": {
                  "type": "enum",
                  "type_mapping": [
                    [
                      "Transfer",
                      "OutgoingTransfer"
                    ],
                    [
                      "AddAsset",
                      "OutgoingAddAsset"
                    ],
                    [
                      "AddToken",
                      "OutgoingAddToken"
                    ],
                    [
                      "AddPeer",
                      "OutgoingAddPeer"
                    ],
                    [
                      "RemovePeer",
                      "OutgoingRemovePeer"
                    ],
                    [
                      "PrepareForMigration",
                      "OutgoingPrepareForMigration"
                    ],
                    [
                      "Migrate",
                      "OutgoingMigrate"
                    ]
                  ]
                },
                "OutgoingRequestEncoded": {
                  "type": "enum",
                  "type_mapping": [
                    [
                      "Transfer",
                      "OutgoingTransferEncoded"
                    ],
                    [
                      "AddAsset",
                      "OutgoingAddAssetEncoded"
                    ],
                    [
                      "AddToken",
                      "OutgoingAddTokenEncoded"
                    ],
                    [
                      "AddPeer",
                      "OutgoingAddPeerEncoded"
                    ],
                    [
                      "RemovePeer",
                      "OutgoingRemovePeerEncoded"
                    ],
                    [
                      "PrepareForMigration",
                      "OutgoingPrepareForMigrationEncoded"
                    ],
                    [
                      "Migrate",
                      "OutgoingMigrateEncoded"
                    ]
                  ]
                },
                "OutgoingTransfer": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "from",
                      "AccountId"
                    ],
                    [
                      "to",
                      "EthereumAddress"
                    ],
                    [
                      "asset_id",
                      "AssetId"
                    ],
                    [
                      "amount",
                      "Balance"
                    ],
                    [
                      "nonce",
                      "Index"
                    ],
                    [
                      "network_id",
                      "BridgeNetworkId"
                    ],
                    [
                      "timepoint",
                      "BridgeTimepoint"
                    ]
                  ]
                },
                "OutgoingTransferEncoded": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "currency_id",
                      "CurrencyIdEncoded"
                    ],
                    [
                      "amount",
                      "U256"
                    ],
                    [
                      "to",
                      "EthereumAddress"
                    ],
                    [
                      "from",
                      "EthereumAddress"
                    ],
                    [
                      "tx_hash",
                      "H256"
                    ],
                    [
                      "network_id",
                      "H256"
                    ],
                    [
                      "raw",
                      "Vec<u8>"
                    ]
                  ]
                },
                "OwnerId": "AccountId",
                "PendingMultisigAccount": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "approving_accounts",
                      "Vec<AccountId>"
                    ],
                    [
                      "migrate_at",
                      "Option<BlockNumber>"
                    ]
                  ]
                },
                "Permission": "Null",
                "PermissionId": "u32",
                "PoolFarmer": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "account",
                      "AccountId"
                    ],
                    [
                      "block",
                      "BlockNumber"
                    ],
                    [
                      "weight",
                      "Balance"
                    ]
                  ]
                },
                "PostDispatchInfo": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "actual_weight",
                      "Option<Weight>"
                    ],
                    [
                      "pays_fee",
                      "Pays"
                    ]
                  ]
                },
                "PredefinedAssetId": {
                  "type": "enum",
                  "value_list": [
                    "XOR",
                    "DOT",
                    "KSM",
                    "USDT",
                    "VAL",
                    "PSWAP",
                    "DAI",
                    "ETH",
                    "XSTUSD"
                  ]
                },
                "PriceInfo": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "price_failures",
                      "u32"
                    ],
                    [
                      "spot_prices",
                      "Vec<Balance>"
                    ],
                    [
                      "average_price",
                      "Balance"
                    ],
                    [
                      "needs_update",
                      "bool"
                    ],
                    [
                      "last_spot_price",
                      "Balance"
                    ]
                  ]
                },
                "Public": "[u8; 33]",
                "QuoteAmount": {
                  "type": "enum",
                  "type_mapping": [
                    [
                      "WithDesiredInput",
                      "QuoteWithDesiredInput"
                    ],
                    [
                      "WithDesiredOutput",
                      "QuoteWithDesiredOutput"
                    ]
                  ]
                },
                "QuoteWithDesiredInput": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "desired_amount_in",
                      "Balance"
                    ]
                  ]
                },
                "QuoteWithDesiredOutput": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "desired_amount_out",
                      "Balance"
                    ]
                  ]
                },
                "RefCount": "u32",
                "RequestStatus": {
                  "type": "enum",
                  "value_list": [
                    "Pending",
                    "Frozen",
                    "ApprovalsReady",
                    "Failed",
                    "Done"
                  ]
                },
                "RewardInfo": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "limit",
                      "Balance"
                    ],
                    [
                      "total_available",
                      "Balance"
                    ],
                    [
                      "rewards",
                      "BTreeMap<RewardReason, Balance>"
                    ]
                  ]
                },
                "RewardReason": {
                  "type": "enum",
                  "value_list": [
                    "Unspecified",
                    "BuyOnBondingCurve",
                    "LiquidityProvisionFarming",
                    "MarketMakerVolume"
                  ]
                },
                "Scope": {
                  "type": "enum",
                  "type_mapping": [
                    [
                      "Limited",
                      "H512"
                    ],
                    [
                      "Unlimited",
                      "Null"
                    ]
                  ]
                },
                "SignatureParams": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "r",
                      "[u8; 32]"
                    ],
                    [
                      "s",
                      "[u8; 32]"
                    ],
                    [
                      "v",
                      "u8"
                    ]
                  ]
                },
                "SmoothPriceState": "Null",
                "StakingInfo": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "deposited",
                      "Balance"
                    ],
                    [
                      "rewards",
                      "Balance"
                    ]
                  ]
                },
                "StorageVersion": "Null",
                "SwapAction": "Null",
                "SwapAmount": {
                  "type": "enum",
                  "type_mapping": [
                    [
                      "WithDesiredInput",
                      "SwapWithDesiredInput"
                    ],
                    [
                      "WithDesiredOutput",
                      "SwapWithDesiredOutput"
                    ]
                  ]
                },
                "SwapOutcome": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "amount",
                      "Balance"
                    ],
                    [
                      "fee",
                      "Balance"
                    ]
                  ]
                },
                "SwapOutcomeInfo": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "amount",
                      "Balance"
                    ],
                    [
                      "fee",
                      "Balance"
                    ]
                  ]
                },
                "SwapVariant": {
                  "type": "enum",
                  "value_list": [
                    "WithDesiredInput",
                    "WithDesiredOutput"
                  ]
                },
                "SwapWithDesiredInput": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "desired_amount_in",
                      "Balance"
                    ],
                    [
                      "min_amount_out",
                      "Balance"
                    ]
                  ]
                },
                "SwapWithDesiredOutput": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "desired_amount_out",
                      "Balance"
                    ],
                    [
                      "max_amount_in",
                      "Balance"
                    ]
                  ]
                },
                "TAssetBalance": "Balance",
                "TP": "TradingPair",
                "TechAccountId": {
                  "type": "enum",
                  "type_mapping": [
                    [
                      "Pure",
                      "(DEXId, TechPurpose)"
                    ],
                    [
                      "Generic",
                      "(Vec<u8>, Vec<u8>)"
                    ],
                    [
                      "Wrapped",
                      "AccountId"
                    ],
                    [
                      "WrappedRepr",
                      "AccountId"
                    ]
                  ]
                },
                "TechAmount": "Amount",
                "TechAssetId": {
                  "type": "enum",
                  "type_mapping": [
                    [
                      "Wrapped",
                      "PredefinedAssetId"
                    ],
                    [
                      "Escaped",
                      "AssetId"
                    ]
                  ]
                },
                "TechBalance": "Balance",
                "TechPurpose": {
                  "type": "enum",
                  "type_mapping": [
                    [
                      "FeeCollector",
                      "Null"
                    ],
                    [
                      "FeeCollectorForPair",
                      "TechTradingPair"
                    ],
                    [
                      "LiquidityKeeper",
                      "TechTradingPair"
                    ],
                    [
                      "Identifier",
                      "Vec<u8>"
                    ]
                  ]
                },
                "TechTradingPair": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "base_asset_id",
                      "TechAssetId"
                    ],
                    [
                      "target_asset_id",
                      "TechAssetId"
                    ]
                  ]
                },
                "TradingPair": {
                  "type": "struct",
                  "type_mapping": [
                    [
                      "base_asset_id",
                      "AssetId"
                    ],
                    [
                      "target_asset_id",
                      "AssetId"
                    ]
                  ]
                },
                "ValidationFunction": "Null"
              }
            }
    ]
    },
    {
            "chainId": "fc41b9bd8ef8fe53d58c7ea67c794c7ec9a73daf05e6d54b14ff6342c99ba64c",
            "runtime_id": 2040,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "pallet_transaction_payment::ChargeTransactionPayment": "module_transaction_payment::ChargeTransactionPayment",
                        "sp_runtime::MultiSignature": "acala_primitives::signature::AcalaMultiSignature",
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "179",
                        "Address": "221",
                        "ExtrinsicSignature": "556",
                        "ParaId": "68",
                        "17": "GenericEvent",
                        "204": "GenericCall"
                    }
                }
            ]
        },
        {
            "chainId": "aa3876c1dc8a1afcc2e9a685a49ff7704cfd36ad8c90bf2702b9d1b00cc40011",
            "runtime_id": 1011,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "77",
                        "Address": "140",
                        "ExtrinsicSignature": "249",
                        "ParaId": "107",
                        "17": "GenericEvent",
                        "178": "GenericCall"
                    }
                }
            ]
        },
        {
            "chainId": "cceae7f3b9947cdb67369c026ef78efa5f34a08fe5808d373c04421ecf4f1aaf",
            "runtime_id": 2,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "GenericEvent": "amplitude_runtime::RuntimeEvent",
                        "GenericCall": "amplitude_runtime::RuntimeCall"
                    }
                }
            ]
        },
        {
            "chainId": "9eb76c5184c4ab8679d2d5d819fdf90b9c001403e9e17da2e14b6d8aec4029c6",
            "runtime_id": 9,
            "types": {},
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "17": "GenericEvent",
                        "88": "GenericCall",
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "62",
                        "Address": "130",
                        "ExtrinsicSignature": "279",
                        "ParaId": "146"
                    }
                }
            ],
            "overrides": [
                {
                    "module": "Balances",
                    "constants": [
                        {
                            "name": "DefaultTip",
                            "value": "1000000000000"
                        }
                    ]
                }
            ]
        },
        {
            "chainId": "35a06bfec2edf0ff4be89a6428ccd9ff5bd0167d618c5a0d4341f9600a458d14",
            "runtime_id": 1,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "GenericEvent": "bajun_runtime::Event",
                        "GenericCall": "bajun_runtime::Call"
                    }
                }
            ]
        },
        {
            "chainId": "a85cfb9b9fd4d622a5b28289a02347af987d8f73fa3108450e2b4a11c1ce5755",
            "runtime_id": 38,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "139",
                        "Address": "0",
                        "ExtrinsicSignature": "487",
                        "ParaId": "109",
                        "17": "GenericEvent",
                        "185": "GenericCall"
                    }
                }
            ]
        },
        {
            "chainId": "9f28c6a68e0fc9646eff64935684f6eeeece527e37bbe1f213d22caa1d9d6bed",
            "runtime_id": 930,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "145",
                        "Address": "205",
                        "ExtrinsicSignature": "556",
                        "ParaId": "54",
                        "17": "GenericEvent",
                        "282": "GenericCall"
                    }
                }
            ]
        },
        {
            "chainId": "262e1b2ad728475fd6fe88e62d34c200abe6fd693931ddad144059b1eb884e5b",
            "runtime_id": 932,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "GenericEvent": "bifrost_polkadot_runtime::RuntimeEvent",
                        "GenericCall": "bifrost_polkadot_runtime::RuntimeCall"
                    }
                }
            ]
        },
        {
            "chainId": "f22b7850cdd5a7657bbfd90ac86441275bbc57ace3d2698a740c7b0ec4de5ec3",
            "runtime_id": 6,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "106",
                        "Address": "168",
                        "ExtrinsicSignature": "338",
                        "ParaId": "136",
                        "20": "GenericEvent",
                        "160": "GenericCall"
                    }
                }
            ]
        },
        {
            "chainId": "4ac80c99289841dd946ef92765bf659a307d39189b3ce374a92b5f0415ee17a1",
            "runtime_id": 3140,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "102",
                        "Address": "163",
                        "ExtrinsicSignature": "329",
                        "ParaId": "52",
                        "17": "GenericEvent",
                        "190": "GenericCall"
                    }
                }
            ]
        },
        {
            "chainId": "b3db41421702df9a7fcac62b53ffeac85f7853cc4e689e0b93aeb3db18c09d82",
            "runtime_id": 1000,
            "types": {},
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "56",
                        "Address": "119",
                        "ExtrinsicSignature": "283",
                        "ParaId": "87",
                        "20": "GenericEvent",
                        "153": "GenericCall"
                    }
                }
            ]
        },
        {
            "chainId": "5c7bd13edf349b33eb175ffae85210299e324d852916336027391536e686f267",
            "runtime_id": 19,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "82",
                        "Address": "119",
                        "ExtrinsicSignature": "365",
                        "ParaId": "129",
                        "17": "GenericEvent",
                        "195": "GenericCall"
                    }
                }
            ]
        },
        {
            "chainId": "daab8df776eb52ec604a5df5d388bb62a050a0aaec4556a64265b9d42755552d",
            "runtime_id": 1100,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "GenericEvent": "composable_runtime::Event",
                        "GenericCall": "composable_runtime::Call"
                    }
                }
            ]
        },
        {
            "chainId": "eac895d7768b17837a9c3a9f0280c01502c3ef40193df923490a0fa9c60ea076",
            "runtime_id": 5210,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "GenericEvent": "crab_parachain_runtime::Event",
                        "GenericCall": "crab_parachain_runtime::Call"
                    }
                }
            ]
        },
        {
            "chainId": "d4c0c08ca49dc7c680c3dac71a7c0703e5b222f4b6c03fe4c5219bb8f22c18dc",
            "runtime_id": 14,
            "types": {},
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "GenericEvent": "crust_parachain_runtime::Event",
                        "GenericCall": "crust_parachain_runtime::Call"
                    }
                }
            ]
        },
        {
            "chainId": "e71578b37a7c799b0ab4ee87ffa6f059a6b98f71f06fb8c84a8d88013a548ad6",
            "runtime_id": 5320,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "GenericEvent": "darwinia_parachain_runtime::Event",
                        "GenericCall": "darwinia_parachain_runtime::Call"
                    }
                }
            ]
        },
        {
            "chainId": "577d331ca43646f547cdaa07ad0aa387a383a93416764480665103081f3eaf14",
            "runtime_id": 20,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "GenericEvent": "dorafactory_node_runtime::Event",
                        "GenericCall": "dorafactory_node_runtime::Call"
                    }
                }
            ]
        },
        {
            "chainId": "335369975fced3fc22e23498da306a712f4fd964c957364d53c49cea9db8bc2f",
            "runtime_id": 1,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "107",
                        "Address": "161",
                        "ExtrinsicSignature": "283",
                        "ParaId": "137",
                        "20": "GenericEvent",
                        "159": "GenericCall"
                    }
                }
            ]
        },
        {
            "chainId": "7dd99936c1e9e6d1ce7d90eb6f33bea8393b4bf87677d675aa63c9cb3e8c5b5b",
            "runtime_id": 8,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "GenericEvent": "encointer_runtime::Event",
                        "GenericCall": "encointer_runtime::Call"
                    }
                }
            ]
        },
        {
            "chainId": "89d3ec46d2fb43ef5a9713833373d5ea666b092fa8fd68fbc34596036571b907",
            "runtime_id": 2,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "GenericEvent": "eq_node_runtime::RuntimeEvent",
                        "GenericCall": "eq_node_runtime::RuntimeCall"
                    }
                }
            ]
        },
        {
            "chainId": "19a3733beb9cb8a970a308d835599e9005e02dc007a35440e461a451466776f8",
            "runtime_id": 5,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "GenericEvent": "gm_chain_runtime::Event",
                        "GenericCall": "gm_chain_runtime::Call"
                    }
                }
            ]
        },
        {
            "chainId": "afdc188f45c71dacbaa0b62e16a91f726c7b8699a9748cdf715459de6b7f366d",
            "runtime_id": 100,
            "types": {},
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "39",
                        "Address": "0",
                        "ExtrinsicSignature": "146",
                        "ParaId": "101",
                        "20": "GenericEvent",
                        "92": "GenericCall"
                    }
                }
            ]
        },
        {
            "chainId": "ca93a37c913a25fa8fdb33c7f738afc39379cb71d37874a16d4c091a5aef9f89",
            "runtime_id": 1008,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "GenericEvent": "imbue_kusama_runtime::Event",
                        "GenericCall": "imbue_kusama_runtime::Call"
                    }
                }
            ]
        },
        {
            "chainId": "724c168d8e86b78b831c641e2cc822b8d1bf99fa0b4b28fe59985cd6fd580215",
            "runtime_id": 3,
            "types": {},
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "37",
                        "Address": "96",
                        "ExtrinsicSignature": "123",
                        "ParaId": "70",
                        "17": "GenericEvent",
                        "94": "GenericCall"
                    }
                }
            ]
        },
        {
            "chainId": "feb426ca713f0f46c96465b8f039890370cf6bfd687c9076ea2843f58a6ae8a7",
            "runtime_id": 6,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "GenericEvent": "kabocha_runtime::Event",
                        "GenericCall": "kabocha_runtime::Call"
                    }
                }
            ]
        },
        {
            "chainId": "kapex.json",
            "runtime_id": 1,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "GenericEvent": "totem_parachain_runtime::Event",
                        "GenericCall": "totem_parachain_runtime::Call"
                    }
                }
            ]
        },
        {
            "chainId": "baf5aabe40646d11f0ee8abbdc64f4a4b7674925cba08e4a05ff9ebed6e2126b",
            "runtime_id": 2041,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "pallet_transaction_payment::ChargeTransactionPayment": "module_transaction_payment::ChargeTransactionPayment",
                        "sp_runtime::MultiSignature": "acala_primitives::signature::AcalaMultiSignature",
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "180",
                        "Address": "222",
                        "ExtrinsicSignature": "561",
                        "ParaId": "68",
                        "17": "GenericEvent",
                        "205": "GenericCall"
                    }
                }
            ]
        },
        {
            "chainId": "d43540ba6d3eb4897c28a77d48cb5b729fea37603cbbfc7a86a73b72adb3be8d",
            "runtime_id": 1120,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "122",
                        "Address": "155",
                        "ExtrinsicSignature": "491",
                        "ParaId": "45",
                        "17": "GenericEvent",
                        "148": "GenericCall"
                    }
                }
            ]
        },
        {
            "chainId": "52149c30c1eb11460dce6c08b73df8d53bb93b4a15d0a2e7fd5dafe86a73c0da",
            "runtime_id": 1310,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "GenericEvent": "kico_runtime::Event",
                        "GenericCall": "kico_runtime::Call"
                    }
                }
            ]
        },
        {
            "chainId": "411f057b9107718c9624d6aa4a3f23c1653898297f3d4d529d9bb6511a39dd21",
            "runtime_id": 10500,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u64",
                        "Phase": "66",
                        "Address": "105",
                        "ExtrinsicSignature": "233",
                        "ParaId": "243",
                        "17": "GenericEvent",
                        "179": "GenericCall"
                    }
                }
            ]
        },
        {
            "chainId": "9af9a64e6e4da8e3073901c3ff0cc4c3aad9563786d89daf6ad820b6e14a0b8b",
            "runtime_id": 13,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "132",
                        "Address": "0",
                        "ExtrinsicSignature": "412",
                        "ParaId": "90",
                        "17": "GenericEvent",
                        "158": "GenericCall"
                    }
                }
            ]
        },
        {
            "chainId": "b0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe",
            "runtime_id": 9180,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "148",
                        "Address": "201",
                        "ExtrinsicSignature": "521",
                        "ParaId": "90",
                        "17": "GenericEvent",
                        "309": "GenericCall"
                    }
                }
            ],
            "overrides": [
                {
                    "module": "Staking",
                    "constants": [
                        { "name": "MaxNominations", "value": "24" }
                    ]
                }
            ]
        },
        {
            "chainId": "f95f9821674aec3a20383a31a28db18670df0c2874ec5f3aa20fddeccf86efb0",
            "runtime_id": 9290,
            "types": {},
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "161",
                        "Address": "208",
                        "ExtrinsicSignature": "542",
                        "ParaId": "102",
                        "18": "GenericEvent",
                        "323": "GenericCall"
                    }
                }
            ]
        },
        {
            "chainId": "f2584690455deda322214e97edfffaf4c1233b6e4625e39478496b3e2f5a44c5",
            "runtime_id": 21,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "GenericEvent": "kylin_runtime::Event",
                        "GenericCall": "kylin_runtime::Call"
                    }
                }
            ]
        },
        {
            "chainId": "2fc8bb6ed7c0051bdcf4866c322ed32b6276572713607e3297ccf411b8f14aa9",
            "runtime_id": 9071,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "GenericEvent": "litentry_parachain_runtime::Event",
                        "GenericCall": "litentry_parachain_runtime::Call"
                    }
                }
            ]
        },
        {
            "chainId": "da5831fbc8570e3c6336d0d72b8c08f8738beefec812df21ef2afc2982ede09c",
            "runtime_id": 9040,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "110",
                        "Address": "156",
                        "ExtrinsicSignature": "354",
                        "ParaId": "59",
                        "17": "GenericEvent",
                        "137": "GenericCall"
                    }
                }
            ]
        },
        {
            "chainId": "d611f22d291c5b7b69f1e105cca03352984c344c4421977efaa4cbdd1834e2aa",
            "runtime_id": 4,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "GenericEvent": "mangata_kusama_runtime::Event",
                        "GenericCall": "mangata_kusama_runtime::Call"
                    }
                }
            ]
        },
        {
            "chainId": "91bc6e169807aaa54802737e1c504b2577d4fafedd5a02c10293b1cd60e39527",
            "runtime_id": 1300,
            "types": {},
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "134",
                        "H160": "[u8; 20]",
                        "0": "H160",
                        "Address": "0",
                        "EthereumSignature": {
                            "type": "struct",
                            "type_mapping": [
                                [
                                    "r",
                                    "H256"
                                ],
                                [
                                    "s",
                                    "H256"
                                ],
                                [
                                    "v",
                                    "u8"
                                ]
                            ]
                        },
                        "ExtrinsicSignature": "EthereumSignature",
                        "ParaId": "80",
                        "18": "GenericEvent",
                        "155": "GenericCall"
                    }
                }
            ],
            "overrides": [
                {
                    "module": "Babe",
                    "constants": [
                        { "name": "ExpectedBlockTime", "value": "12000" }
                    ]
                }
            ]
        },
        {
            "chainId": "fe58ea77779b7abda7da4ec526d14db9b1e9cd40a217c34892af80a9b332b76d",
            "runtime_id": 1300,
            "types": {},
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "133",
                        "H160": "[u8; 20]",
                        "0": "H160",
                        "Address": "0",
                        "EthereumSignature": {
                            "type": "struct",
                            "type_mapping": [
                                [
                                    "r",
                                    "H256"
                                ],
                                [
                                    "s",
                                    "H256"
                                ],
                                [
                                    "v",
                                    "u8"
                                ]
                            ]
                        },
                        "ExtrinsicSignature": "EthereumSignature",
                        "ParaId": "82",
                        "18": "GenericEvent",
                        "230": "GenericCall"
                    }
                }
            ],
            "overrides": [
                {
                    "module": "Babe",
                    "constants": [
                        { "name": "ExpectedBlockTime", "value": "12000" }
                    ]
                }
            ]
        },
        {
            "chainId": "97da7ede98d7bad4e36b4d734b6055425a3be036da2a332ea5a7037656427a21",
            "runtime_id": 1,
            "types": {},
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "56",
                        "Address": "91",
                        "ExtrinsicSignature": "188",
                        "ParaId": "128",
                        "20": "GenericEvent",
                        "103": "GenericCall"
                    }
                }
            ]
        },
        {
            "chainId": "e7e0962324a3b86c83404dbea483f25fb5dab4c224791c81b756cfc948006174",
            "runtime_id": 102,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "GenericEvent": "origintrail_parachain_runtime::Event",
                        "GenericCall": "origintrail_parachain_runtime::Call"
                    }
                }
            ]
        },
        {
            "chainId": "e61a41c53f5dcd0beb09df93b34402aada44cb05117b71059cce40a2723a4e97",
            "runtime_id": 177,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "143",
                        "Address": "173",
                        "ExtrinsicSignature": "501",
                        "ParaId": "57",
                        "17": "GenericEvent",
                        "168": "GenericCall"
                    }
                }
            ]
        },
        {
            "chainId": "64a1c658a48b2e70a7fb1ad4c39eea35022568c20fc44a6e2e3d0a57aee6053b",
            "runtime_id": 180,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "140",
                        "Address": "170",
                        "ExtrinsicSignature": "504",
                        "ParaId": "57",
                        "17": "GenericEvent",
                        "165": "GenericCall"
                    }
                }
            ]
        },
        {
            "chainId": "1bb969d85965e4bb5a651abbedf21a54b6b31a21f66b5401cc3f1e286268d736",
            "runtime_id": 1090,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "GenericEvent": "phala_parachain_runtime::Event",
                        "GenericCall": "phala_parachain_runtime::Call"
                    }
                }
            ]
        },
        {
            "chainId": "6811a339673c9daa897944dcdac99c6e2939cc88245ed21951a0a3c9a2be75bc",
            "runtime_id": 1000,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "114",
                        "Address": "142",
                        "ExtrinsicSignature": "264",
                        "ParaId": "57",
                        "17": "GenericEvent",
                        "139": "GenericCall"
                    }
                }
            ]
        },
        {
            "chainId": "0e06260459b4f9034aba0a75108c08ed73ea51d2763562749b1d3600986c4ea5",
            "runtime_id": 21,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "GenericEvent": "pichiu_runtime::Event",
                        "GenericCall": "pichiu_runtime::Call"
                    }
                }
            ]
        },
        {
            "chainId": "3920bcb4960a1eef5580cd5367ff3f430eef052774f78468852f7b9cb39f8a3c",
            "runtime_id": 274,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "GenericEvent": "node_polkadex_runtime::RuntimeEvent",
                        "GenericCall": "node_polkadex_runtime::RuntimeCall"
                    }
                }
            ]
        },
        {
            "chainId": "91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3",
            "runtime_id": 9180,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "145",
                        "Address": "188",
                        "ExtrinsicSignature": "407",
                        "ParaId": "87",
                        "17": "GenericEvent",
                        "171": "GenericCall"
                    }
                }
            ],
            "overrides": [
                {
                    "module": "Staking",
                    "constants": [
                        { "name": "MaxNominations", "value": "16" }
                    ]
                }
            ]
        },
        {
            "chainId": "98538beb4baca165a25d5a59c341e2f6d9a3361c4be80ff7770572b1d484538d",
            "runtime_id": 9290,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "145",
                        "Address": "188",
                        "ExtrinsicSignature": "407",
                        "ParaId": "87",
                        "17": "GenericEvent",
                        "171": "GenericCall"
                    }
                }
            ],
            "overrides": [
                {
                    "module": "Staking",
                    "constants": [
                        { "name": "MaxNominations", "value": "16" }
                    ]
                }
            ]
        },
        {
            "chainId": "cd4d732201ebe5d6b014edda071c4203e16867305332301dc8d092044b28e554",
            "runtime_id": 917004,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "250",
                        "Address": "51",
                        "ExtrinsicSignature": "332",
                        "ParaId": "14",
                        "226": "GenericEvent",
                        "79": "GenericCall"
                    }
                }
            ]
        },
        {
            "chainId": "631ccc82a078481584041656af292834e1ae6daab61d2875b4dd0c14bb9b17bc",
            "runtime_id": 16,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "69",
                        "Address": "139",
                        "ExtrinsicSignature": "62",
                        "ParaId": "153",
                        "17": "GenericEvent",
                        "95": "GenericCall"
                    }
                }
            ]
        },
        {
            "chainId": "rococo.json",
            "runtime_id": 9180,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "129",
                        "Address": "183",
                        "ExtrinsicSignature": "361",
                        "ParaId": "46",
                        "17": "GenericEvent",
                        "389": "GenericCall"
                    }
                }
            ]
        },
        {
            "chainId": "f1cf9022c7ebb34b162d5b5e34e705a5a740b2d0ecc1009fb89023e62a488108",
            "runtime_id": 43,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "62",
                        "Address": "130",
                        "ExtrinsicSignature": "294",
                        "ParaId": "146",
                        "17": "GenericEvent",
                        "88": "GenericCall"
                    }
                }
            ]
        },
        {
            "chainId": "b34f6cd03a41f0fab38ba9fd5b11cce5f303633c46f39f0c6fdc7c3c602bafa9",
            "runtime_id": 1,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "GenericEvent": "snow_runtime::Event",
                        "GenericCall": "snow_runtime::Call"
                    }
                }
            ]
        },
        {
            "chainId": "6d8d9f145c2177fa83512492cdd80a71e29f22473f4a8943a6292149ac319fb9",
            "runtime_id": 1,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "78",
                        "Address": "140",
                        "ExtrinsicSignature": "224",
                        "ParaId": "110",
                        "17": "GenericEvent",
                        "221": "GenericCall"
                    }
                }
            ]
        },
        {
            "chainId": "sora_parachain.json",
            "runtime_id": 1,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "GenericEvent": "parachain_template_runtime::Event",
                        "GenericCall": "parachain_template_runtime::Call"
                    }
                }
            ]
        },
        {
            "chainId": "3266816be9fa51b32cfea58d3e33ca77246bc9618595a4300e44c8856a8d8a17",
            "runtime_id": 42,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Address": "0",
                        "Balance": "u128",
                        "Index": "u32",
                        "17": "GenericEvent",
                        "181" :"GenericCall"
                    }
                }
            ]
        },
        {
            "chainId": "48239ef607d7928874027a43a67689209727dfb3d3dc5e5b03a39bdc2eda771a",
            "runtime_id": 700,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "93",
                        "Address": "152",
                        "ExtrinsicSignature": "293",
                        "ParaId": "35",
                        "17": "GenericEvent",
                        "244": "GenericCall"
                    }
                }
            ]
        },
        {
            "chainId": "68d56f15f85d3136970ec16946040bc1752654e906147f7e43e9d539d7c3de2f",
            "runtime_id": 700,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "93",
                        "Address": "152",
                        "ExtrinsicSignature": "293",
                        "ParaId": "35",
                        "17": "GenericEvent",
                        "244": "GenericCall"
                    }
                }
            ]
        },
        {
            "chainId": "4a12be580bb959937a1c7a61d5cf24428ed67fa571974b4007645d1886e7c89f",
            "runtime_id": 6,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "82",
                        "Address": "143",
                        "ExtrinsicSignature": "241",
                        "ParaId": "38",
                        "17": "GenericEvent",
                        "182": "GenericCall"
                    }
                }
            ]
        },
        {
            "chainId": "eacdd2d5b42de9769ccbb6e8d9013ab0d90ab105bf601d4aac53e874c145ec21",
            "runtime_id": 3,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "GenericEvent": "datahighway_parachain_runtime::Event",
                        "GenericCall": "datahighway_parachain_runtime::Call"
                    }
                }
            ]
        },
        {
            "chainId": "d42e9606a995dfe433dc7955dc2a70f495f350f373daa200098ae84437816ad2",
            "runtime_id": 4,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "GenericEvent": "tinkernet_runtime::Event",
                        "GenericCall": "tinkernet_runtime::Call"
                    }
                }
            ]
        },
        {
            "chainId": "0f62b701fb12d02237a33b84818c11f621653d2b1614c777973babf4652b535d",
            "runtime_id": 278,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "GenericEvent": "turing_runtime::RuntimeEvent",
                        "GenericCall": "turing_runtime::RuntimeCall"
                    }
                }
            ]
        },
        {
            "chainId": "84322d9cddbf35088f1e54e9a85c967a41a56a4f43445768125e61af166c7d31",
            "runtime_id": 924000,
            "types": { },
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "GenericEvent": "unique_runtime::RuntimeEvent",
                        "GenericCall": "unique_runtime::RuntimeCall"
                    }
                }
            ]
        },
        {
            "chainId": "e143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e",
            "runtime_id": 9180,
            "types": {},
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "129",
                        "Address": "182",
                        "ExtrinsicSignature": "448",
                        "ParaId": "73",
                        "17": "GenericEvent",
                        "275": "GenericCall"
                    }
                }
            ],
            "overrides": [
                {
                    "module": "Staking",
                    "constants": [
                        { "name": "MaxNominations", "value": "16" }
                    ]
                }
            ]
        },
        {
            "chainId": "1bf2a2ecb4a868de66ea8610f2ce7c8c43706561b6476031315f6640fe38e060",
            "runtime_id": 33,
            "types": {},
            "versioning": [
                {
                    "runtime_range": [
                        0,
                        null
                    ],
                    "types": {
                        "Balance": "u128",
                        "Index": "u32",
                        "Phase": "139",
                        "Address": "171",
                        "ExtrinsicSignature": "294",
                        "ParaId": "255",
                        "20": "GenericEvent",
                        "192": "GenericCall"
                    }
                }
            ]
        },
        {
            "chainId": "401a1f9dca3da46f5c4091016c8a2f26dcea05865116b286f60f668207d1474b",
            "runtime_id": 1102,
            "types": {},
            "versioning": [
            {
                "runtime_range": [
                    0,
                    null
                ],
                "types": {
                    "Balance": "u128",
                    "Index": "u32",
                    "Phase": "130",
                    "H160": "[u8; 20]",
                    "0": "H160",
                    "Address": "0",
                    "EthereumSignature": {
                        "type": "struct",
                        "type_mapping": [
                            [
                                "r",
                                "H256"
                            ],
                            [
                                "s",
                                "H256"
                            ],
                            [
                                "v",
                                "u8"
                            ]
                        ]
                    },
                    "ExtrinsicSignature": "EthereumSignature",
                    "ParaId": "156",
                    "21": "GenericEvent",
                    "230": "GenericCall"
                }
            }
        ]
        },
        {
          "chainId": "6e938c4a786f8df6f38d0c06f00a8573f1f7aabeebf48aee5157a93cc5fe3271",
          "runtime_id": 9310,
          "types": { },
          "versioning": [
            {
              "runtime_range": [
                0,
                null
              ],
              "types": {
                  "Balance": "u128",
                  "Index": "u32",
                  "Phase": "485",
                  "Address": "90",
                  "ExtrinsicSignature": "385",
                  "ParaId": "155",
                  "19": "GenericEvent",
                  "72": "GenericCall"
              }
            }
          ]
        },
        {
          "chainId": "fd4d46e9a51e16babf791b94d6dbf771ed1d7de8a11b310aa98c847890fa9ff3",
          "runtime_id": 9310,
          "types": {},
          "versioning": [
            {
              "runtime_range": [
                0,
                null
              ],
              "types": {
                  "Balance": "u128",
                  "Index": "u32",
                  "Phase": "156",
                  "Address": "197",
                  "ExtrinsicSignature": "421",
                  "ParaId": "98",
                  "19": "GenericEvent",
                  "181": "GenericCall",
                  "0": "GenericAccountId"
              }
            }
          ],
          "overrides": [
            {
              "module": "Staking",
              "constants": [
                { "name": "MaxNominations", "value": "16" }
              ]
            }
          ]
        },
        {
        "chainId": "7e4e32d0feafd4f9c9414b0be86373f9a1efa904809b683453a9af6856d38ad5",
        "runtime_id": 42,
        "types": { },
        "versioning": [
            {
                "runtime_range": [
                    0,
                    null
                ],
                "types": {
                    "Address": "0",
                    "Balance": "u128",
                    "Index": "u32",
                    "17": "GenericEvent",
                    "181" :"GenericCall"
                }
            }
        ]
    },
        {
            "chainId" : "bf88efe70e9e0e916416e8bed61f2b45717f517d7f3523e33c7b001e5ffcbc72",
            "runtime_id": 1,
              "types": {},
              "versioning": [
                {
                  "runtime_range": [
                    0,
                    null
                  ],
                  "types": {
                    "Balance": "u128",
                    "Index": "u32",
                    "Phase": "145",
                    "Address": "0",
                    "ExtrinsicSignature": "487",
                    "ParaId": "115",
                    "17": "GenericEvent",
                    "171": "GenericCall"
                  }
                }
              ]
        },
        {
        "chainId" : "70255b4d28de0fc4e1a193d7e175ad1ccef431598211c55538f1018651a0344e",
        "runtime_id": 39,
        "types": { },
        "versioning": [
            {
                "runtime_range": [
                    0,
                    null
                ],
                "types": {
                    "Balance": "u128",
                    "Index": "u32",
                    "Phase": "65",
                    "Address": "100",
                    "ExtrinsicSignature": "287",
                    "17": "GenericEvent",
                    "94": "GenericCall",
                    "0": "GenericAccountId"
                }
            }
        ]
    },
    {
        "chainId": "00dcb981df86429de8bbacf9803401f09485366c44efbf53af9ecfab03adc7e5",
        "runtime_id": 9360,
        "types": { },
        "versioning": [
            {
                "runtime_range": [
                    0,
                    null
                ],
                "types": {
                    "Balance": "u128",
                    "Index": "u32",
                    "GenericEvent": "bridge_hub_kusama_runtime::RuntimeEvent",
                    "GenericCall": "bridge_hub_kusama_runtime::RuntimeCall"
                }
            }
        ]
    },
    {
        "chainId": "6f0f071506de39058fe9a95bbca983ac0e9c5da3443909574e95d52eb078d348",
        "runtime_id": 5,
        "types": { },
        "versioning": [
            {
                "runtime_range": [
                    0,
                    null
                ],
                "types": {
                    "Balance": "u128",
                    "Index": "u32",
                    "GenericEvent": "ipci_runtime::Event",
                    "GenericCall": "ipci_runtime::Call"
                }
            }
        ]
    },
    {
        "chainId": "cdedc8eadbfa209d3f207bba541e57c3c58a667b05a2e1d1e86353c9000758da",
        "runtime_id": 29,
        "types": { },
        "versioning": [
            {
                "runtime_range": [
                    0,
                    null
                ],
                "types": {
                    "Balance": "u128",
                    "Index": "u32",
                    "GenericEvent": "integritee_runtime::RuntimeEvent",
                    "GenericCall": "integritee_runtime::RuntimeCall"
                }
            }
        ]
    },
    {
        "chainId": "2991d4125ac465d64c4c0b915fedd7168b5961b7676480636e3747f1ad64cfb9",
        "runtime_id": 63,
        "types": { },
        "versioning": [
            {
                "runtime_range": [
                    0,
                    null
                ],
                "types": {
                    "Balance": "u128",
                    "Index": "u32",
                    "GenericEvent": "subzero_runtime::Event",
                    "GenericCall": "subzero_runtime::Call"
                }
            }
        ]
    },
    {
        "chainId": "596c5a43bc91913ed88b4aef4590671308e39119c2be1955bf37b33d4698d7fb",
        "runtime_id": 9370,
        "types": { },
        "versioning": [
            {
                "runtime_range": [
                    0,
                    null
                ],
                "types": {
                    "Balance": "u128",
                    "Index": "u32",
                    "GenericEvent": "bridge_hub_polkadot_runtime::RuntimeEvent",
                    "GenericCall": "bridge_hub_polkadot_runtime::RuntimeCall"
                }
            }
        ]
    },
    {
        "chainId": "e358eb1d11b31255a286c12e44fe6780b7edb171d657905a97e39f71d9c6c3ee",
        "runtime_id": 1,
        "types": { },
        "versioning": [
            {
                "runtime_range": [
                    0,
                    null
                ],
                "types": {
                    "Balance": "u128",
                    "Index": "u32",
                    "GenericEvent": "ajuna_runtime::Event",
                    "GenericCall": "ajuna_runtime::Call"
                }
            }
        ]
    },
    {
        "chainId": "c14597baeccb232d662770d2d50ae832ca8c3192693d2b0814e6433f2888ddd6",
        "runtime_id": 1002,
        "types": { },
        "versioning": [
            {
                "runtime_range": [
                    0,
                    null
                ],
                "types": {
                    "Balance": "u128",
                    "Index": "u32",
                    "GenericEvent": "bitgreen_runtime::RuntimeEvent",
                    "GenericCall": "bitgreen_runtime::RuntimeCall"
                }
            }
        ]
    },
    {
        "chainId": "4319cc49ee79495b57a1fec4d2bd43f59052dcc690276de566c2691d6df4f7b8",
        "runtime_id": 3,
        "types": { },
        "versioning": [
            {
                "runtime_range": [
                    0,
                    null
                ],
                "types": {
                    "Balance": "u128",
                    "Index": "u32",
                    "GenericEvent": "crust_parachain_runtime::Event",
                    "GenericCall": "crust_parachain_runtime::Call"
                }
            }
        ]
    },
    {
        "chainId": "4a587bf17a404e3572747add7aab7bbe56e805a5479c6c436f07f36fcc8d3ae1",
        "runtime_id": 11,
        "types": { },
        "versioning": [
            {
                "runtime_range": [
                    0,
                    null
                ],
                "types": {
                    "Balance": "u128",
                    "Index": "u32",
                    "GenericEvent": "frequency_runtime::RuntimeEvent",
                    "GenericCall": "frequency_runtime::RuntimeCall"
                }
            }
        ]
    },
    {
        "chainId": "7838c3c774e887c0a53bcba9e64f702361a1a852d5550b86b58cd73827fa1e1e",
        "runtime_id": 4,
        "types": { },
        "versioning": [
            {
                "runtime_range": [
                    0,
                    null
                ],
                "types": {
                    "Balance": "u128",
                    "Index": "u32",
                    "GenericEvent": "totem_parachain_runtime::RuntimeEvent",
                    "GenericCall": "totem_parachain_runtime::RuntimeCall"
                }
            }
        ]
    },
    {
        "chainId": "5d3c298622d5634ed019bf61ea4b71655030015bde9beb0d6a24743714462c86",
        "runtime_id": 4,
        "types": { },
        "versioning": [
            {
                "runtime_range": [
                    0,
                    null
                ],
                "types": {
                    "Balance": "u128",
                    "Index": "u32",
                    "GenericEvent": "pendulum_runtime::RuntimeEvent",
                    "GenericCall": "pendulum_runtime::RuntimeCall"
                }
            }
        ]
    },
    {
        "chainId": "6859c81ca95ef624c9dfe4dc6e3381c33e5d6509e35e147092bfbc780f777c4e",
        "runtime_id": 13,
        "types": { },
        "versioning": [
            {
                "runtime_range": [
                    0,
                    null
                ],
                "types": {
                    "Balance": "u128",
                    "Index": "u32",
                    "GenericEvent": "mainnet_runtime::RuntimeEvent",
                    "GenericCall": "mainnet_runtime::RuntimeCall"
                }
            }
        ]
    },
    {
        "chainId": "6408de7737c59c238890533af25896a2c20608d8b380bb01029acb392781063e",
        "runtime_id": 102000,
        "types": { },
        "versioning": [
            {
                "runtime_range": [
                    0,
                    null
                ],
                "types": {
                    "Balance": "u128",
                    "Index": "u32",
                    "GenericEvent": "rococo_runtime::RuntimeEvent",
                    "GenericCall": "rococo_runtime::RuntimeCall"
                }
            }
        ]
    },
    {
        "chainId": "3af4ff48ec76d2efc8476730f423ac07e25ad48f5f4c9dc39c778b164d808615",
        "runtime_id": 605,
        "types": { },
        "versioning": [
            {
                "runtime_range": [
                    0,
                    null
                ],
                "types": {
                    "Balance": "u128",
                    "Index": "u32",
                    "GenericEvent": "matrix_runtime::RuntimeEvent",
                    "GenericCall": "matrix_runtime::RuntimeCall"
                }
            }
        ]
    },
    {
        "chainId": "a37725fd8943d2a524cb7ecc65da438f9fa644db78ba24dcd0003e2f95645e8f",
        "runtime_id": 605,
        "types": { },
        "versioning": [
            {
                "runtime_range": [
                    0,
                    null
                ],
                "types": {
                    "Balance": "u128",
                    "Index": "u32",
                    "GenericEvent": "matrix_runtime::RuntimeEvent",
                    "GenericCall": "matrix_runtime::RuntimeCall"
                }
            }
        ]
    },
    {
        "chainId": "9de765698374eb576968c8a764168893fb277e65ad3ddafcfe2c49593fc6d663",
        "runtime_id": 21,
        "types": { },
        "versioning": [
            {
                "runtime_range": [
                    0,
                    null
                ],
                "types": {
                    "Balance": "u128",
                    "Index": "u32",
                    "GenericEvent": "gens_node_runtime::RuntimeEvent",
                    "GenericCall": "gens_node_runtime::RuntimeCall"
                }
            }
        ]
      }
]
